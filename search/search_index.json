{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Coding Notes","text":"<p>Welcome to Coding Notes, a neatly organized reference for mastering HTML, CSS, JavaScript, Git, Node.js, React, and more. Think of it as a personal coding cheat sheet that grows with me.</p>"},{"location":"#topics-covered","title":"Topics Covered","text":"<ol> <li>HTML</li> <li>CSS</li> <li>JavaScript</li> <li>Git &amp; GitHub</li> <li>Node.js</li> <li>Hosting</li> <li>Express.js</li> <li>MongoDB</li> <li>React</li> </ol>"},{"location":"#why-use-this","title":"Why Use This?","text":"<ul> <li>Clarity \u2192 Well-explained concepts with real code examples  </li> <li>Quick Reference \u2192 Fast lookup for syntax and usage  </li> <li>Interview Prep \u2192 Covers fundamentals recruiters actually ask  </li> <li>Beginner Friendly \u2192 Starts from scratch with practical guides</li> </ul>"},{"location":"#how-to-use","title":"How to Use","text":"<ul> <li>Browse topics via the navigation sidebar or search bar  </li> <li>Jump into any section when you need a quick refresher  </li> <li>Treat it as a growing personal knowledge base</li> </ul>"},{"location":"#author","title":"Author","text":"<p>Made with \u2764\ufe0f by Aman Verma</p> <p>\u201cThe best way to learn to code is to write code.\u201d  </p>"},{"location":"css/01_Basics/","title":"Basics","text":"<p>CSS (Cascading Style Sheets) is used to style HTML elements \u2014 controlling their layout, color, spacing, fonts, and more.</p>"},{"location":"css/01_Basics/#1-css-syntax","title":"1. CSS Syntax","text":"<pre><code>selector {\n  property: value;\n}\n</code></pre>"},{"location":"css/01_Basics/#example","title":"Example:","text":"<pre><code>p {\n  color: blue;\n  font-size: 16px;\n}\n</code></pre>"},{"location":"css/01_Basics/#output","title":"Output:","text":"<pre>\np {\n  color: blue;\n  font-size: 16px;\n}\n</pre>"},{"location":"css/01_Basics/#2-adding-css-to-html","title":"2. Adding CSS to HTML","text":"<p>There are 3 ways to apply CSS:</p>"},{"location":"css/01_Basics/#a-inline-css","title":"a) Inline CSS","text":"<pre><code>&lt;p style=\"color: red;\"&gt;Inline styled paragraph&lt;/p&gt;\n</code></pre>"},{"location":"css/01_Basics/#b-internal-css-within-style-tag","title":"b) Internal CSS (within <code>&lt;style&gt;</code> tag)","text":"<pre><code>&lt;head&gt;\n  &lt;style&gt;\n    h1 {\n      text-align: center;\n      color: green;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n</code></pre>"},{"location":"css/01_Basics/#c-external-css-best-practice","title":"c) External CSS (best practice)","text":"<p>Inside <code>&lt;head&gt;</code> in <code>index.html</code></p> <pre><code>&lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\n</code></pre> <p>And in <code>styles.css</code>:</p> <pre><code>body {\n  background-color: #f0f0f0;\n}\n</code></pre>"},{"location":"css/01_Basics/#3-comments-in-css","title":"3. Comments in CSS","text":"<pre><code>/* This is a CSS comment */\n</code></pre>"},{"location":"css/01_Basics/#4-colors-in-css","title":"4. Colors in CSS","text":"<p>You can use:</p> <ul> <li>Named colors (<code>red</code>, <code>blue</code>, <code>green</code>)</li> <li>Hex codes (<code>#ff0000</code>)</li> <li>RGB (<code>rgb(255, 0, 0)</code>)</li> <li>HSL (<code>hsl(0, 100%, 50%)</code>)</li> </ul> <pre><code>body {\n  background-color: #121212;\n  color: rgb(255, 255, 255);\n}\n</code></pre>"},{"location":"css/01_Basics/#5-inheritance-specificity","title":"5. Inheritance &amp; Specificity","text":"<ul> <li>Some CSS properties (like <code>color</code>, <code>font-family</code>) are inherited by default</li> <li>Specificity decides which rule wins if multiple styles apply</li> <li>Inline &gt; ID &gt; Class &gt; Element selector</li> </ul> <pre><code>&lt;style&gt;\n  #heading { color: red; }\n  .title { color: blue; }\n  h1 { color: green; }\n&lt;/style&gt;\n\n&lt;h1 id=\"heading\" class=\"title\"&gt;Hello&lt;/h1&gt;\n</code></pre> <p>Output color: Red (<code>#heading</code> wins)</p>"},{"location":"css/01_Basics/#6-box-model","title":"6. Box Model","text":"<p>Every HTML element is a box made of:</p> <pre><code>+-----------------------------+\n|        Margin               |\n|   +---------------------+   |\n|   |     Border          |   |\n|   |  +-------------+    |   |\n|   |  |  Padding    |    |   |\n|   |  | +--------+  |    |   |\n|   |  | | Content|  |    |   |\n|   |  | +--------+  |    |   |\n|   |  +-------------+    |   |\n|   +---------------------+   |\n+-----------------------------+\n</code></pre>"},{"location":"css/02_Selectors/","title":"Selectors","text":"<p>CSS selectors target HTML elements to apply styles. They determine what gets styled.</p>"},{"location":"css/02_Selectors/#1-basic-selectors","title":"1. Basic Selectors","text":""},{"location":"css/02_Selectors/#a-element-selector","title":"a) Element Selector","text":"<p>Targets all elements of a specific type.</p> <pre><code>p {\n  color: black;\n}\n</code></pre>"},{"location":"css/02_Selectors/#b-class-selector","title":"b) Class Selector","text":"<p>Targets elements with a specific <code>class</code>.</p> <pre><code>.title {\n  font-weight: bold;\n}\n</code></pre>"},{"location":"css/02_Selectors/#c-id-selector","title":"c) ID Selector","text":"<p>Targets a unique element with a specific <code>id</code>.</p> <pre><code>#main-heading {\n  font-size: 32px;\n}\n</code></pre>"},{"location":"css/02_Selectors/#2-grouping-selectors","title":"2. Grouping Selectors","text":"<p>Apply the same style to multiple selectors.</p> <pre><code>h1, h2, h3 {\n  font-family: Arial;\n}\n</code></pre>"},{"location":"css/02_Selectors/#3-combinators","title":"3. Combinators","text":""},{"location":"css/02_Selectors/#a-descendant-selector","title":"a) Descendant Selector","text":"<p>Targets elements nested inside another.</p> <pre><code>div p {\n  color: gray;\n}\n</code></pre>"},{"location":"css/02_Selectors/#b-child-selector","title":"b) Child Selector (<code>&gt;</code>)","text":"<p>Targets direct children only.</p> <pre><code>ul &gt; li {\n  list-style: none;\n}\n</code></pre>"},{"location":"css/02_Selectors/#c-adjacent-sibling","title":"c) Adjacent Sibling (<code>+</code>)","text":"<p>Targets the first element immediately after another.</p> <pre><code>h1 + p {\n  margin-top: 0;\n}\n</code></pre>"},{"location":"css/02_Selectors/#d-general-sibling","title":"d) General Sibling (<code>~</code>)","text":"<p>Targets all siblings after the first.</p> <pre><code>h1 ~ p {\n  color: blue;\n}\n</code></pre>"},{"location":"css/02_Selectors/#4-attribute-selectors","title":"4. Attribute Selectors","text":"<p>Target elements based on attributes.</p> <pre><code>input[type=\"text\"] {\n  border: 1px solid #ccc;\n}\n</code></pre>"},{"location":"css/02_Selectors/#5-pseudo-classes","title":"5. Pseudo-classes","text":"<p>Target elements based on state or position.</p> <pre><code>a:hover {\n  text-decoration: underline;\n}\n\nli:first-child {\n  font-weight: bold;\n}\n</code></pre>"},{"location":"css/02_Selectors/#6-pseudo-elements","title":"6. Pseudo-elements","text":"<p>Style parts of elements.</p> <pre><code>p::first-line {\n  font-variant: small-caps;\n}\n</code></pre>"},{"location":"css/03_Fonts/","title":"Fonts","text":"<p>Fonts control the appearance of text \u2014 including typeface, size, weight, spacing, and more.</p>"},{"location":"css/03_Fonts/#1-font-family","title":"1. Font Family","text":"<p>Set the typeface using <code>font-family</code>. Always include a fallback.</p> <pre><code>body {\n  font-family: 'Arial', 'Helvetica', sans-serif;\n}\n</code></pre>"},{"location":"css/03_Fonts/#2-font-size","title":"2. Font Size","text":"<p>Controls the size of the text.</p> <pre><code>p {\n  font-size: 16px;\n}\n</code></pre>"},{"location":"css/03_Fonts/#common-units","title":"Common units:","text":"<ul> <li><code>px</code> \u2014 absolute (pixels)</li> <li><code>em</code> \u2014 relative to parent</li> <li><code>rem</code> \u2014 relative to root (<code>html</code>)</li> <li><code>%</code> \u2014 relative to parent</li> </ul> <pre><code>h1 {\n  font-size: 2em;  /* 2x the parent size */\n}\n</code></pre>"},{"location":"css/03_Fonts/#3-font-weight","title":"3. Font Weight","text":"<p>Controls thickness of text.</p> <pre><code>strong {\n  font-weight: bold; /* or numeric: 100 to 900 */\n}\n</code></pre>"},{"location":"css/03_Fonts/#4-font-style","title":"4. Font Style","text":"<p>Used for italics and oblique styles.</p> <pre><code>em {\n  font-style: italic;\n}\n</code></pre>"},{"location":"css/03_Fonts/#5-font-variant","title":"5. Font Variant","text":"<p>Used for small-caps.</p> <pre><code>p {\n  font-variant: small-caps;\n}\n</code></pre>"},{"location":"css/03_Fonts/#6-line-height","title":"6. Line Height","text":"<p>Controls vertical spacing between lines of text.</p> <pre><code>p {\n  line-height: 1.6;\n}\n</code></pre>"},{"location":"css/03_Fonts/#7-shorthand-property","title":"7. Shorthand Property","text":"<p>Combine multiple font properties.</p> <pre><code>p {\n  font: italic small-caps bold 16px/1.5 'Georgia', serif;\n}\n</code></pre>"},{"location":"css/03_Fonts/#8-web-fonts","title":"8. Web Fonts","text":"<p>Import custom fonts using <code>@font-face</code> or via Google Fonts:</p>"},{"location":"css/03_Fonts/#example-google-fonts","title":"Example (Google Fonts):","text":"<pre><code>&lt;link href=\"https://fonts.googleapis.com/css2?family=Roboto&amp;display=swap\" rel=\"stylesheet\"&gt;\n</code></pre> <pre><code>body {\n  font-family: 'Roboto', sans-serif;\n}\n</code></pre>"},{"location":"css/04_Texts/","title":"Text","text":"<p>CSS provides properties to style and align text content in HTML elements.</p>"},{"location":"css/04_Texts/#1-text-color","title":"1. Text Color","text":"<pre><code>p {\n  color: #333;\n}\n</code></pre>"},{"location":"css/04_Texts/#2-text-alignment","title":"2. Text Alignment","text":"<pre><code>h1 {\n  text-align: center;\n}\n</code></pre> <p>Values:</p> <ul> <li><code>left</code> (default)</li> <li><code>right</code></li> <li><code>center</code></li> <li><code>justify</code></li> </ul>"},{"location":"css/04_Texts/#3-text-decoration","title":"3. Text Decoration","text":"<p>Used for underlines, overlines, strikethroughs.</p> <pre><code>a {\n  text-decoration: none;\n}\n</code></pre> <p>Common values:</p> <ul> <li><code>none</code></li> <li><code>underline</code></li> <li><code>overline</code></li> <li><code>line-through</code></li> </ul>"},{"location":"css/04_Texts/#4-text-transform","title":"4. Text Transform","text":"<p>Controls capitalization.</p> <pre><code>h2 {\n  text-transform: uppercase;\n}\n</code></pre> <p>Options:</p> <ul> <li><code>none</code></li> <li><code>capitalize</code></li> <li><code>uppercase</code></li> <li><code>lowercase</code></li> </ul>"},{"location":"css/04_Texts/#5-letter-spacing","title":"5. Letter Spacing","text":"<p>Space between letters.</p> <pre><code>p {\n  letter-spacing: 1px;\n}\n</code></pre>"},{"location":"css/04_Texts/#6-word-spacing","title":"6. Word Spacing","text":"<p>Space between words.</p> <pre><code>p {\n  word-spacing: 5px;\n}\n</code></pre>"},{"location":"css/04_Texts/#7-line-height","title":"7. Line Height","text":"<p>Controls spacing between lines.</p> <pre><code>p {\n  line-height: 1.5;\n}\n</code></pre>"},{"location":"css/04_Texts/#8-text-shadow","title":"8. Text Shadow","text":"<p>Adds shadow to text.</p> <pre><code>h1 {\n  text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\n}\n</code></pre> <p>Syntax: <code>x-offset y-offset blur-radius color</code></p>"},{"location":"css/05_Colors/","title":"Colors","text":"<p>CSS allows you to style elements with different colors for text, backgrounds, borders, and more.</p>"},{"location":"css/05_Colors/#1-color-properties","title":"1. Color Properties","text":""},{"location":"css/05_Colors/#text-color","title":"Text Color","text":"<pre><code>p {\n  color: red;\n}\n</code></pre>"},{"location":"css/05_Colors/#background-color","title":"Background Color","text":"<pre><code>div {\n  background-color: #f0f0f0;\n}\n</code></pre>"},{"location":"css/05_Colors/#border-color","title":"Border Color","text":"<pre><code>input {\n  border: 1px solid #333;\n}\n</code></pre>"},{"location":"css/05_Colors/#2-color-formats","title":"2. Color Formats","text":""},{"location":"css/05_Colors/#a-named-colors","title":"a) Named Colors","text":"<p>Predefined color names.</p> <pre><code>h1 {\n  color: blue;\n}\n</code></pre>"},{"location":"css/05_Colors/#b-hexadecimal","title":"b) Hexadecimal","text":"<pre><code>p {\n  color: #ff0000; /* red */\n}\n</code></pre>"},{"location":"css/05_Colors/#c-rgb","title":"c) RGB","text":"<pre><code>div {\n  background-color: rgb(255, 255, 255);\n}\n</code></pre>"},{"location":"css/05_Colors/#d-rgba-with-transparency","title":"d) RGBA (with transparency)","text":"<pre><code>div {\n  background-color: rgba(0, 0, 0, 0.5);\n}\n</code></pre>"},{"location":"css/05_Colors/#e-hsl","title":"e) HSL","text":"<p>Hue, Saturation, Lightness.</p> <pre><code>h2 {\n  color: hsl(240, 100%, 50%);\n}\n</code></pre>"},{"location":"css/05_Colors/#f-hsla-with-alpha","title":"f) HSLA (with alpha)","text":"<pre><code>section {\n  background-color: hsla(120, 100%, 50%, 0.3);\n}\n</code></pre>"},{"location":"css/05_Colors/#3-transparent-keyword","title":"3. Transparent Keyword","text":"<pre><code>div {\n  background-color: transparent;\n}\n</code></pre>"},{"location":"css/06_Specificity-and-Cascade/","title":"Specificity &amp; Cascade","text":"<p>When multiple CSS rules target the same element, the cascade and specificity determine which rule wins.</p>"},{"location":"css/06_Specificity-and-Cascade/#1-the-cascade","title":"1. The Cascade","text":"<p>CSS applies rules based on:</p> <ol> <li>Source order (last rule wins if equal specificity)</li> <li>Importance (<code>!important</code>)</li> <li>Specificity</li> <li>Origin (browser default &lt; user styles &lt; author styles)</li> </ol>"},{"location":"css/06_Specificity-and-Cascade/#example","title":"Example:","text":"<pre><code>p {\n  color: blue;\n}\n\np {\n  color: red;\n}\n</code></pre> <p>Result: Red (<code>red</code> overrides <code>blue</code> because it comes later)</p>"},{"location":"css/06_Specificity-and-Cascade/#2-specificity","title":"2. Specificity","text":"<p>Each selector has a specificity value:</p> Selector Type Specificity Value Inline styles 1000 ID selectors 100 Class/attr/pseudo-class 10 Element/pseudo-element 1"},{"location":"css/06_Specificity-and-Cascade/#example_1","title":"Example:","text":"<pre><code>/* Specificity: 1 */\np {\n  color: green;\n}\n\n/* Specificity: 10 */\n.text {\n  color: blue;\n}\n\n/* Specificity: 100 */\n#main {\n  color: red;\n}\n</code></pre> <p>Result: Red wins due to higher specificity.</p>"},{"location":"css/06_Specificity-and-Cascade/#3-important","title":"3. <code>!important</code>","text":"<p>Overrides all specificity rules (except other <code>!important</code> rules with higher specificity).</p> <pre><code>p {\n  color: blue !important;\n}\n</code></pre> <p>Use sparingly \u2013 it's hard to override and often a sign of poor structure.</p>"},{"location":"css/06_Specificity-and-Cascade/#4-specificity-comparison","title":"4. Specificity Comparison","text":"Selector Specificity <code>h1</code> 1 <code>.title</code> 10 <code>#header</code> 100 <code>style=\"...\"</code> 1000 <code>!important</code> \u221e (kind of)"},{"location":"css/07_Sizing-Units/","title":"Sizing Units","text":"<p>CSS sizing units define dimensions like <code>width</code>, <code>height</code>, <code>padding</code>, <code>margin</code>, and <code>font-size</code>. They fall into two main categories: absolute and relative units.</p>"},{"location":"css/07_Sizing-Units/#1-absolute-units","title":"1. Absolute Units","text":"<p>These do not scale with screen size or context \u2014 they remain fixed.</p> Unit Name Description <code>px</code> Pixels Most commonly used; screen-relative <code>pt</code> Points 1pt = 1/72 inch (used in print) <code>cm</code> Centimeters Physical measurement <code>mm</code> Millimeters Physical measurement <code>in</code> Inches 1in = 96px (standard)"},{"location":"css/07_Sizing-Units/#example","title":"Example:","text":"<pre><code>.box {\n  width: 200px;\n  font-size: 12pt;\n}\n</code></pre> <p>Use when: you want precise control (e.g. fixed UI components), but avoid for responsive designs.</p>"},{"location":"css/07_Sizing-Units/#2-relative-units","title":"2. Relative Units","text":"<p>These scale based on parent elements, root, or viewport.</p>"},{"location":"css/07_Sizing-Units/#a-percentage","title":"a) <code>%</code> \u2014 Percentage","text":"<p>Relative to the parent element's size.</p> <pre><code>div {\n  width: 50%; /* 50% of parent */\n}\n</code></pre>"},{"location":"css/07_Sizing-Units/#b-em-relative-to-parent-font-size","title":"b) <code>em</code> \u2014 Relative to Parent Font Size","text":"<p>1 <code>em</code> = font-size of the current element\u2019s parent.</p> <pre><code>/* If parent has 16px font size */\np {\n  font-size: 2em; /* 32px */\n}\n</code></pre> <p>Stacking ems can cause unintended scaling (compound effect).</p>"},{"location":"css/07_Sizing-Units/#c-rem-relative-to-root-element","title":"c) <code>rem</code> \u2014 Relative to Root Element","text":"<p>1 <code>rem</code> = font-size of the <code>html</code> element.</p> <pre><code>html {\n  font-size: 16px;\n}\n\nh1 {\n  font-size: 2rem; /* 32px */\n}\n</code></pre> <p>Preferred over <code>em</code> for consistent, predictable sizing.</p>"},{"location":"css/07_Sizing-Units/#d-vw-vh-vmin-vmax-viewport-units","title":"d) <code>vw</code>, <code>vh</code>, <code>vmin</code>, <code>vmax</code> \u2014 Viewport Units","text":"Unit Description <code>vw</code> 1% of viewport width <code>vh</code> 1% of viewport height <code>vmin</code> 1% of smaller of <code>vw</code> or <code>vh</code> <code>vmax</code> 1% of larger of <code>vw</code> or <code>vh</code> <pre><code>section {\n  width: 100vw;\n  height: 100vh;\n}\n\n.hero-text {\n  font-size: 5vmin;\n}\n</code></pre> <p>Great for full-screen layouts and responsive typography.</p>"},{"location":"css/07_Sizing-Units/#3-calc-dynamic-calculations","title":"3. <code>calc()</code> \u2014 Dynamic Calculations","text":"<p>Combines units for flexible sizing.</p> <pre><code>.container {\n  width: calc(100% - 60px);\n  height: calc(50vh + 100px);\n}\n</code></pre> <p>Useful for subtracting fixed elements like headers or sidebars.</p>"},{"location":"css/07_Sizing-Units/#best-practices","title":"Best Practices","text":"<ul> <li>Use <code>rem</code> for font sizes (scales with user settings).</li> <li>Use <code>px</code> or <code>%</code> for borders, paddings, depending on layout needs.</li> <li>Use <code>vw</code>, <code>vh</code> for responsive layouts.</li> <li>Avoid absolute units like <code>cm</code>, <code>pt</code> in screen designs.</li> </ul>"},{"location":"css/08_Display/","title":"Display Property","text":"<p>The <code>display</code> property defines how an element is rendered in the document flow \u2014 block, inline, grid, flex, etc.</p>"},{"location":"css/08_Display/#1-common-display-values","title":"1. Common Display Values","text":""},{"location":"css/08_Display/#a-block","title":"a) <code>block</code>","text":"<ul> <li>Takes up the full width</li> <li>Starts on a new line</li> </ul> <pre><code>div {\n  display: block;\n}\n</code></pre> <p>Examples: <code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;h1&gt;</code> (default block elements)</p>"},{"location":"css/08_Display/#b-inline","title":"b) <code>inline</code>","text":"<ul> <li>Takes up only as much width as needed</li> <li>Flows inline with text</li> <li>Cannot set width/height</li> </ul> <pre><code>span {\n  display: inline;\n}\n</code></pre> <p>Examples: <code>&lt;span&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;strong&gt;</code> (default inline elements)</p>"},{"location":"css/08_Display/#c-inline-block","title":"c) <code>inline-block</code>","text":"<ul> <li>Behaves like <code>inline</code> (flows with text)</li> <li>Allows width/height to be set</li> </ul> <pre><code>button {\n  display: inline-block;\n  width: 100px;\n  height: 40px;\n}\n</code></pre>"},{"location":"css/08_Display/#d-none","title":"d) <code>none</code>","text":"<ul> <li>Completely hides the element</li> <li>Removes it from layout and DOM flow</li> </ul> <pre><code>p {\n  display: none;\n}\n</code></pre>"},{"location":"css/08_Display/#2-layout-display-values","title":"2. Layout Display Values","text":""},{"location":"css/08_Display/#a-flex","title":"a) <code>flex</code>","text":"<p>Enables flexbox layout for flexible, one-dimensional layouts.</p> <pre><code>.container {\n  display: flex;\n}\n</code></pre> <p>Use with properties like <code>justify-content</code>, <code>align-items</code>, etc.</p>"},{"location":"css/08_Display/#b-grid","title":"b) <code>grid</code>","text":"<p>Enables CSS grid layout \u2014 two-dimensional control.</p> <pre><code>.container {\n  display: grid;\n}\n</code></pre> <p>Use with <code>grid-template-columns</code>, <code>grid-gap</code>, etc.</p>"},{"location":"css/08_Display/#c-inline-flex-inline-grid","title":"c) <code>inline-flex</code> / <code>inline-grid</code>","text":"<p>Same as <code>flex</code>/<code>grid</code>, but behaves like <code>inline</code>.</p> <pre><code>span {\n  display: inline-flex;\n}\n</code></pre>"},{"location":"css/08_Display/#3-other-values","title":"3. Other Values","text":""},{"location":"css/08_Display/#table-table-row-table-cell-etc","title":"<code>table</code>, <code>table-row</code>, <code>table-cell</code>, etc.","text":"<p>Mimic HTML table behaviors.</p> <pre><code>div {\n  display: table;\n}\n</code></pre>"},{"location":"css/08_Display/#4-default-values-by-tag","title":"4. Default Values by Tag","text":"Tag Default <code>display</code> <code>&lt;div&gt;</code> <code>block</code> <code>&lt;span&gt;</code> <code>inline</code> <code>&lt;img&gt;</code> <code>inline-block</code> <code>&lt;table&gt;</code> <code>table</code>"},{"location":"css/08_Display/#5-visual-summary","title":"5. Visual Summary","text":"Display New Line Width/Height Allowed Layout Control <code>block</code> \u2705 \u2705 \u274c <code>inline</code> \u274c \u274c \u274c <code>inline-block</code> \u274c \u2705 \u274c <code>flex</code> \u2705 \u2705 \u2705 (1D) <code>grid</code> \u2705 \u2705 \u2705 (2D)"},{"location":"css/09_Overflow/","title":"Overflow","text":"<p>The <code>overflow</code> property controls what happens when content exceeds the size of its container.</p>"},{"location":"css/09_Overflow/#1-values","title":"1. Values","text":""},{"location":"css/09_Overflow/#a-visible-default","title":"a) <code>visible</code> (default)","text":"<p>Content spills out of the box \u2014 no clipping.</p> <pre><code>.box {\n  overflow: visible;\n}\n</code></pre>"},{"location":"css/09_Overflow/#b-hidden","title":"b) <code>hidden</code>","text":"<p>Extra content is cut off and not visible.</p> <pre><code>.box {\n  overflow: hidden;\n}\n</code></pre> <p>Used when you want a clean container without scroll.</p>"},{"location":"css/09_Overflow/#c-scroll","title":"c) <code>scroll</code>","text":"<p>Adds scrollbars (always visible), regardless of need.</p> <pre><code>.box {\n  overflow: scroll;\n}\n</code></pre> <p>Bad UX if scrolling isn\u2019t needed \u2014 use <code>auto</code> instead.</p>"},{"location":"css/09_Overflow/#d-auto","title":"d) <code>auto</code>","text":"<p>Adds scrollbars only if needed.</p> <pre><code>.box {\n  overflow: auto;\n}\n</code></pre> <p>Best for responsive and accessible designs.</p>"},{"location":"css/09_Overflow/#2-overflow-axes","title":"2. Overflow Axes","text":"<p>You can control each axis individually:</p> <pre><code>.box {\n  overflow-x: auto;\n  overflow-y: hidden;\n}\n</code></pre>"},{"location":"css/09_Overflow/#3-use-cases","title":"3. Use Cases","text":""},{"location":"css/09_Overflow/#example-1-truncate-text","title":"Example 1: Truncate Text","text":"<pre><code>.truncate {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n</code></pre>"},{"location":"css/09_Overflow/#example-2-scrollable-container","title":"Example 2: Scrollable Container","text":"<pre><code>.scroll-area {\n  height: 200px;\n  overflow-y: auto;\n}\n</code></pre>"},{"location":"css/09_Overflow/#4-notes","title":"4. Notes","text":"<ul> <li>Overflow only works on block-level or positioned elements with a defined size (<code>height</code> or <code>width</code>).</li> <li>For inline elements, overflow has no effect unless converted with <code>display: block</code> or similar.</li> </ul>"},{"location":"css/10_Position/","title":"Position","text":"<p>The <code>position</code> property defines how an element is placed in the document \u2014 static, relative, absolute, fixed, or sticky.</p>"},{"location":"css/10_Position/#1-static-default","title":"1. <code>static</code> (default)","text":"<ul> <li>Normal document flow</li> <li><code>top</code>, <code>left</code>, <code>right</code>, <code>bottom</code> have no effect</li> </ul> <pre><code>div {\n  position: static;\n}\n</code></pre>"},{"location":"css/10_Position/#2-relative","title":"2. <code>relative</code>","text":"<ul> <li>Positioned relative to its normal position</li> <li>Leaves original space in the flow</li> </ul> <pre><code>.box {\n  position: relative;\n  top: 10px;\n  left: 20px;\n}\n</code></pre> <p>Used to nudge elements or create a reference for absolutely positioned children.</p>"},{"location":"css/10_Position/#3-absolute","title":"3. <code>absolute</code>","text":"<ul> <li>Removed from document flow</li> <li>Positioned relative to the nearest positioned ancestor</li> <li>If none, it uses the <code>html</code> (viewport)</li> </ul> <pre><code>.child {\n  position: absolute;\n  top: 0;\n  right: 0;\n}\n</code></pre> <p>Requires parent to be <code>relative</code>, <code>absolute</code>, or <code>fixed</code> if you want local positioning.</p>"},{"location":"css/10_Position/#4-fixed","title":"4. <code>fixed</code>","text":"<ul> <li>Removed from flow</li> <li>Positioned relative to the viewport</li> <li>Stays in place when scrolling</li> </ul> <pre><code>.header {\n  position: fixed;\n  top: 0;\n  width: 100%;\n}\n</code></pre> <p>Used for navbars, back-to-top buttons, etc.</p>"},{"location":"css/10_Position/#5-sticky","title":"5. <code>sticky</code>","text":"<ul> <li>Acts like <code>relative</code> until a threshold is reached, then becomes <code>fixed</code></li> <li>Requires a top/left/right/bottom value</li> </ul> <pre><code>.menu {\n  position: sticky;\n  top: 0;\n}\n</code></pre> <p>Parent must have height for sticky to work properly.</p>"},{"location":"css/10_Position/#6-z-index","title":"6. Z-Index","text":"<p>Use <code>z-index</code> to control stacking order (higher = on top).</p> <pre><code>.box {\n  position: absolute;\n  z-index: 10;\n}\n</code></pre> <p>Only works on positioned elements (not <code>static</code>).</p>"},{"location":"css/10_Position/#summary-table","title":"Summary Table","text":"Position In Flow Offset Allowed Scrolls with Page Reference Point <code>static</code> \u2705 \u274c \u2705 Normal document flow <code>relative</code> \u2705 \u2705 \u2705 Own original position <code>absolute</code> \u274c \u2705 \u274c Nearest positioned ancestor <code>fixed</code> \u274c \u2705 \u274c Viewport <code>sticky</code> \u2705/\u274c \u2705 \u2705/\u274c Toggles: self \u2192 viewport"},{"location":"css/11_Variables/","title":"Variables","text":"<p>CSS Variables (also called custom properties) allow you to store values in reusable, scoped variables using the <code>--</code> syntax.</p>"},{"location":"css/11_Variables/#1-declaring-a-variable","title":"1. Declaring a Variable","text":"<p>Defined inside a selector (commonly <code>:root</code> for global scope):</p> <pre><code>:root {\n  --main-color: #3498db;\n  --padding-base: 1rem;\n}\n</code></pre>"},{"location":"css/11_Variables/#2-using-a-variable","title":"2. Using a Variable","text":"<p>Use the <code>var()</code> function:</p> <pre><code>button {\n  background-color: var(--main-color);\n  padding: var(--padding-base);\n}\n</code></pre>"},{"location":"css/11_Variables/#3-fallback-value","title":"3. Fallback Value","text":"<p>Use a default if the variable is undefined:</p> <pre><code>p {\n  color: var(--text-color, black);\n}\n</code></pre>"},{"location":"css/11_Variables/#4-scope","title":"4. Scope","text":"<p>Variables are scoped to the selector they are declared in:</p> <pre><code>.container {\n  --local-color: red;\n}\n\n.child {\n  color: var(--local-color); /* works only if .child is inside .container */\n}\n</code></pre>"},{"location":"css/11_Variables/#5-dynamic-theming","title":"5. Dynamic Theming","text":"<p>CSS variables can be updated dynamically (e.g. in dark mode):</p> <pre><code>:root {\n  --bg-color: white;\n  --text-color: black;\n}\n\n.dark-mode {\n  --bg-color: #121212;\n  --text-color: #f0f0f0;\n}\n\nbody {\n  background: var(--bg-color);\n  color: var(--text-color);\n}\n</code></pre>"},{"location":"css/11_Variables/#6-inside-media-queries","title":"6. Inside Media Queries","text":"<p>Variables can be redefined based on screen size:</p> <pre><code>:root {\n  --font-size: 16px;\n}\n\n@media (min-width: 768px) {\n  :root {\n    --font-size: 18px;\n  }\n}\n\nbody {\n  font-size: var(--font-size);\n}\n</code></pre>"},{"location":"css/11_Variables/#7-invalid-use-cases","title":"7. Invalid Use Cases","text":"<p>CSS variables do not work in:</p> <ul> <li>Media query expressions</li> <li>Selectors</li> <li>Keyframe names</li> <li><code>@import</code> paths</li> </ul> <pre><code>/* \u274c INVALID */\n@media (min-width: var(--breakpoint)) { ... }\n</code></pre>"},{"location":"css/12_Media-Queries/","title":"Media Queries","text":"<p>Media queries let you apply CSS based on screen/device properties, enabling responsive design.</p>"},{"location":"css/12_Media-Queries/#1-basic-syntax","title":"1. Basic Syntax","text":"<pre><code>@media media-type and (condition) {\n  /* CSS rules */\n}\n</code></pre> <p>Example:</p> <pre><code>@media screen and (max-width: 768px) {\n  body {\n    font-size: 14px;\n  }\n}\n</code></pre>"},{"location":"css/12_Media-Queries/#2-media-types","title":"2. Media Types","text":"Type Description <code>all</code> Default, applies to all devices <code>screen</code> Computer screens, tablets, etc. <code>print</code> Print previews and printers <code>speech</code> Screen readers"},{"location":"css/12_Media-Queries/#3-common-features-conditions","title":"3. Common Features (Conditions)","text":"Feature Example Description <code>max-width</code> <code>max-width: 600px</code> Target screens \u2264 600px <code>min-width</code> <code>min-width: 1024px</code> Target screens \u2265 1024px <code>max-height</code> <code>max-height: 500px</code> Target short screens <code>orientation</code> <code>orientation: portrait</code> Portrait vs. landscape <code>prefers-color-scheme</code> <code>dark</code>/<code>light</code> Light/dark mode detection"},{"location":"css/12_Media-Queries/#4-responsive-breakpoints-example","title":"4. Responsive Breakpoints (Example)","text":"<pre><code>/* Mobile first */\nbody {\n  font-size: 14px;\n}\n\n@media (min-width: 600px) {\n  body {\n    font-size: 16px;\n  }\n}\n\n@media (min-width: 1024px) {\n  body {\n    font-size: 18px;\n  }\n}\n</code></pre>"},{"location":"css/12_Media-Queries/#5-multiple-conditions","title":"5. Multiple Conditions","text":"<pre><code>@media (min-width: 600px) and (max-width: 1024px) {\n  .box {\n    background: yellow;\n  }\n}\n</code></pre> <p>Use <code>,</code> for OR conditions:</p> <pre><code>@media (max-width: 500px), (min-width: 1200px) {\n  .header {\n    display: none;\n  }\n}\n</code></pre>"},{"location":"css/12_Media-Queries/#6-dark-mode-example","title":"6. Dark Mode Example","text":"<pre><code>@media (prefers-color-scheme: dark) {\n  body {\n    background: #121212;\n    color: #f0f0f0;\n  }\n}\n</code></pre>"},{"location":"css/12_Media-Queries/#7-print-styles","title":"7. Print Styles","text":"<pre><code>@media print {\n  nav, footer {\n    display: none;\n  }\n\n  body {\n    font-size: 12pt;\n  }\n}\n</code></pre>"},{"location":"css/13_Float-and-clear/","title":"Float and Clear","text":"<p>The <code>float</code> property allows elements to be taken out of normal flow and positioned to the left or right, with text/content flowing around them. <code>clear</code> is used to prevent wrapping around floated elements.</p>"},{"location":"css/13_Float-and-clear/#1-float-property","title":"1. <code>float</code> Property","text":"Value Description <code>left</code> Floats the element to the left <code>right</code> Floats the element to the right <code>none</code> Default, no float"},{"location":"css/13_Float-and-clear/#example","title":"Example:","text":"<pre><code>img {\n  float: left;\n  margin-right: 10px;\n}\n</code></pre> <p>Result: The image floats to the left, and the text wraps around it on the right.</p>"},{"location":"css/13_Float-and-clear/#2-effects-of-float","title":"2. Effects of Float","text":"<ul> <li>Floated elements are removed from normal flow</li> <li>Parent containers may collapse if all children are floated</li> </ul>"},{"location":"css/13_Float-and-clear/#3-clear-property","title":"3. <code>clear</code> Property","text":"<p>Prevents elements from wrapping around floated siblings.</p> Value Description <code>left</code> Clears floats on the left side <code>right</code> Clears floats on the right side <code>both</code> Clears both sides <code>none</code> Default"},{"location":"css/13_Float-and-clear/#example_1","title":"Example:","text":"<pre><code>.clearfix {\n  clear: both;\n}\n</code></pre> <p>Used to push content below floated elements.</p>"},{"location":"css/13_Float-and-clear/#4-clearing-floats-fixing-collapsing-parent","title":"4. Clearing Floats (Fixing Collapsing Parent)","text":"<p>Floats can cause a container to collapse if it has no non-floated children.</p>"},{"location":"css/13_Float-and-clear/#a-using-clearfix","title":"a) Using Clearfix","text":"<pre><code>.clearfix::after {\n  content: \"\";\n  display: table;\n  clear: both;\n}\n</code></pre> <p>Apply <code>.clearfix</code> to the parent container.</p>"},{"location":"css/13_Float-and-clear/#5-float-vs-flexgrid","title":"5. Float vs Flex/Grid","text":"<p>Use float only for small layouts (e.g., image wrap).</p> <p>Avoid it for full layouts \u2014 prefer <code>flex</code> or <code>grid</code> for proper alignment, responsiveness, and readability.</p>"},{"location":"css/14_Flexbox/","title":"Flexbox","text":"<p>Flexbox (Flexible Box Layout) is a 1-dimensional layout system that makes it easy to align, distribute, and order space among items in a container \u2014 either horizontally or vertically.</p>"},{"location":"css/14_Flexbox/#1-enabling-flex","title":"1. Enabling Flex","text":"<pre><code>.container {\n  display: flex;\n}\n</code></pre> <p>This makes all direct children flex items.</p>"},{"location":"css/14_Flexbox/#2-main-vs-cross-axis","title":"2. Main vs Cross Axis","text":"<ul> <li>Main Axis: Defined by <code>flex-direction</code></li> <li>Cross Axis: Perpendicular to the main axis</li> </ul> <code>flex-direction</code> value Main Axis Cross Axis <code>row</code> (default) horizontal vertical <code>column</code> vertical horizontal"},{"location":"css/14_Flexbox/#3-flex-direction","title":"3. <code>flex-direction</code>","text":"<pre><code>.container {\n  flex-direction: row | row-reverse | column | column-reverse;\n}\n</code></pre>"},{"location":"css/14_Flexbox/#4-justify-content-main-axis","title":"4. <code>justify-content</code> (Main Axis)","text":"<p>Aligns items along the main axis.</p> <pre><code>.container {\n  justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly;\n}\n</code></pre>"},{"location":"css/14_Flexbox/#5-align-items-cross-axis","title":"5. <code>align-items</code> (Cross Axis)","text":"<p>Aligns items along the cross axis.</p> <pre><code>.container {\n  align-items: flex-start | flex-end | center | stretch | baseline;\n}\n</code></pre>"},{"location":"css/14_Flexbox/#6-align-content-cross-axis-multiple-rows","title":"6. <code>align-content</code> (Cross Axis, multiple rows)","text":"<p>Used when there are multiple lines (wrapping).</p> <pre><code>.container {\n  align-content: flex-start | center | space-between;\n}\n</code></pre>"},{"location":"css/14_Flexbox/#7-flex-wrap","title":"7. <code>flex-wrap</code>","text":"<p>Controls whether items wrap to the next line.</p> <pre><code>.container {\n  flex-wrap: nowrap | wrap | wrap-reverse;\n}\n</code></pre>"},{"location":"css/14_Flexbox/#8-shorthand-flex-flow","title":"8. Shorthand: <code>flex-flow</code>","text":"<p>Combines <code>flex-direction</code> + <code>flex-wrap</code></p> <pre><code>.container {\n  flex-flow: row wrap;\n}\n</code></pre>"},{"location":"css/14_Flexbox/#9-flex-item-properties","title":"9. Flex Item Properties","text":""},{"location":"css/14_Flexbox/#a-order","title":"a) <code>order</code>","text":"<p>Controls item visual order.</p> <pre><code>.item {\n  order: 2; /* Default is 0 */\n}\n</code></pre>"},{"location":"css/14_Flexbox/#b-flex-grow","title":"b) <code>flex-grow</code>","text":"<p>Defines how much the item expands relative to others.</p> <pre><code>.item {\n  flex-grow: 1;\n}\n</code></pre>"},{"location":"css/14_Flexbox/#c-flex-shrink","title":"c) <code>flex-shrink</code>","text":"<p>Defines how much the item shrinks.</p> <pre><code>.item {\n  flex-shrink: 0;\n}\n</code></pre>"},{"location":"css/14_Flexbox/#d-flex-basis","title":"d) <code>flex-basis</code>","text":"<p>Sets the initial size before growing/shrinking.</p> <pre><code>.item {\n  flex-basis: 200px;\n}\n</code></pre>"},{"location":"css/14_Flexbox/#e-shorthand-flex","title":"e) Shorthand: <code>flex</code>","text":"<pre><code>.item {\n  flex: 1 1 200px; /* grow shrink basis */\n}\n</code></pre>"},{"location":"css/14_Flexbox/#10-align-self","title":"10. <code>align-self</code>","text":"<p>Overrides <code>align-items</code> for a single item.</p> <pre><code>.item {\n  align-self: center;\n}\n</code></pre>"},{"location":"css/14_Flexbox/#example-layout","title":"Example Layout","text":"<pre><code>.container {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n</code></pre> <pre><code>&lt;div class=\"container\"&gt;\n  &lt;div&gt;Item 1&lt;/div&gt;\n  &lt;div&gt;Item 2&lt;/div&gt;\n  &lt;div&gt;Item 3&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"css/15_Grid/","title":"Grid","text":"<p>Grid is a 2-dimensional layout system for arranging items in rows and columns.</p>"},{"location":"css/15_Grid/#1-enabling-grid","title":"1. Enabling Grid","text":"<pre><code>.container {\n  display: grid;\n}\n</code></pre> <p>All direct children become grid items.</p>"},{"location":"css/15_Grid/#2-defining-columns-and-rows","title":"2. Defining Columns and Rows","text":"<pre><code>.container {\n  grid-template-columns: 200px 1fr 2fr;\n  grid-template-rows: 100px auto;\n}\n</code></pre> <ul> <li><code>px</code> = fixed size</li> <li><code>fr</code> = fraction of remaining space</li> <li><code>auto</code> = size based on content</li> </ul>"},{"location":"css/15_Grid/#3-repeat-notation","title":"3. Repeat Notation","text":"<pre><code>grid-template-columns: repeat(3, 1fr);\n</code></pre> <p>Same as: <code>1fr 1fr 1fr</code></p>"},{"location":"css/15_Grid/#4-gap-between-items","title":"4. Gap Between Items","text":"<pre><code>.container {\n  gap: 20px; /* row + column gap */\n}\n</code></pre> <p>Split version:</p> <pre><code>row-gap: 10px;\ncolumn-gap: 15px;\n</code></pre>"},{"location":"css/15_Grid/#5-placing-items","title":"5. Placing Items","text":"<pre><code>.item {\n  grid-column: 1 / 3; /* spans columns 1 and 2 */\n  grid-row: 2 / 4;\n}\n</code></pre> <p>Or shorthand:</p> <pre><code>grid-area: row-start / column-start / row-end / column-end;\n</code></pre>"},{"location":"css/15_Grid/#6-named-areas","title":"6. Named Areas","text":"<pre><code>.container {\n  grid-template-areas:\n    \"header header\"\n    \"sidebar main\"\n    \"footer footer\";\n}\n\n.header {\n  grid-area: header;\n}\n</code></pre>"},{"location":"css/15_Grid/#7-implicit-tracks","title":"7. Implicit Tracks","text":"<p>Grid auto-generates rows/columns if needed.</p> <pre><code>.container {\n  grid-auto-rows: 100px;\n}\n</code></pre>"},{"location":"css/15_Grid/#8-auto-placement","title":"8. Auto-Placement","text":"<p>Items are placed in the next available cell by default.</p> <pre><code>.container {\n  grid-auto-flow: row | column | dense;\n}\n</code></pre>"},{"location":"css/15_Grid/#9-responsive-grid","title":"9. Responsive Grid","text":"<pre><code>.container {\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n}\n</code></pre> <p>This makes columns responsive and wrap when space is tight.</p>"},{"location":"css/15_Grid/#10-aligning-content","title":"10. Aligning Content","text":"<ul> <li>Align grid items:</li> </ul> <pre><code>justify-items: start | center | end | stretch;\nalign-items: start | center | end | stretch;\n</code></pre> <ul> <li>Align the grid as a whole:</li> </ul> <pre><code>justify-content: center | space-between | space-around;\nalign-content: center;\n</code></pre>"},{"location":"css/16_Transforms/","title":"Transforms","text":"<p>The <code>transform</code> property lets you apply 2D and 3D transformations to elements \u2014 such as rotating, scaling, moving, or skewing.</p>"},{"location":"css/16_Transforms/#1-translatex-y","title":"1. <code>translate(x, y)</code>","text":"<p>Moves an element from its current position.</p> <pre><code>.box {\n  transform: translate(50px, 20px);\n}\n</code></pre> <ul> <li><code>x</code> = horizontal shift</li> <li><code>y</code> = vertical shift</li> </ul>"},{"location":"css/16_Transforms/#2-scalex-y","title":"2. <code>scale(x, y)</code>","text":"<p>Resizes the element.</p> <pre><code>.box {\n  transform: scale(1.5); /* 1.5x both axes */\n}\n</code></pre> <pre><code>transform: scale(1.2, 0.8); /* x = 120%, y = 80% */\n</code></pre>"},{"location":"css/16_Transforms/#3-rotateangle","title":"3. <code>rotate(angle)</code>","text":"<p>Rotates the element around its center.</p> <pre><code>.box {\n  transform: rotate(45deg);\n}\n</code></pre> <p>Use negative angles for counter-clockwise rotation.</p>"},{"location":"css/16_Transforms/#4-skewx-y","title":"4. <code>skew(x, y)</code>","text":"<p>Skews (slants) the element.</p> <pre><code>.box {\n  transform: skew(20deg, 10deg);\n}\n</code></pre>"},{"location":"css/16_Transforms/#5-combine-multiple-transforms","title":"5. Combine Multiple Transforms","text":"<pre><code>.box {\n  transform: translateX(50px) rotate(15deg) scale(1.2);\n}\n</code></pre> <p>They are applied in order, left to right.</p>"},{"location":"css/16_Transforms/#6-transform-origin","title":"6. <code>transform-origin</code>","text":"<p>Sets the point of transformation.</p> <pre><code>.box {\n  transform: rotate(45deg);\n  transform-origin: top left;\n}\n</code></pre> <p>Default is <code>center center</code>.</p>"},{"location":"css/16_Transforms/#7-3d-transforms-basic","title":"7. 3D Transforms (Basic)","text":"<p>Enable 3D perspective with:</p> <pre><code>.container {\n  perspective: 1000px;\n}\n\n.box {\n  transform: rotateY(45deg);\n}\n</code></pre>"},{"location":"css/16_Transforms/#8-performance-note","title":"8. Performance Note","text":"<p>Transforms are GPU-accelerated and more performant than changing <code>top</code>, <code>left</code>, etc. Use them for animations/movement.</p>"},{"location":"css/17_Transitions/","title":"Transitions","text":"<p>CSS transitions let you smoothly animate changes in CSS property values over time.</p>"},{"location":"css/17_Transitions/#1-basic-syntax","title":"1. Basic Syntax","text":"<pre><code>.element {\n  transition: property duration timing-function delay;\n}\n</code></pre> <p>Example:</p> <pre><code>.button {\n  background-color: blue;\n  transition: background-color 0.3s ease-in-out;\n}\n\n.button:hover {\n  background-color: red;\n}\n</code></pre> <p>When <code>:hover</code> is triggered, the background smoothly changes from blue to red.</p>"},{"location":"css/17_Transitions/#2-shorthand-breakdown","title":"2. Shorthand Breakdown","text":"<pre><code>transition: all 0.5s ease 0.1s;\n</code></pre> <ul> <li><code>property</code> \u2014 what to animate (<code>color</code>, <code>all</code>, etc.)</li> <li><code>duration</code> \u2014 how long the transition lasts (<code>s</code> or <code>ms</code>)</li> <li><code>timing-function</code> \u2014 how the animation accelerates</li> <li><code>delay</code> \u2014 time before transition starts</li> </ul>"},{"location":"css/17_Transitions/#3-timing-functions","title":"3. Timing Functions","text":"Value Description <code>linear</code> Constant speed <code>ease</code> Slow \u2192 fast \u2192 slow <code>ease-in</code> Slow start <code>ease-out</code> Slow end <code>ease-in-out</code> Slow start and end <code>cubic-bezier(...)</code> Custom easing curve"},{"location":"css/17_Transitions/#4-multiple-properties","title":"4. Multiple Properties","text":"<pre><code>.box {\n  transition: width 0.3s ease, background-color 0.3s linear;\n}\n</code></pre> <p>Each property can have its own config.</p>"},{"location":"css/17_Transitions/#5-transitionable-properties","title":"5. Transitionable Properties","text":"<p>Only animatable properties can be transitioned:</p> <p>\u2705 Examples:</p> <ul> <li><code>color</code></li> <li><code>background-color</code></li> <li><code>width</code>, <code>height</code></li> <li><code>transform</code></li> <li><code>opacity</code></li> <li><code>margin</code>, <code>padding</code></li> </ul> <p>\u274c Not animatable:</p> <ul> <li><code>display</code></li> <li><code>position</code></li> <li><code>visibility</code> (though can be paired with <code>opacity</code>)</li> </ul>"},{"location":"css/17_Transitions/#6-tips","title":"6. Tips","text":"<ul> <li>Use <code>transition: all</code> with caution \u2014 it's less performant and harder to debug.</li> <li>Transitions only work when there's a change in property value (e.g. via <code>:hover</code>, <code>.active</code>, JS toggle).</li> </ul>"},{"location":"css/17_Transitions/#7-example-button-hover","title":"7. Example: Button Hover","text":"<pre><code>.button {\n  background-color: #333;\n  color: white;\n  transition: background-color 0.3s ease, transform 0.2s;\n}\n\n.button:hover {\n  background-color: #555;\n  transform: scale(1.05);\n}\n</code></pre>"},{"location":"css/18_Animations/","title":"Animations","text":"<p>CSS animations let you create complex, keyframe-based transitions between styles over time \u2014 without JavaScript.</p>"},{"location":"css/18_Animations/#1-basic-structure","title":"1. Basic Structure","text":"<pre><code>.element {\n  animation: name duration timing-function delay iteration-count direction fill-mode;\n}\n</code></pre> <p>Only <code>animation-name</code> and <code>animation-duration</code> are required.</p>"},{"location":"css/18_Animations/#2-example","title":"2. Example","text":"<pre><code>@keyframes slideIn {\n  from {\n    transform: translateX(-100%);\n  }\n  to {\n    transform: translateX(0);\n  }\n}\n\n.box {\n  animation: slideIn 0.5s ease-out;\n}\n</code></pre>"},{"location":"css/18_Animations/#3-key-properties","title":"3. Key Properties","text":""},{"location":"css/18_Animations/#a-animation-name","title":"a) <code>animation-name</code>","text":"<p>The name of the <code>@keyframes</code>.</p> <pre><code>animation-name: fadeIn;\n</code></pre>"},{"location":"css/18_Animations/#b-animation-duration","title":"b) <code>animation-duration</code>","text":"<p>How long the animation takes.</p> <pre><code>animation-duration: 1s;\n</code></pre>"},{"location":"css/18_Animations/#c-animation-timing-function","title":"c) <code>animation-timing-function</code>","text":"<p>Controls animation pacing.</p> <pre><code>animation-timing-function: ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier();\n</code></pre>"},{"location":"css/18_Animations/#d-animation-delay","title":"d) <code>animation-delay</code>","text":"<p>Wait time before animation starts.</p> <pre><code>animation-delay: 0.5s;\n</code></pre>"},{"location":"css/18_Animations/#e-animation-iteration-count","title":"e) <code>animation-iteration-count</code>","text":"<p>Number of repeats.</p> <pre><code>animation-iteration-count: 3;   /* 3 times */\nanimation-iteration-count: infinite;\n</code></pre>"},{"location":"css/18_Animations/#f-animation-direction","title":"f) <code>animation-direction</code>","text":"<p>Direction of each cycle.</p> <pre><code>normal | reverse | alternate | alternate-reverse;\n</code></pre>"},{"location":"css/18_Animations/#g-animation-fill-mode","title":"g) <code>animation-fill-mode</code>","text":"<p>Defines how styles apply before/after animation.</p> <pre><code>none | forwards | backwards | both;\n</code></pre> <p>Example:</p> <pre><code>animation-fill-mode: forwards;\n</code></pre> <p>Keeps final keyframe styles after animation ends.</p>"},{"location":"css/18_Animations/#4-shorthand","title":"4. Shorthand","text":"<pre><code>animation: fadeIn 1s ease-in 0.2s 1 normal forwards;\n</code></pre>"},{"location":"css/18_Animations/#5-pausingcontrolling","title":"5. Pausing/Controlling","text":"<pre><code>.element {\n  animation-play-state: paused | running;\n}\n</code></pre>"},{"location":"css/18_Animations/#6-multiple-animations","title":"6. Multiple Animations","text":"<pre><code>animation: move 1s ease, fade 2s linear;\n</code></pre>"},{"location":"css/18_Animations/#7-example-bounce","title":"7. Example: Bounce","text":"<pre><code>@keyframes bounce {\n  0%, 100% {\n    transform: translateY(0);\n  }\n  50% {\n    transform: translateY(-20px);\n  }\n}\n\n.ball {\n  animation: bounce 0.6s infinite;\n}\n</code></pre>"},{"location":"css/19_Object-fit-and-Object-Cover/","title":"<code>object-fit</code> and <code>object-position</code>","text":"<p>The <code>object-fit</code> property defines how content like images or videos are resized to fit their container.</p>"},{"location":"css/19_Object-fit-and-Object-Cover/#1-object-fit","title":"1. <code>object-fit</code>","text":""},{"location":"css/19_Object-fit-and-Object-Cover/#syntax","title":"Syntax:","text":"<pre><code>img {\n  object-fit: value;\n}\n</code></pre>"},{"location":"css/19_Object-fit-and-Object-Cover/#values","title":"Values:","text":"Value Description <code>fill</code> Default. Stretches to fill container \u2014 may distort aspect ratio. <code>contain</code> Fits inside container without cropping \u2014 maintains aspect ratio. <code>cover</code> Fills entire container \u2014 may crop, maintains aspect ratio. <code>none</code> Image keeps original size \u2014 no resize. <code>scale-down</code> Chooses the smaller result of <code>none</code> or <code>contain</code>."},{"location":"css/19_Object-fit-and-Object-Cover/#example","title":"Example:","text":"<pre><code>img {\n  width: 300px;\n  height: 200px;\n  object-fit: cover;\n}\n</code></pre> <p>Result: The image fills the 300\u00d7200 box, cropped if necessary.</p>"},{"location":"css/19_Object-fit-and-Object-Cover/#2-object-position","title":"2. <code>object-position</code>","text":"<p>Controls alignment of the image inside its box when <code>object-fit</code> \u2260 <code>fill</code>.</p>"},{"location":"css/19_Object-fit-and-Object-Cover/#syntax_1","title":"Syntax:","text":"<pre><code>img {\n  object-position: center top;\n}\n</code></pre>"},{"location":"css/19_Object-fit-and-Object-Cover/#common-values","title":"Common values:","text":"<ul> <li><code>center</code>, <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code></li> <li>You can also use <code>px</code>, <code>%</code></li> </ul>"},{"location":"css/19_Object-fit-and-Object-Cover/#example_1","title":"Example:","text":"<pre><code>img {\n  object-fit: cover;\n  object-position: top;\n}\n</code></pre> <p>Result: Image fills the container, cropping from the bottom if needed.</p>"},{"location":"css/19_Object-fit-and-Object-Cover/#3-practical-use-case-responsive-image-crop","title":"3. Practical Use Case: Responsive Image Crop","text":"<pre><code>img {\n  width: 100%;\n  height: 300px;\n  object-fit: cover;\n  object-position: center;\n}\n</code></pre> <ul> <li>Maintains aspect ratio</li> <li>Crops the excess</li> <li>Ensures consistent layout</li> </ul>"},{"location":"css/20_Filters/","title":"Filters","text":"<p>The <code>filter</code> property applies visual effects (like blur, brightness, contrast, etc.) to elements \u2014 especially images and backgrounds.</p>"},{"location":"css/20_Filters/#1-syntax","title":"1. Syntax","text":"<pre><code>.element {\n  filter: filter-function(value);\n}\n</code></pre> <p>Multiple filters can be chained:</p> <pre><code>filter: brightness(1.2) contrast(90%) saturate(150%);\n</code></pre>"},{"location":"css/20_Filters/#2-common-filter-functions","title":"2. Common Filter Functions","text":""},{"location":"css/20_Filters/#a-blurpx","title":"a) <code>blur(px)</code>","text":"<p>Applies Gaussian blur.</p> <pre><code>filter: blur(5px);\n</code></pre>"},{"location":"css/20_Filters/#b-brightness","title":"b) <code>brightness(%)</code>","text":"<p>Controls light intensity.</p> <pre><code>filter: brightness(150%); /* brighter */\nfilter: brightness(50%);  /* darker */\n</code></pre>"},{"location":"css/20_Filters/#c-contrast","title":"c) <code>contrast(%)</code>","text":"<p>Adjusts contrast.</p> <pre><code>filter: contrast(200%);\n</code></pre>"},{"location":"css/20_Filters/#d-grayscale","title":"d) <code>grayscale(%)</code>","text":"<p>Converts to grayscale.</p> <pre><code>filter: grayscale(100%);\n</code></pre>"},{"location":"css/20_Filters/#e-sepia","title":"e) <code>sepia(%)</code>","text":"<p>Applies a warm, brown tone.</p> <pre><code>filter: sepia(100%);\n</code></pre>"},{"location":"css/20_Filters/#f-saturate","title":"f) <code>saturate(%)</code>","text":"<p>Controls color intensity.</p> <pre><code>filter: saturate(200%);\n</code></pre>"},{"location":"css/20_Filters/#g-hue-rotatedeg","title":"g) <code>hue-rotate(deg)</code>","text":"<p>Shifts hue (color spectrum rotation).</p> <pre><code>filter: hue-rotate(90deg);\n</code></pre>"},{"location":"css/20_Filters/#h-invert","title":"h) <code>invert(%)</code>","text":"<p>Inverts colors.</p> <pre><code>filter: invert(100%);\n</code></pre>"},{"location":"css/20_Filters/#i-opacity","title":"i) <code>opacity(%)</code>","text":"<p>Sets element transparency.</p> <pre><code>filter: opacity(70%);\n</code></pre>"},{"location":"css/20_Filters/#3-example-hover-filter","title":"3. Example: Hover Filter","text":"<pre><code>img {\n  filter: grayscale(100%);\n  transition: filter 0.3s;\n}\n\nimg:hover {\n  filter: grayscale(0%);\n}\n</code></pre>"},{"location":"css/20_Filters/#4-notes","title":"4. Notes","text":"<ul> <li>Filters affect rendering \u2014 may impact performance.</li> <li>Works on most elements (<code>&lt;img&gt;</code>, <code>&lt;div&gt;</code>, pseudo-elements, etc.).</li> <li>Combine with transitions for smooth effects.</li> </ul>"},{"location":"express-js/01_Introduction/","title":"Introduction","text":"<p>Express.js is a minimal and flexible Node.js web application framework that provides robust features for building web and mobile applications. It simplifies the process of handling routes, requests, responses, and middleware in Node.js.</p>"},{"location":"express-js/01_Introduction/#1-why-use-expressjs","title":"1. Why Use Express.js?","text":"<ul> <li>Simplifies building server-side applications with Node.js</li> <li>Provides routing, middleware, and templating support</li> <li>Lightweight and fast</li> <li>Widely used in building REST APIs and full-stack apps</li> <li>Easy integration with databases like MongoDB, MySQL, PostgreSQL</li> </ul>"},{"location":"express-js/01_Introduction/#2-installation","title":"2. Installation","text":"<p>First, initialize a Node.js project:</p> <pre><code>mkdir express-app\ncd express-app\nnpm init -y\n</code></pre> <p>Install Express:</p> <pre><code>npm install express\n</code></pre>"},{"location":"express-js/01_Introduction/#3-basic-express-server","title":"3. Basic Express Server","text":"<pre><code>const express = require(\"express\");\nconst app = express();\nconst PORT = 3000;\n\napp.get(\"/\", (req, res) =&gt; {\n  res.send(\"Hello, Express!\");\n});\n\napp.listen(PORT, () =&gt; {\n  console.log(`Server running on http://localhost:${PORT}`);\n});\n</code></pre> <ul> <li><code>express()</code> creates an Express app</li> <li><code>app.get(path, callback)</code> handles GET requests</li> <li><code>res.send()</code> sends a response</li> <li><code>app.listen()</code> starts the server</li> </ul>"},{"location":"express-js/01_Introduction/#4-handling-different-routes","title":"4. Handling Different Routes","text":"<pre><code>app.get(\"/about\", (req, res) =&gt; {\n  res.send(\"About Page\");\n});\n\napp.post(\"/submit\", (req, res) =&gt; {\n  res.send(\"Form Submitted\");\n});\n</code></pre>"},{"location":"express-js/01_Introduction/#5-route-parameters-reqparams","title":"5. Route Parameters (<code>req.params</code>)","text":"<p>Route parameters allow you to capture values from the URL.</p> <pre><code>app.get(\"/users/:id\", (req, res) =&gt; {\n  const userId = req.params.id;\n  res.send(`User ID: ${userId}`);\n});\n</code></pre> <ul> <li>Visiting <code>/users/42</code> \u2192 <code>req.params.id</code> is <code>\"42\"</code></li> <li>Useful for dynamic routes like user profiles, product pages, etc.</li> </ul> <p>Multiple parameters:</p> <pre><code>app.get(\"/posts/:postId/comments/:commentId\", (req, res) =&gt; {\n  const { postId, commentId } = req.params;\n  res.send(`Post ID: ${postId}, Comment ID: ${commentId}`);\n});\n</code></pre>"},{"location":"express-js/01_Introduction/#6-middleware","title":"6. Middleware","text":"<p>Middleware functions are functions that run before reaching the final route handler. They can modify <code>req</code> and <code>res</code>.</p> <pre><code>app.use((req, res, next) =&gt; {\n  console.log(`${req.method} ${req.url}`);\n  next();\n});\n</code></pre>"},{"location":"express-js/01_Introduction/#7-serving-static-files","title":"7. Serving Static Files","text":"<pre><code>app.use(express.static(\"public\"));\n</code></pre> <p>Now you can serve files like <code>public/index.html</code>.</p>"},{"location":"express-js/01_Introduction/#8-json-data-handling","title":"8. JSON Data Handling","text":"<pre><code>app.use(express.json());\n\napp.post(\"/data\", (req, res) =&gt; {\n  res.json({ received: req.body });\n});\n</code></pre> <ul> <li><code>express.json()</code> parses JSON request bodies</li> </ul>"},{"location":"express-js/01_Introduction/#9-express-routing-in-separate-files","title":"9. Express Routing in Separate Files","text":"<pre><code>// routes/user.js\nconst express = require(\"express\");\nconst router = express.Router();\n\nrouter.get(\"/\", (req, res) =&gt; res.send(\"User List\"));\nrouter.get(\"/:id\", (req, res) =&gt; res.send(`User ${req.params.id}`));\n\nmodule.exports = router;\n\n// app.js\nconst userRoutes = require(\"./routes/user\");\napp.use(\"/users\", userRoutes);\n</code></pre> <p>Visiting <code>/users/</code> \u2192 \"User List\" Visiting <code>/users/42</code> \u2192 \"User 42\"</p>"},{"location":"express-js/02_Response-Request-and-Routers/","title":"Response, Request and Routers","text":""},{"location":"express-js/02_Response-Request-and-Routers/#response","title":"Response","text":"<p>In Express.js, the response object (<code>res</code>) represents the HTTP response that an Express app sends when it receives a request.</p>"},{"location":"express-js/02_Response-Request-and-Routers/#common-response-methods","title":"Common Response Methods","text":"<pre><code>res.send(\"Hello, World!\");      // Sends plain text/HTML\nres.json({ name: \"Ronald\" });     // Sends JSON response\nres.status(404).send(\"Not Found\"); // Sets status code\nres.redirect(\"/home\");          // Redirects to another route\nres.download(\"file.pdf\");       // Prompts file download\nres.end();                      // Ends the response process\n</code></pre> <ul> <li><code>res.send()</code> \u2192 Sends text, HTML, or JSON automatically detected</li> <li><code>res.json()</code> \u2192 Always sends JSON</li> <li><code>res.status()</code> \u2192 Sets HTTP status code</li> <li><code>res.redirect()</code> \u2192 Redirects to another URL</li> </ul>"},{"location":"express-js/02_Response-Request-and-Routers/#request","title":"Request","text":"<p>The request object (<code>req</code>) contains all information about the HTTP request.</p>"},{"location":"express-js/02_Response-Request-and-Routers/#common-request-properties","title":"Common Request Properties","text":"<pre><code>app.get(\"/profile/:id\", (req, res) =&gt; {\n  console.log(req.params.id);     // Route params\n  console.log(req.query.name);    // Query string ?name=aman\n  console.log(req.body);          // Data from POST/PUT body\n  console.log(req.method);        // HTTP method (GET, POST, etc.)\n  console.log(req.url);           // URL of the request\n  res.send(\"Profile Page\");\n});\n</code></pre> <ul> <li><code>req.params</code> \u2192 Dynamic route parameters</li> <li><code>req.query</code> \u2192 Query string parameters</li> <li><code>req.body</code> \u2192 Data sent in the request body (requires middleware like <code>express.json()</code>)</li> <li><code>req.method</code> \u2192 HTTP method</li> <li><code>req.url</code> \u2192 Request URL</li> </ul>"},{"location":"express-js/02_Response-Request-and-Routers/#routers","title":"Routers","text":"<p>Routers help organize routes into separate files for better structure.</p>"},{"location":"express-js/02_Response-Request-and-Routers/#example-of-router","title":"Example of Router","text":"<pre><code>// routes/user.js\nconst express = require(\"express\");\nconst router = express.Router();\n\nrouter.get(\"/\", (req, res) =&gt; res.send(\"User List\"));\nrouter.post(\"/\", (req, res) =&gt; res.send(\"Create User\"));\nrouter.get(\"/:id\", (req, res) =&gt; res.send(`User ${req.params.id}`));\n\nmodule.exports = router;\n</code></pre>"},{"location":"express-js/02_Response-Request-and-Routers/#using-router-in-main-app","title":"Using Router in Main App","text":"<pre><code>// app.js\nconst express = require(\"express\");\nconst app = express();\nconst userRoutes = require(\"./routes/user\");\n\napp.use(\"/users\", userRoutes);\n\napp.listen(3000, () =&gt; console.log(\"Server running on port 3000\"));\n</code></pre> <ul> <li>Visiting <code>/users/</code> \u2192 \"User List\"</li> <li>Visiting <code>/users/42</code> \u2192 \"User 42\"</li> <li>Visiting <code>/users</code> with POST \u2192 \"Create User\"</li> </ul>"},{"location":"express-js/03_Middlewares/","title":"Middlewares","text":"<p>Middleware functions in Express.js are functions that execute before the final route handler. They can modify the request (<code>req</code>), response (<code>res</code>), or even end the request-response cycle.</p>"},{"location":"express-js/03_Middlewares/#basic-example","title":"Basic Example","text":"<pre><code>const express = require(\"express\");\nconst app = express();\n\n// Middleware function\napp.use((req, res, next) =&gt; {\n  console.log(`${req.method} ${req.url}`);\n  next(); // Passes control to the next middleware/route\n});\n\napp.get(\"/\", (req, res) =&gt; {\n  res.send(\"Home Page\");\n});\n\napp.listen(3000, () =&gt; console.log(\"Server running on port 3000\"));\n</code></pre> <ul> <li><code>app.use()</code> \u2192 Adds middleware to the entire app</li> <li><code>next()</code> \u2192 Moves to the next middleware or route handler</li> </ul>"},{"location":"express-js/03_Middlewares/#types-of-middleware","title":"Types of Middleware","text":""},{"location":"express-js/03_Middlewares/#1-application-level-middleware","title":"1. Application-Level Middleware","text":"<pre><code>app.use((req, res, next) =&gt; {\n  console.log(\"Application-level middleware executed\");\n  next();\n});\n</code></pre> <p>Applies to all routes unless restricted by path:</p> <pre><code>app.use(\"/api\", (req, res, next) =&gt; { ... });\n</code></pre>"},{"location":"express-js/03_Middlewares/#2-router-level-middleware","title":"2. Router-Level Middleware","text":"<p>Used with <code>express.Router()</code> to apply middleware only to specific routers.</p> <pre><code>const router = express.Router();\n\nrouter.use((req, res, next) =&gt; {\n  console.log(\"Router-level middleware\");\n  next();\n});\n\nrouter.get(\"/\", (req, res) =&gt; res.send(\"Users\"));\n\napp.use(\"/users\", router);\n</code></pre>"},{"location":"express-js/03_Middlewares/#3-built-in-middleware","title":"3. Built-in Middleware","text":"<ul> <li><code>express.json()</code> \u2192 Parses JSON data</li> <li><code>express.urlencoded({ extended: true })</code> \u2192 Parses URL-encoded form data</li> <li><code>express.static(\"public\")</code> \u2192 Serves static files</li> </ul> <pre><code>app.use(express.json());\napp.use(express.static(\"public\"));\n</code></pre>"},{"location":"express-js/03_Middlewares/#4-third-party-middleware","title":"4. Third-Party Middleware","text":"<p>You can install and use external middleware packages.</p> <pre><code>npm install morgan cors\n</code></pre> <pre><code>const morgan = require(\"morgan\");\nconst cors = require(\"cors\");\n\napp.use(morgan(\"dev\")); // Logs requests\napp.use(cors());        // Enables CORS\n</code></pre>"},{"location":"express-js/03_Middlewares/#5-error-handling-middleware","title":"5. Error-Handling Middleware","text":"<p>Used to handle errors globally. Must have four parameters.</p> <pre><code>app.use((err, req, res, next) =&gt; {\n  console.error(err.stack);\n  res.status(500).send(\"Something broke!\");\n});\n</code></pre>"},{"location":"express-js/03_Middlewares/#middleware-flow-example","title":"Middleware Flow Example","text":"<pre><code>app.use((req, res, next) =&gt; {\n  console.log(\"First middleware\");\n  next();\n});\n\napp.use((req, res, next) =&gt; {\n  console.log(\"Second middleware\");\n  next();\n});\n\napp.get(\"/\", (req, res) =&gt; {\n  res.send(\"Final Route Handler\");\n});\n</code></pre> <p>Output:</p> <pre><code>First middleware\nSecond middleware\n</code></pre> <p>Then the response \u201cFinal Route Handler\u201d is sent.</p>"},{"location":"express-js/04_ejs-template-engine/","title":"EJS Template Engine","text":""},{"location":"express-js/04_ejs-template-engine/#what-is-ejs","title":"What is EJS?","text":"<p>EJS is a simple templating language that lets you generate HTML markup with plain JavaScript. It is commonly used with Node.js for server-side rendering of dynamic content.</p>"},{"location":"express-js/04_ejs-template-engine/#advantages-of-ejs","title":"Advantages of EJS","text":"<ul> <li>Simple to learn for those familiar with JavaScript.</li> <li>Allows embedding JavaScript logic directly in HTML.</li> <li>Supports partials for reusable components.</li> <li>Works seamlessly with Express.js.</li> </ul>"},{"location":"express-js/04_ejs-template-engine/#disadvantages","title":"Disadvantages","text":"<ul> <li>Logic-heavy templates can get messy.</li> <li>Not as modern as React, Vue, or other component-based frameworks.</li> </ul>"},{"location":"express-js/04_ejs-template-engine/#project-structure-nodejs-express","title":"Project Structure (Node.js + Express)","text":"<pre><code>my-ejs-project/\n\u2502\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 package-lock.json\n\u251c\u2500\u2500 server.js            # Main server file\n\u2502\n\u251c\u2500\u2500 views/               # All EJS templates\n   \u251c\u2500\u2500 partials/        # Reusable components (header, footer)\n   \u2502   \u251c\u2500\u2500 header.ejs\n   \u2502   \u2514\u2500\u2500 footer.ejs\n   \u251c\u2500\u2500 index.ejs\n   \u251c\u2500\u2500 about.ejs\n   \u2514\u2500\u2500 contact.ejs\n</code></pre>"},{"location":"express-js/04_ejs-template-engine/#installation","title":"Installation","text":"<pre><code>npm install ejs\n</code></pre>"},{"location":"express-js/04_ejs-template-engine/#setting-up-ejs-with-express","title":"Setting Up EJS with Express","text":"<pre><code>const express = require('express');\nconst app = express();\n\n// Set EJS as the template engine\napp.set('view engine', 'ejs');\n\n// Optional: Set views directory\napp.set('views', './views');\n\napp.listen(3000, () =&gt; console.log('Server running on port 3000'));\n</code></pre>"},{"location":"express-js/04_ejs-template-engine/#creating-an-ejs-template","title":"Creating an EJS Template","text":"<p><code>views/index.ejs</code></p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;&lt;%= title %&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello, &lt;%= name %&gt;!&lt;/h1&gt;\n    &lt;ul&gt;\n        &lt;% items.forEach(item =&gt; { %&gt;\n            &lt;li&gt;&lt;%= item %&gt;&lt;/li&gt;\n        &lt;% }) %&gt;\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"express-js/04_ejs-template-engine/#rendering-ejs-templates","title":"Rendering EJS Templates","text":"<pre><code>app.get('/', (req, res) =&gt; {\n    res.render('index', {\n        title: 'My EJS Page',\n        name: 'John',\n        items: ['Item 1', 'Item 2', 'Item 3']\n    });\n});\n</code></pre>"},{"location":"express-js/04_ejs-template-engine/#ejs-syntax","title":"EJS Syntax","text":""},{"location":"express-js/04_ejs-template-engine/#output-html","title":"Output HTML","text":"<ul> <li><code>&lt;%= variable %&gt;</code> \u2192 Outputs the value and escapes HTML</li> <li><code>&lt;%- variable %&gt;</code> \u2192 Outputs unescaped HTML</li> </ul>"},{"location":"express-js/04_ejs-template-engine/#javascript-code","title":"JavaScript Code","text":"<ul> <li><code>&lt;% code %&gt;</code> \u2192 Executes JavaScript code (no output)</li> </ul>"},{"location":"express-js/04_ejs-template-engine/#example","title":"Example","text":"<pre><code>&lt;% if(user) { %&gt;\n    &lt;p&gt;Welcome, &lt;%= user.name %&gt;!&lt;/p&gt;\n&lt;% } else { %&gt;\n    &lt;p&gt;Please log in.&lt;/p&gt;\n&lt;% } %&gt;\n</code></pre>"},{"location":"express-js/04_ejs-template-engine/#partial-templates-include","title":"Partial Templates (Include)","text":"<p><code>views/header.ejs</code></p> <pre><code>&lt;header&gt;\n    &lt;h1&gt;My Website&lt;/h1&gt;\n&lt;/header&gt;\n</code></pre> <p>Include in main template:</p> <pre><code>&lt;%- include('header') %&gt;\n</code></pre>"},{"location":"express-js/04_ejs-template-engine/#loops-conditionals","title":"Loops &amp; Conditionals","text":"<pre><code>&lt;ul&gt;\n&lt;% for(let i=0; i&lt;items.length; i++) { %&gt;\n    &lt;li&gt;&lt;%= items[i] %&gt;&lt;/li&gt;\n&lt;% } %&gt;\n&lt;/ul&gt;\n\n&lt;% if(items.length &gt; 0) { %&gt;\n    &lt;p&gt;We have items!&lt;/p&gt;\n&lt;% } else { %&gt;\n    &lt;p&gt;No items found.&lt;/p&gt;\n&lt;% } %&gt;\n</code></pre>"},{"location":"git-and-github/01_Git-and-Github/","title":"Git and    GitHub","text":""},{"location":"git-and-github/01_Git-and-Github/#1-what-is-git","title":"1. What is Git?","text":"<p>Git is a distributed version control system that tracks changes in source code and helps teams collaborate on projects.</p> <ul> <li>Created by Linus Torvalds</li> <li>CLI-based, fast, and efficient</li> <li>Works offline</li> </ul>"},{"location":"git-and-github/01_Git-and-Github/#2-what-is-github","title":"2. What is GitHub?","text":"<p>GitHub is a cloud-based hosting service for Git repositories. It adds collaboration features like pull requests, issues, and CI/CD.</p>"},{"location":"git-and-github/01_Git-and-Github/#3-install-and-configure-git","title":"3. Install and Configure Git","text":"<p>Install Git from: git website</p> <p>Initial setup:</p> <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"you@example.com\"\n````\n\nCheck config:\n\n```bash\ngit config --list\n</code></pre>"},{"location":"git-and-github/01_Git-and-Github/#4-basic-commands","title":"4. Basic Commands","text":"<pre><code>git init            # Initialize a new repo\ngit status          # Show file status\ngit add &lt;file&gt;      # Stage file\ngit commit -m \"msg\" # Commit staged changes\ngit log             # View commit history\n</code></pre> <p>Stage all files:</p> <pre><code>git add .\n</code></pre>"},{"location":"git-and-github/01_Git-and-Github/#5-working-with-github","title":"5. Working with GitHub","text":""},{"location":"git-and-github/01_Git-and-Github/#create-a-repository","title":"Create a Repository","text":"<ol> <li>Create a new repo on GitHub (don't initialize with README)</li> <li>In terminal:</li> </ol> <pre><code>git remote add origin https://github.com/user/repo.git\ngit branch -M main\ngit push -u origin main\n</code></pre>"},{"location":"git-and-github/01_Git-and-Github/#6-gitignore","title":"6. .gitignore","text":"<p>Use <code>.gitignore</code> to exclude files/folders from being tracked.</p> <p>Example:</p> <pre><code>node_modules/\n.env\n.DS_Store\n</code></pre>"},{"location":"git-and-github/01_Git-and-Github/#7-cloning-repositories","title":"7. Cloning Repositories","text":"<pre><code>git clone https://github.com/user/repo.git\n</code></pre>"},{"location":"git-and-github/01_Git-and-Github/#8-branching","title":"8. Branching","text":"<pre><code>git branch         # List branches\ngit branch dev     # Create branch\ngit switch dev     # Switch branch (or: git checkout dev)\ngit merge dev      # Merge dev into current branch\n</code></pre> <p>Delete a branch:</p> <pre><code>git branch -d dev\n</code></pre>"},{"location":"git-and-github/01_Git-and-Github/#9-handling-merge-conflicts","title":"9. Handling Merge Conflicts","text":"<p>When two branches modify the same line:</p> <pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nyour version\n=======\nincoming version\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; dev\n</code></pre> <p>Resolve manually, then:</p> <pre><code>git add .\ngit commit\n</code></pre>"},{"location":"git-and-github/01_Git-and-Github/#10-undoing-changes","title":"10. Undoing Changes","text":"<p>Discard unstaged changes:</p> <pre><code>git restore &lt;file&gt;\n</code></pre> <p>Unstage a file:</p> <pre><code>git reset &lt;file&gt;\n</code></pre> <p>Reset entire repo:</p> <pre><code>git reset --hard HEAD\n</code></pre> <p>Revert a commit (safe):</p> <pre><code>git revert &lt;commit-hash&gt;\n</code></pre>"},{"location":"git-and-github/01_Git-and-Github/#11-stashing-changes","title":"11. Stashing Changes","text":"<p>Temporarily save work:</p> <pre><code>git stash\ngit stash list\ngit stash apply\ngit stash pop\n</code></pre>"},{"location":"git-and-github/01_Git-and-Github/#12-working-with-remotes","title":"12. Working with Remotes","text":"<pre><code>git remote -v                # Show remotes\ngit remote add origin &lt;url&gt;  # Add remote\ngit push origin main         # Push to remote\ngit pull origin main         # Pull latest\n</code></pre>"},{"location":"git-and-github/01_Git-and-Github/#13-pull-requests-prs","title":"13. Pull Requests (PRs)","text":"<ol> <li>Push branch to GitHub</li> <li>Click \"Compare &amp; Pull Request\"</li> <li>Add title, description, reviewers</li> <li>Merge after approval</li> </ol>"},{"location":"git-and-github/01_Git-and-Github/#14-fork-vs-clone","title":"14. Fork vs Clone","text":"<ul> <li> <p>Fork: Your own copy of someone else\u2019s repo (for contributing)</p> </li> <li> <p>Clone: Local copy of any repo (for development)</p> </li> </ul>"},{"location":"git-and-github/01_Git-and-Github/#15-tags-and-releases","title":"15. Tags and Releases","text":"<pre><code>git tag v1.0\ngit tag -a v1.1 -m \"Version 1.1\"\ngit push origin --tags\n</code></pre> <p>Use tags on GitHub to create releases.</p>"},{"location":"git-and-github/01_Git-and-Github/#16-rebase-advanced","title":"16. Rebase (Advanced)","text":"<pre><code>git rebase main         # Rebase current branch onto main\ngit rebase -i HEAD~3    # Interactive rebase last 3 commits\n</code></pre> <p>Squash commits by choosing <code>s</code> for all except the first.</p>"},{"location":"git-and-github/01_Git-and-Github/#17-authentication-methods","title":"17. Authentication Methods","text":""},{"location":"git-and-github/01_Git-and-Github/#https-with-token","title":"HTTPS with Token:","text":"<pre><code>git remote set-url origin https://&lt;token&gt;@github.com/user/repo.git\n</code></pre>"},{"location":"git-and-github/01_Git-and-Github/#ssh","title":"SSH:","text":"<ol> <li>Generate key:</li> </ol> <pre><code>ssh-keygen -t ed25519 -C \"you@example.com\"\n</code></pre> <ol> <li> <p>Add public key to GitHub \u2192 Settings \u2192 SSH &amp; GPG</p> </li> <li> <p>Test:</p> </li> </ol> <pre><code>ssh -T git@github.com\n</code></pre>"},{"location":"git-and-github/01_Git-and-Github/#18-git-tools","title":"18. Git Tools","text":"<ul> <li>GitHub Desktop \u2013 GUI for GitHub workflows</li> <li>Sourcetree, GitKraken \u2013 Git GUI clients</li> <li>GitLens (VS Code) \u2013 Git insights in editor</li> </ul>"},{"location":"git-and-github/01_Git-and-Github/#19-git-hooks-optional","title":"19. Git Hooks (Optional)","text":"<p>Automate actions on Git events:</p> <p>Example: <code>.git/hooks/pre-commit</code></p> <pre><code>#!/bin/sh\nnpm run lint\n</code></pre> <p>Make it executable:</p> <pre><code>chmod +x .git/hooks/pre-commit\n</code></pre>"},{"location":"git-and-github/01_Git-and-Github/#20-best-practices","title":"20. Best Practices","text":"<ul> <li>Commit often with meaningful messages</li> <li>Use <code>.gitignore</code> to avoid committing unwanted files</li> <li>Use branches for features/fixes</li> <li>Don\u2019t commit secrets (use <code>.env</code>)</li> <li>Resolve merge conflicts carefully</li> <li>Keep pull requests small and focused</li> <li>Never force push to <code>main</code> unless you know what you\u2019re doing</li> </ul>"},{"location":"git-and-github/01_Git-and-Github/#commit-message-format","title":"Commit Message Format","text":"<p>Use present tense, short, descriptive messages:</p> <pre><code>git commit -m \"Add contact form validation\"\n</code></pre> <p>Prefix (optional): <code>feat</code>, <code>fix</code>, <code>docs</code>, <code>refactor</code>, <code>test</code>, etc.</p>"},{"location":"git-and-github/01_Git-and-Github/#summary-cheatsheet","title":"Summary Cheatsheet","text":"Command Description <code>git init</code> Start new repository <code>git clone &lt;url&gt;</code> Clone a repo <code>git status</code> Show status <code>git add .</code> Stage all changes <code>git commit -m \"\"</code> Commit changes <code>git push origin main</code> Push to GitHub <code>git pull origin main</code> Pull latest from GitHub <code>git branch &lt;name&gt;</code> Create new branch <code>git switch &lt;branch&gt;</code> Switch branch <code>git merge &lt;branch&gt;</code> Merge into current <code>git log</code> Show commit history <code>git stash</code> Save uncommitted work <code>git tag v1.0</code> Create version tag"},{"location":"hosting/01_Introduction/","title":"Introduction to Hosting","text":""},{"location":"hosting/01_Introduction/#what-is-hosting","title":"What is Hosting?","text":"<p>Hosting is a service that allows individuals or organizations to make their websites accessible on the internet. When you host a website, you store its files (HTML, CSS, JavaScript, images, databases, etc.) on a server connected to the internet 24/7. When someone types your website\u2019s domain name into a browser, the hosting server delivers the files to their device.</p>"},{"location":"hosting/01_Introduction/#how-hosting-works","title":"How Hosting Works","text":"<ol> <li>Website Creation: You build your website using HTML, CSS, JavaScript, and other technologies.</li> <li>Choose a Hosting Provider: You rent space on a server from companies like Hostinger, GoDaddy, or AWS.  </li> <li>Upload Files: Website files are uploaded to the hosting server using FTP or a control panel.  </li> <li>Connect Domain: The domain name (e.g., <code>example.com</code>) is linked to the server using DNS.  </li> <li>Access by Visitors: When users enter the domain name, the DNS finds the server\u2019s IP address, and the website loads in their browser.</li> </ol>"},{"location":"hosting/01_Introduction/#difference-between-domain-and-hosting","title":"Difference Between Domain and Hosting","text":"Feature Domain Hosting Definition The web address users type to visit your website (e.g., <code>example.com</code>) The storage space where your website files are kept Purpose Identifies your website on the internet Stores and serves website content Analogy Like a home address Like the actual house <p>Example: If your website is a house:  </p> <ul> <li>The domain is the address (<code>123 Street Name</code>).  </li> <li>The hosting is the land where the house (website files) sits.</li> </ul>"},{"location":"hosting/01_Introduction/#components-of-hosting","title":"Components of Hosting","text":""},{"location":"hosting/01_Introduction/#1-server","title":"1. Server","text":"<p>A powerful computer that stores your website files and runs 24/7 to make your website available online.</p>"},{"location":"hosting/01_Introduction/#2-dns-domain-name-system","title":"2. DNS (Domain Name System)","text":"<p>Converts your domain name into an IP address that browsers use to find the hosting server.</p>"},{"location":"hosting/01_Introduction/#3-ftp-file-transfer-protocol","title":"3. FTP (File Transfer Protocol)","text":"<p>A method used to upload and manage files on your hosting server. You can use tools like FileZilla.</p>"},{"location":"hosting/01_Introduction/#4-control-panel","title":"4. Control Panel","text":"<p>A graphical interface (like cPanel, Plesk) provided by the hosting company to manage your website, emails, and databases.</p>"},{"location":"hosting/01_Introduction/#5-database","title":"5. Database","text":"<p>Stores dynamic website content such as user accounts, blog posts, or product data (e.g., MySQL, MongoDB).</p>"},{"location":"hosting/01_Introduction/#importance-of-hosting","title":"Importance of Hosting","text":"<ul> <li>Keeps your website accessible 24/7</li> <li>Provides storage for your website files</li> <li>Ensures speed and reliability through server performance</li> <li>Offers security features like SSL, backups, and firewalls</li> <li>Allows scaling as your website grows</li> </ul>"},{"location":"hosting/01_Introduction/#example-scenario","title":"Example Scenario","text":"<p>You build a portfolio website using HTML, CSS, and JavaScript:</p> <ol> <li>You purchase a domain \u2014 <code>portfolio.com</code> </li> <li>You choose hosting \u2014 e.g., Netlify or Hostinger  </li> <li>You upload your files to the hosting server  </li> <li>When someone visits <code>portfolio.com</code>, the server sends your site\u2019s files to their browser  </li> </ol> <p>This is how hosting makes your website live on the internet.</p>"},{"location":"hosting/02_Types/","title":"Types of Hosting","text":"<p>Hosting comes in various types depending on performance needs, pricing, scalability, and control. Each type offers different levels of resource sharing, management, and customization.</p>"},{"location":"hosting/02_Types/#1-shared-hosting","title":"1. Shared Hosting","text":"<p>Definition: Multiple websites share the same physical server and its resources such as CPU, RAM, and bandwidth.</p> <p>Pros:</p> <ul> <li>Cheapest hosting option  </li> <li>Easy to set up and use  </li> <li>Usually includes a control panel (like cPanel)</li> </ul> <p>Cons:</p> <ul> <li>Slower performance (shared resources)  </li> <li>Limited customization  </li> <li>If one website gets high traffic, others slow down  </li> <li>Weaker security (shared environment)</li> </ul> <p>Best For: Small websites, blogs, portfolios, and beginners.</p>"},{"location":"hosting/02_Types/#2-vps-virtual-private-server-hosting","title":"2. VPS (Virtual Private Server) Hosting","text":"<p>Definition: A single physical server is divided into multiple virtual servers. Each has its own resources and acts like a dedicated server.</p> <p>Pros:</p> <ul> <li>Better performance than shared hosting  </li> <li>Root access for full control  </li> <li>Scalable (add more resources when needed)</li> </ul> <p>Cons:</p> <ul> <li>More expensive than shared hosting  </li> <li>Requires technical knowledge to manage  </li> </ul> <p>Best For: Medium-sized websites, growing businesses, and developers who need more control.</p>"},{"location":"hosting/02_Types/#3-dedicated-hosting","title":"3. Dedicated Hosting","text":"<p>Definition: You rent an entire physical server for your website \u2014 no sharing with others.</p> <p>Pros:</p> <ul> <li>Maximum performance and control  </li> <li>Highest security level  </li> <li>Fully customizable environment  </li> </ul> <p>Cons:</p> <ul> <li>Very expensive  </li> <li>Needs server management skills  </li> <li>Overkill for small sites  </li> </ul> <p>Best For: Large enterprises, e-commerce platforms, or high-traffic websites.</p>"},{"location":"hosting/02_Types/#4-cloud-hosting","title":"4. Cloud Hosting","text":"<p>Definition: Your website is hosted on a cluster of servers (the cloud). If one server fails, another automatically takes over.</p> <p>Pros:</p> <ul> <li>Highly scalable and reliable  </li> <li>Pay only for what you use  </li> <li>Excellent uptime and performance  </li> </ul> <p>Cons:</p> <ul> <li>Can get expensive as usage grows  </li> <li>Slightly complex to configure  </li> </ul> <p>Best For: Startups, growing websites, and apps with fluctuating traffic.</p>"},{"location":"hosting/02_Types/#5-managed-hosting","title":"5. Managed Hosting","text":"<p>Definition: The hosting provider manages technical operations like updates, backups, and maintenance for you.</p> <p>Pros:</p> <ul> <li>Hassle-free management  </li> <li>High security and reliability  </li> <li>Expert support  </li> </ul> <p>Cons:</p> <ul> <li>More expensive  </li> <li>Less manual control over the server  </li> </ul> <p>Best For: Non-technical users or teams that prefer focusing on business rather than server management.</p>"},{"location":"hosting/02_Types/#6-wordpress-hosting","title":"6. WordPress Hosting","text":"<p>Definition: Hosting optimized specifically for WordPress websites with pre-installed plugins, caching, and updates.</p> <p>Pros:</p> <ul> <li>Fast setup and optimized performance  </li> <li>Automatic updates and backups  </li> <li>Security tuned for WordPress  </li> </ul> <p>Cons:</p> <ul> <li>Limited to WordPress sites</li> <li>Less flexibility for custom setups  </li> </ul> <p>Best For: WordPress blogs, business sites, and portfolios.</p>"},{"location":"hosting/02_Types/#7-reseller-hosting","title":"7. Reseller Hosting","text":"<p>Definition: You rent hosting resources and resell them to others under your own brand.</p> <p>Pros:</p> <ul> <li>Great for starting a web hosting business</li> <li>Manage multiple clients easily  </li> <li>Includes management panels for reselling  </li> </ul> <p>Cons:</p> <ul> <li>Requires business and management skills  </li> <li>You\u2019re responsible for client issues  </li> </ul> <p>Best For: Entrepreneurs, freelancers, or agencies managing multiple websites.</p>"},{"location":"hosting/02_Types/#comparison-table","title":"Comparison Table","text":"Hosting Type Price Performance Control Scalability Best For Shared \u2b50 Cheap \u2699\ufe0f Low \u274c Limited \ud83d\udeab No Small sites &amp; beginners VPS \ud83d\udcb0 Moderate \u2699\ufe0f Medium \u2705 High \u2705 Yes Developers, startups Dedicated \ud83d\udcb8 Expensive \u2699\ufe0f Very High \u2705 Full \u2705 Yes Large businesses Cloud \ud83d\udcb5 Flexible \u2699\ufe0f High \u2705 High \u2705 Excellent Scalable apps Managed \ud83d\udcb0 Moderate \u2699\ufe0f High \u274c Limited \u2705 Yes Non-technical users WordPress \ud83d\udcb0 Moderate \u2699\ufe0f High \u274c Limited \u2705 Yes WordPress users Reseller \ud83d\udcb5 Varies \u2699\ufe0f Depends \u2705 High \u2705 Yes Hosting resellers"},{"location":"hosting/02_Types/#choosing-the-right-hosting-type","title":"Choosing the Right Hosting Type","text":"Website Type Recommended Hosting Personal portfolio or blog Shared / WordPress Hosting Small business site Managed or Shared Hosting Web app / API backend VPS or Cloud Hosting E-commerce site Cloud or Dedicated Hosting Multiple client sites Reseller Hosting High-traffic content site Dedicated or Cloud Hosting"},{"location":"hosting/02_Types/#summary","title":"Summary","text":"<p>Each hosting type serves different needs:</p> <ul> <li>Shared for beginners,  </li> <li>VPS for developers,  </li> <li>Dedicated for enterprises,  </li> <li>Cloud for scalable apps,  </li> <li>Managed for ease,  </li> <li>WordPress for CMS users, and  </li> <li>Reseller for business owners. Choose based on budget, control, and traffic requirements.</li> </ul>"},{"location":"hosting/03_Providers/","title":"Hosting Providers","text":"<p>Choosing the right hosting provider is crucial for your website\u2019s performance, reliability, and scalability. Each provider offers different features, pricing, and support depending on your needs.</p>"},{"location":"hosting/03_Providers/#1-popular-web-hosting-providers","title":"1. Popular Web Hosting Providers","text":""},{"location":"hosting/03_Providers/#1-hostinger","title":"1. Hostinger","text":"<ul> <li>Known for affordable pricing and fast servers.</li> <li>Offers shared, VPS, cloud, and WordPress hosting.</li> <li>User-friendly hPanel instead of cPanel.</li> <li>Free domain and SSL with most plans.</li> </ul> <p>Best For: Beginners, portfolios, and small business websites.</p>"},{"location":"hosting/03_Providers/#2-bluehost","title":"2. Bluehost","text":"<ul> <li>Officially recommended by WordPress.</li> <li>Offers shared, VPS, and dedicated hosting.</li> <li>Includes free domain, SSL, and 24/7 support.</li> <li>Easy WordPress setup and automatic updates.</li> </ul> <p>Best For: WordPress users and small to medium-sized websites.</p>"},{"location":"hosting/03_Providers/#3-godaddy","title":"3. GoDaddy","text":"<ul> <li>One of the oldest hosting and domain companies.</li> <li>Provides shared, WordPress, VPS, and dedicated hosting.</li> <li>Offers strong domain management and marketing tools.</li> </ul> <p>Best For: Beginners and small business websites.</p>"},{"location":"hosting/03_Providers/#4-siteground","title":"4. SiteGround","text":"<ul> <li>High performance with Google Cloud infrastructure.</li> <li>Excellent uptime, speed, and customer support.</li> <li>Great for WordPress and WooCommerce sites.</li> </ul> <p>Best For: Professional blogs and e-commerce websites.</p>"},{"location":"hosting/03_Providers/#5-a2-hosting","title":"5. A2 Hosting","text":"<ul> <li>Known for \u201cTurbo Servers\u201d (20x faster performance).</li> <li>Offers shared, VPS, dedicated, and reseller hosting.</li> <li>Strong security and developer-friendly environment.</li> </ul> <p>Best For: Developers and performance-focused users.</p>"},{"location":"hosting/03_Providers/#6-namecheap","title":"6. Namecheap","text":"<ul> <li>Affordable hosting and domains.</li> <li>Simple cPanel setup and strong uptime.</li> <li>Free website builder and SSL in all plans.</li> </ul> <p>Best For: Beginners and small projects.</p>"},{"location":"hosting/03_Providers/#2-cloud-based-hosting-providers","title":"2. Cloud-Based Hosting Providers","text":""},{"location":"hosting/03_Providers/#1-amazon-web-services-aws","title":"1. Amazon Web Services (AWS)","text":"<ul> <li>Highly scalable and flexible cloud infrastructure.</li> <li>Offers EC2, S3, and Lightsail for hosting.</li> <li>Pay-as-you-go pricing model.</li> </ul> <p>Best For: Large-scale apps, startups, or enterprises.</p>"},{"location":"hosting/03_Providers/#2-google-cloud-platform-gcp","title":"2. Google Cloud Platform (GCP)","text":"<ul> <li>Strong performance, scalability, and integration with Google tools.</li> <li>Offers App Engine, Compute Engine, and Cloud Run.</li> <li>Pay-per-use model.</li> </ul> <p>Best For: Web apps, APIs, and tech startups.</p>"},{"location":"hosting/03_Providers/#3-microsoft-azure","title":"3. Microsoft Azure","text":"<ul> <li>Powerful cloud hosting with global data centers.</li> <li>Excellent for Windows-based apps or enterprise use.</li> <li>Scalable and secure cloud services.</li> </ul> <p>Best For: Enterprise-level or .NET-based projects.</p>"},{"location":"hosting/03_Providers/#4-digitalocean","title":"4. DigitalOcean","text":"<ul> <li>Developer-focused with simplicity and powerful APIs.</li> <li>Uses \u201cDroplets\u201d (virtual machines) for hosting.</li> <li>Offers scalable cloud hosting and managed databases.</li> </ul> <p>Best For: Developers and startups building scalable apps.</p>"},{"location":"hosting/03_Providers/#3-static-website-hosting-providers","title":"3. Static Website Hosting Providers","text":""},{"location":"hosting/03_Providers/#1-github-pages","title":"1. GitHub Pages","text":"<ul> <li>Free hosting for static sites directly from GitHub repositories.</li> <li>Supports custom domains.</li> <li>Ideal for projects, portfolios, and documentation.</li> </ul> <p>Best For: Developers hosting static HTML/CSS/JS sites.</p>"},{"location":"hosting/03_Providers/#2-netlify","title":"2. Netlify","text":"<ul> <li>Continuous deployment from Git or local builds.</li> <li>Supports custom domains, SSL, and serverless functions.</li> <li>Free plan available with great performance.</li> </ul> <p>Best For: Static and Jamstack websites.</p>"},{"location":"hosting/03_Providers/#3-vercel","title":"3. Vercel","text":"<ul> <li>Optimized for React and Next.js projects.</li> <li>Seamless Git integration and instant global deployment.</li> <li>Automatic builds and preview links.</li> </ul> <p>Best For: React, Next.js, and frontend web apps.</p>"},{"location":"hosting/03_Providers/#4-firebase-hosting-by-google","title":"4. Firebase Hosting (by Google)","text":"<ul> <li>Fast and secure static + dynamic site hosting.</li> <li>Integrates with Firebase\u2019s database and authentication.</li> <li>Automatic SSL and CDN included.</li> </ul> <p>Best For: Progressive web apps and small web projects.</p>"},{"location":"hosting/03_Providers/#4-full-stack-and-app-hosting-providers","title":"4. Full-Stack and App Hosting Providers","text":""},{"location":"hosting/03_Providers/#1-render","title":"1. Render","text":"<ul> <li>Simplified full-stack hosting with auto-deploys from GitHub.</li> <li>Free tier available.</li> <li>Supports Node.js, Python, React, and databases.</li> </ul> <p>Best For: Full-stack and backend developers.</p>"},{"location":"hosting/03_Providers/#2-railway","title":"2. Railway","text":"<ul> <li>Modern hosting for web apps and APIs.</li> <li>Simple UI, automatic deployments, and database support.</li> <li>Free tier for small projects.</li> </ul> <p>Best For: Node.js, Express, or small full-stack apps.</p>"},{"location":"hosting/03_Providers/#3-heroku","title":"3. Heroku","text":"<ul> <li>Popular platform-as-a-service (PaaS) for developers.</li> <li>Easy deployment using Git commands.</li> <li>Supports multiple languages (Node, Python, Ruby, etc.).</li> </ul> <p>Best For: Students and developers testing or deploying prototypes.</p>"},{"location":"hosting/03_Providers/#5-free-hosting-providers","title":"5. Free Hosting Providers","text":"Provider Type Storage Key Features GitHub Pages Static Limited Free, supports custom domain Netlify Static 100 GB/month bandwidth Continuous deployment Vercel Static/Dynamic 100 GB/month bandwidth Ideal for React/Next.js Firebase Static/Dynamic Free tier Fast CDN, SSL Render Full-stack Limited free plan Databases, CI/CD support InfinityFree Shared Unlimited Free PHP &amp; MySQL hosting 000WebHost Shared 300 MB cPanel, limited resources"},{"location":"hosting/03_Providers/#6-hosting-by-project-type","title":"6. Hosting by Project Type","text":"Project Type Recommended Providers Static site (HTML/CSS/JS) GitHub Pages, Netlify, Vercel React / Next.js app Vercel, Netlify Node.js / Express backend Render, Railway, AWS Full-stack MERN app Render, Railway, DigitalOcean WordPress site Bluehost, Hostinger, SiteGround E-commerce site SiteGround, Cloudways, AWS Portfolio / Blog Hostinger, Netlify, GitHub Pages"},{"location":"hosting/03_Providers/#summary","title":"Summary","text":"<ul> <li>Use Hostinger, Bluehost, or SiteGround for general web hosting.  </li> <li>Use Vercel or Netlify for static and frontend projects.  </li> <li>Use Render, Railway, or AWS for full-stack or cloud-based apps.  </li> <li>Use GitHub Pages for free personal or documentation sites.</li> </ul>"},{"location":"hosting/04_Setup/","title":"Setup and Deployment","text":"<p>Hosting your website involves preparing files, selecting a hosting provider, connecting your domain, and uploading your project to a live server. This process is known as deployment.</p>"},{"location":"hosting/04_Setup/#1-steps-to-host-a-website","title":"1. Steps to Host a Website","text":""},{"location":"hosting/04_Setup/#step-1-build-your-website","title":"Step 1: Build Your Website","text":"<p>Create your project using HTML, CSS, JavaScript, or frameworks like React, Node.js, etc. Ensure your files are organized, for example:</p> <pre><code>/project-folder\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 about.html\n\u251c\u2500\u2500 styles.css\n\u251c\u2500\u2500 script.js\n\u2514\u2500\u2500 /images\n</code></pre>"},{"location":"hosting/04_Setup/#step-2-choose-a-hosting-provider","title":"Step 2: Choose a Hosting Provider","text":"<p>Select a hosting type based on your website:</p> <ul> <li>Static website: Netlify, Vercel, GitHub Pages  </li> <li>Dynamic / Full-stack app: Render, Railway, AWS, DigitalOcean  </li> <li>WordPress site: Bluehost, Hostinger  </li> </ul>"},{"location":"hosting/04_Setup/#step-3-get-a-domain-name","title":"Step 3: Get a Domain Name","text":"<p>Purchase a domain name (e.g., <code>yourname.com</code>) from:</p> <ul> <li>Domain registrars like Namecheap, GoDaddy, or Google Domains </li> <li>Some hosting providers include a free domain in their plans  </li> </ul>"},{"location":"hosting/04_Setup/#step-4-connect-domain-to-hosting","title":"Step 4: Connect Domain to Hosting","text":"<p>To link your domain with your hosting server, update the DNS records:</p> Record Type Purpose Example A Record Points domain to server IP <code>example.com \u2192 192.168.1.1</code> CNAME Points subdomain to another domain <code>www \u2192 example.com</code> MX Handles email routing <code>mail.example.com</code> <p>Note: DNS changes can take up to 24\u201348 hours to fully update (DNS propagation).</p>"},{"location":"hosting/04_Setup/#step-5-upload-website-files","title":"Step 5: Upload Website Files","text":"<p>There are several ways to upload your project files:</p>"},{"location":"hosting/04_Setup/#option-1-file-manager-via-cpanel","title":"Option 1: File Manager (via cPanel)","text":"<ol> <li>Log in to your hosting cPanel.  </li> <li>Open File Manager \u2192 <code>public_html</code> folder.  </li> <li>Upload your files and extract (if zipped).  </li> <li>Visit your domain to see your live website.</li> </ol>"},{"location":"hosting/04_Setup/#option-2-ftp-file-transfer-protocol","title":"Option 2: FTP (File Transfer Protocol)","text":"<ol> <li>Install an FTP client like FileZilla.  </li> <li>Enter your FTP credentials from your hosting account.  </li> <li>Connect to the server.  </li> <li>Drag and drop your website files to the server\u2019s root folder.  </li> </ol>"},{"location":"hosting/04_Setup/#option-3-git-based-deployment","title":"Option 3: Git-Based Deployment","text":"<p>For providers like Netlify, Vercel, or Render:</p> <ol> <li>Push your project to GitHub / GitLab / Bitbucket.  </li> <li>Link your repository to the hosting platform.  </li> <li>The platform automatically deploys your site on every push.  </li> </ol>"},{"location":"hosting/04_Setup/#2-deployment-for-full-stack-projects","title":"2. Deployment for Full-Stack Projects","text":""},{"location":"hosting/04_Setup/#frontend-backend-example","title":"Frontend + Backend Example","text":"<p>If you built a MERN stack app:</p> <ul> <li>Frontend (React): Host on Vercel or Netlify.  </li> <li>Backend (Node.js/Express): Host on Render or Railway.  </li> <li>Database: Use MongoDB Atlas or Firebase.  </li> </ul> <p>Steps:</p> <ol> <li>Deploy backend \u2192 get API URL (e.g., <code>https://api.render.com</code>).  </li> <li>Update frontend <code>.env</code> or config with API URL.  </li> <li>Deploy frontend \u2192 site connects to live backend.  </li> </ol>"},{"location":"hosting/04_Setup/#3-continuous-deployment-cd","title":"3. Continuous Deployment (CD)","text":"<p>Most modern hosts like Vercel, Netlify, and Render support automatic deployment:</p> <ul> <li>Whenever you push new code to GitHub \u2192 your live website updates automatically. This is known as Continuous Deployment or CI/CD.</li> </ul>"},{"location":"hosting/04_Setup/#4-verifying-deployment","title":"4. Verifying Deployment","text":"<p>After deployment:</p> <ul> <li>Visit your website URL (e.g., <code>https://myproject.netlify.app</code>).  </li> <li>Check responsiveness and loading speed.  </li> <li>Test all links, forms, and APIs.  </li> <li>Enable SSL (HTTPS) from your hosting dashboard.  </li> </ul>"},{"location":"hosting/04_Setup/#5-common-deployment-issues","title":"5. Common Deployment Issues","text":"Issue Cause Solution Site not loading Wrong DNS setup Verify A/CNAME records Files not visible Uploaded to wrong directory Use <code>public_html</code> or root folder Changes not updating Cached version Clear cache / redeploy SSL not working Not enabled Activate SSL from dashboard 404 Errors Wrong paths Check file names and routes"},{"location":"hosting/05_Features/","title":"Features and Requirements of Hosting","text":""},{"location":"hosting/05_Features/#1-uptime","title":"1. Uptime","text":"<ul> <li>Meaning: Percentage of time your website stays online and accessible.</li> <li>Good Standard: 99.9% or higher.</li> <li>Why It Matters: Even small downtime can cause user loss, lower SEO ranking, and affect trust.</li> <li> <p>Example:</p> </li> <li> <p>99.9% uptime = ~43 minutes of downtime per month</p> </li> <li>99.99% uptime = ~4 minutes per month</li> </ul>"},{"location":"hosting/05_Features/#2-bandwidth","title":"2. Bandwidth","text":"<ul> <li>Meaning: Amount of data transferred between your website and users per month.</li> <li>High Bandwidth: Needed for large websites, videos, and many visitors.</li> <li>Low Bandwidth: Fine for small or static sites.</li> <li>Tip: Choose \u201cunmetered\u201d or \u201cunlimited\u201d bandwidth if your website will grow.</li> </ul>"},{"location":"hosting/05_Features/#3-storage","title":"3. Storage","text":"<ul> <li>Meaning: The total space on the server to store your files, databases, and emails.</li> <li>Static Sites: Require only a few hundred MBs.</li> <li>Dynamic / Media Sites: Need more (5GB+).</li> <li>SSD Hosting: Prefer SSD over HDD for faster performance.</li> </ul>"},{"location":"hosting/05_Features/#4-ssl-certificate","title":"4. SSL Certificate","text":"<ul> <li>Purpose: Encrypts data between the website and visitors using HTTPS.</li> <li> <p>Benefits:</p> </li> <li> <p>Increases security and trust.</p> </li> <li>Improves SEO ranking.</li> <li>Prevents data theft.</li> <li>Tip: Most hosts offer Free SSL (Let\u2019s Encrypt).</li> </ul>"},{"location":"hosting/05_Features/#5-scalability","title":"5. Scalability","text":"<ul> <li>Meaning: Ability to upgrade or increase server resources as your website grows.</li> <li>Why Important: Prevents slowdowns or crashes during traffic spikes.</li> <li>Cloud and VPS hosting are best for scalability.</li> </ul>"},{"location":"hosting/05_Features/#6-backup-options","title":"6. Backup Options","text":"<ul> <li>Automatic Backups: Scheduled daily or weekly by the host.</li> <li>Manual Backups: You can create and download copies.</li> <li>Importance: Essential for data recovery after hacks or errors.</li> <li>Tip: Always keep an offsite backup (e.g., Google Drive, Dropbox).</li> </ul>"},{"location":"hosting/05_Features/#7-security-features","title":"7. Security Features","text":"<ul> <li>Firewall: Blocks malicious traffic.</li> <li>DDoS Protection: Prevents overload attacks.</li> <li>Malware Scanning: Detects and removes infected files.</li> <li>Two-Factor Authentication (2FA): Adds login security.</li> <li>SSL Encryption: Protects data in transit.</li> </ul>"},{"location":"hosting/05_Features/#8-customer-support","title":"8. Customer Support","text":"<ul> <li>24/7 Availability: Through chat, email, or tickets.</li> <li>Technical Assistance: Helps with setup, bugs, and downtime issues.</li> <li>Knowledge Base: Tutorials and guides for self-help.</li> <li>Tip: Always test response speed before buying hosting.</li> </ul>"},{"location":"hosting/05_Features/#9-control-panel","title":"9. Control Panel","text":"<ul> <li>Purpose: Interface to manage your hosting account.</li> <li> <p>Popular Panels:</p> </li> <li> <p>cPanel (most common)</p> </li> <li>Plesk</li> <li>DirectAdmin</li> <li> <p>Features:</p> </li> <li> <p>File management</p> </li> <li>Database control</li> <li>Domain and email setup</li> <li>Backup and app installation</li> </ul>"},{"location":"hosting/05_Features/#10-email-hosting","title":"10. Email Hosting","text":"<ul> <li>Custom Email: Example \u2014 <code>info@yourdomain.com</code></li> <li>Storage and Spam Protection: Should include filters and enough space.</li> <li>Integration: Can connect with Gmail or Outlook for convenience.</li> </ul>"},{"location":"hosting/05_Features/#11-database-support","title":"11. Database Support","text":"<ul> <li>MySQL / PostgreSQL: Common for WordPress and PHP sites.</li> <li>MongoDB / NoSQL: Used in modern full-stack (MERN) apps.</li> <li>Requirement: Check version support and remote access capability.</li> </ul>"},{"location":"hosting/05_Features/#12-server-location","title":"12. Server Location","text":"<ul> <li>Closer Server = Faster Load Time</li> <li>Choose server region near your target audience.</li> <li> <p>Example:</p> </li> <li> <p>India \u2192 Mumbai server</p> </li> <li>USA \u2192 Dallas or New York server</li> <li>Some providers allow CDN integration for global speed.</li> </ul>"},{"location":"hosting/05_Features/#13-performance-optimization","title":"13. Performance Optimization","text":"<ul> <li>Caching: Reduces load on the server.</li> <li>CDN (Content Delivery Network): Delivers data faster worldwide.</li> <li>LiteSpeed / NGINX Servers: Offer higher performance than Apache.</li> <li>Resource Monitoring: Helps track CPU, RAM, and disk usage.</li> </ul>"},{"location":"hosting/05_Features/#14-pricing-and-renewal","title":"14. Pricing and Renewal","text":"<ul> <li>Introductory Offers: Cheap first year, higher renewal cost.</li> <li>Hidden Charges: Check for migration or SSL renewal fees.</li> <li>Tip: Compare 1-year vs 3-year plans for better long-term savings.</li> </ul>"},{"location":"hosting/05_Features/#15-developer-features-for-advanced-users","title":"15. Developer Features (for advanced users)","text":"<ul> <li>SSH Access: For command-line control.</li> <li>Git Integration: For version control and deployment.</li> <li>Node.js / Python / PHP Support: Depends on hosting type.</li> <li>API Access: For automation and advanced configurations.</li> </ul>"},{"location":"html/01_Basics/","title":"Basics","text":""},{"location":"html/01_Basics/#what-is-html","title":"What is HTML?","text":"<p>HTML stands for HyperText Markup Language. It is the standard markup language used to create and structure content on the web.</p>"},{"location":"html/01_Basics/#key-points","title":"Key Points:","text":"<ul> <li>HTML describes the structure of a web page using elements (also called tags).</li> <li>Elements are enclosed in angle brackets: <code>&lt;tagname&gt;...&lt;/tagname&gt;</code>.</li> <li>Most elements have an opening tag, content, and a closing tag.</li> <li>HTML files use the <code>.html</code> extension.</li> </ul>"},{"location":"html/01_Basics/#structure-of-an-html-document","title":"Structure of an HTML Document","text":""},{"location":"html/01_Basics/#basic-boilerplate","title":"Basic Boilerplate:","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;Page Title&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello World!&lt;/h1&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"html/01_Basics/#explanation-of-each-part","title":"Explanation of Each Part:","text":"Section Purpose <code>&lt;!DOCTYPE html&gt;</code> Declares the document type and version (HTML5). Must be the first line. <code>&lt;html lang=\"en\"&gt;</code> Root element of the page. <code>lang=\"en\"</code> indicates English content. <code>&lt;head&gt;</code> Contains metadata about the document (not visible content). <code>&lt;meta charset=\"UTF-8\"&gt;</code> Sets the character encoding (UTF-8 supports all characters). <code>&lt;meta name=\"viewport\"...&gt;</code> Ensures the site is mobile responsive by controlling page scaling. <code>&lt;title&gt;</code> Sets the title shown in the browser tab. <code>&lt;body&gt;</code> Contains everything visible on the page (text, images, elements, etc)."},{"location":"html/01_Basics/#basic-tags-and-their-use","title":"Basic Tags and Their Use","text":""},{"location":"html/01_Basics/#headings","title":"Headings","text":"<pre><code>&lt;h1&gt;Heading 1&lt;/h1&gt;\n&lt;h2&gt;Heading 2&lt;/h2&gt;\n&lt;!-- up to &lt;h6&gt; --&gt;\n</code></pre>"},{"location":"html/01_Basics/#paragraphs","title":"Paragraphs","text":"<pre><code>&lt;p&gt;This is a paragraph.&lt;/p&gt;\n</code></pre>"},{"location":"html/01_Basics/#links","title":"Links","text":"<pre><code>&lt;a href=\"https://example.com\"&gt;Visit Example&lt;/a&gt;\n</code></pre>"},{"location":"html/01_Basics/#images","title":"Images","text":"<pre><code>&lt;img src=\"image.jpg\" alt=\"Description of image\" /&gt;\n</code></pre>"},{"location":"html/01_Basics/#lists","title":"Lists","text":""},{"location":"html/01_Basics/#unordered","title":"Unordered:","text":"<pre><code>&lt;ul&gt;\n  &lt;li&gt;Item 1&lt;/li&gt;\n  &lt;li&gt;Item 2&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>"},{"location":"html/01_Basics/#ordered","title":"Ordered:","text":"<pre><code>&lt;ol&gt;\n  &lt;li&gt;First&lt;/li&gt;\n  &lt;li&gt;Second&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>"},{"location":"html/01_Basics/#line-break-horizontal-rule","title":"Line Break &amp; Horizontal Rule","text":"<pre><code>&lt;br&gt;   &lt;!-- Line break --&gt;\n&lt;hr&gt;   &lt;!-- Horizontal line --&gt;\n</code></pre>"},{"location":"html/01_Basics/#nesting-and-indentation","title":"Nesting and Indentation","text":"<p>Elements can be nested inside others. Always indent child elements to improve readability.</p> <pre><code>&lt;ul&gt;\n  &lt;li&gt;\n    &lt;a href=\"#\"&gt;Nested Link&lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>"},{"location":"html/01_Basics/#comments-in-html","title":"Comments in HTML","text":"<pre><code>&lt;!-- This is a comment --&gt;\n</code></pre> <p>Used to add notes or temporarily disable parts of code.</p>"},{"location":"html/02_Generic-Containers/","title":"Generic HTML Containers","text":""},{"location":"html/02_Generic-Containers/#div-block-level-container","title":"\ud83d\udd39<code>&lt;div&gt;</code> \u2014 Block-level Container","text":"<ul> <li>Block-level element</li> <li>Takes up the full width of its parent</li> <li>Starts on a new line</li> <li>Commonly used to group large sections of HTML</li> </ul>"},{"location":"html/02_Generic-Containers/#example","title":"Example","text":"<pre><code>&lt;div&gt;\n  &lt;h2&gt;Welcome&lt;/h2&gt;\n  &lt;p&gt;This is a section grouped using a div.&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"html/02_Generic-Containers/#output","title":"Output:","text":"<pre>\n\nWelcome\n<p>This is a section grouped using a div.</p>\n</pre>"},{"location":"html/02_Generic-Containers/#use-cases","title":"Use Cases:","text":"<ul> <li>Layout sections</li> <li>Wrapping multiple elements</li> <li>Styling or scripting group of elements</li> </ul>"},{"location":"html/02_Generic-Containers/#span-inline-container","title":"\ud83d\udd39 <code>&lt;span&gt;</code> \u2014 Inline Container","text":"<ul> <li>Inline element</li> <li>Takes only as much width as necessary</li> <li>Does not break into a new line</li> <li>Used to style or script inline text portions</li> </ul>"},{"location":"html/02_Generic-Containers/#example_1","title":"Example:","text":"<pre><code>&lt;p&gt;This is a &lt;span style=\"color: red;\"&gt;highlighted&lt;/span&gt; word.&lt;/p&gt;\n</code></pre>"},{"location":"html/02_Generic-Containers/#output_1","title":"Output:","text":"<pre>\n<p>This is a highlighted word.</p></pre>"},{"location":"html/02_Generic-Containers/#use-cases_1","title":"Use Cases:","text":"<ul> <li>Highlight part of a sentence</li> <li>Apply CSS to a few words</li> <li>Target with JavaScript for inline elements</li> </ul>"},{"location":"html/03_Text-Content/","title":"Text Content","text":""},{"location":"html/03_Text-Content/#paragraph","title":"\ud83d\udd39Paragraph","text":"<pre><code>&lt;p&gt;This is a paragraph&lt;/p&gt;\n&lt;br /&gt;\n&lt;p&gt;This is a paragraph 2&lt;/p&gt;\n&lt;hr /&gt;\n</code></pre> <ul> <li><code>&lt;p&gt;</code>: Paragraph Tag</li> <li><code>&lt;br /&gt;</code>: Break Rule</li> <li><code>&lt;hr /&gt;</code>: Horizontal Rule</li> </ul>"},{"location":"html/03_Text-Content/#output","title":"Output:","text":"<pre>\n<p>This is a paragraph</p>\n\n<p>This is a paragraph 2</p>\n</pre>"},{"location":"html/03_Text-Content/#headings","title":"\ud83d\udd39Headings","text":"<pre><code>&lt;h1&gt;Heading 1&lt;/h1&gt;\n&lt;h2&gt;Heading 2&lt;/h2&gt;\n&lt;h3&gt;Heading 3&lt;/h3&gt;\n&lt;h4&gt;Heading 4&lt;/h4&gt;\n&lt;h5&gt;Heading 5&lt;/h5&gt;\n&lt;h6&gt;Heading 6&lt;/h6&gt;\n</code></pre>"},{"location":"html/03_Text-Content/#output_1","title":"Output:Heading 3","text":"<pre>\nHeading 1\nHeading 2\n\nHeading 4\nHeading 5\nHeading 6</pre>"},{"location":"html/04_Lists/","title":"Lists","text":""},{"location":"html/04_Lists/#1-unordered-list-ul","title":"1. Unordered List: <code>&lt;ul&gt;</code>","text":"<ul> <li>Used for lists without a specific order</li> <li>List items are marked with bullets by default</li> </ul> <pre><code>&lt;ul&gt;\n  &lt;li&gt;HTML&lt;/li&gt;\n  &lt;li&gt;CSS&lt;/li&gt;\n  &lt;li&gt;JavaScript&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>"},{"location":"html/04_Lists/#output","title":"Output:","text":"<pre>\n<ul><li>HTML</li><li>CSS</li><li>JavaScript</li></ul></pre>"},{"location":"html/04_Lists/#2-ordered-list-ol","title":"2. Ordered List: <code>&lt;ol&gt;</code>","text":"<ul> <li>Used for lists where the order matters</li> <li>List items are marked with numbers by default</li> </ul> <pre><code>&lt;ol&gt;\n  &lt;li&gt;Wake up&lt;/li&gt;\n  &lt;li&gt;Brush teeth&lt;/li&gt;\n  &lt;li&gt;Start coding&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>"},{"location":"html/04_Lists/#output_1","title":"Output:","text":"<pre><ol><li>Wake up</li><li>Brush teeth</li><li>Start coding</li></ol></pre>"},{"location":"html/04_Lists/#type-attribute","title":"Type Attribute:","text":"<p>You can use the type attribute to change numbering:</p> <pre><code>&lt;ol type=\"A\"&gt;\n  &lt;li&gt;Step One&lt;/li&gt;\n  &lt;li&gt;Step Two&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre> <p>Types:</p> <ul> <li>1 \u2013 Default (numbers)</li> <li>A \u2013 Uppercase letters</li> <li>a \u2013 Lowercase letters</li> <li>I \u2013 Uppercase Roman numerals</li> <li>i \u2013 Lowercase Roman numerals</li> </ul>"},{"location":"html/04_Lists/#3-description-list-dl","title":"3. Description List: <code>&lt;dl&gt;</code>","text":"<ul> <li>Used for name/value pairs such as terms and definitions</li> </ul>"},{"location":"html/04_Lists/#syntax","title":"Syntax:","text":"<pre><code>&lt;dl&gt;\n  &lt;dt&gt;HTML&lt;/dt&gt;\n  &lt;dd&gt;HyperText Markup Language&lt;/dd&gt;\n  &lt;dt&gt;CSS&lt;/dt&gt;\n  &lt;dd&gt;Cascading Style Sheets&lt;/dd&gt;\n&lt;/dl&gt;\n</code></pre> <ul> <li><code>&lt;dl&gt;</code> \u2014 Description List</li> <li><code>&lt;dt&gt;</code> \u2014 Description Term</li> <li><code>&lt;dd&gt;</code> - Description Definition</li> </ul>"},{"location":"html/04_Lists/#output_2","title":"Output:","text":"<pre>\nHTMLHyperText Markup LanguageCSSCascading Style Sheets</pre>"},{"location":"html/04_Lists/#nesting-lists","title":"Nesting Lists","text":"<p>Lists can be nested inside one another. Used for:</p> <ul> <li>Navigation menus</li> <li>Step-by-step instructions</li> <li>Glossaries</li> <li>FAQs</li> <li>Feature lists</li> </ul> <pre><code>&lt;ol&gt;\n  &lt;li&gt;Frontend\n    &lt;ul&gt;\n      &lt;li&gt;HTML&lt;/li&gt;\n      &lt;li&gt;CSS&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li&gt;Backend\n    &lt;ul&gt;\n        &lt;li&gt;NodeJS&lt;/li&gt;\n        &lt;li&gt;ExpressJS&lt;/li&gt;\n        &lt;li&gt;MySQL&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  and much more!\n&lt;/ol&gt;\n</code></pre>"},{"location":"html/04_Lists/#output_3","title":"Output:","text":"<pre><ol><li>Frontend<ul><li>HTML</li><li>CSS</li><li>JavaScript</li></ul></li><li>Backend<ul><li>NodeJS</li><li>ExpressJS</li><li>MySQL</li></ul></li></ol>and much more!</pre>"},{"location":"html/05_Inline-and-Block/","title":"Block and Inline Elements","text":""},{"location":"html/05_Inline-and-Block/#1-block-level-elements","title":"1. Block-Level Elements","text":"<ul> <li>Always start on a new line</li> <li>Occupy the full width of the parent container</li> <li>Can contain other block or inline elements</li> <li>Commonly used for layout and structure</li> </ul>"},{"location":"html/05_Inline-and-Block/#common-block-elements","title":"Common Block Elements:","text":"<ul> <li><code>&lt;div&gt;</code></li> <li><code>&lt;p&gt;</code></li> <li><code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code></li> <li><code>&lt;ul&gt;</code>, <code>&lt;ol&gt;</code>, <code>&lt;li&gt;</code></li> <li><code>&lt;section&gt;</code>, <code>&lt;article&gt;</code>, <code>&lt;header&gt;</code>, <code>&lt;footer&gt;</code></li> <li><code>&lt;table&gt;</code>, <code>&lt;form&gt;</code>, <code>&lt;nav&gt;</code></li> </ul>"},{"location":"html/05_Inline-and-Block/#example","title":"Example:","text":"<pre><code>&lt;div&gt;\n  &lt;h2&gt;Heading&lt;/h2&gt;\n  &lt;p&gt;This is a paragraph inside a block-level div.&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"html/05_Inline-and-Block/#output","title":"Output:","text":"<pre>\nHeading<p>This is a paragraph inside a block-level div.</p></pre>"},{"location":"html/05_Inline-and-Block/#2-inline-elements","title":"2. Inline Elements","text":"<ul> <li>Do not start on a new line</li> <li>Occupy only as much width as necessary</li> <li>Can only contain other inline elements or text</li> <li>Commonly used for formatting small chunks of text</li> </ul>"},{"location":"html/05_Inline-and-Block/#common-inline-elements","title":"Common Inline Elements:","text":"<ul> <li><code>&lt;span&gt;</code></li> <li><code>&lt;a&gt;</code></li> <li><code>&lt;strong&gt;</code>, <code>&lt;em&gt;</code>, <code>&lt;b&gt;</code>, <code>&lt;i&gt;</code></li> <li><code>&lt;img&gt;</code></li> <li><code>&lt;input&gt;</code>, <code>&lt;label&gt;</code></li> <li><code>&lt;code&gt;</code>, <code>&lt;mark&gt;</code>, <code>&lt;abbr&gt;</code></li> </ul>"},{"location":"html/05_Inline-and-Block/#example_1","title":"Example:","text":"<pre><code>&lt;p&gt;This is a &lt;span style=\"color: red;\"&gt;highlighted&lt;/span&gt; word.&lt;/p&gt;\n</code></pre>"},{"location":"html/05_Inline-and-Block/#output_1","title":"Output:","text":"<pre>\n<p>This is a highlighted word.</p></pre>"},{"location":"html/05_Inline-and-Block/#3-mixed-example","title":"3. Mixed Example","text":"<pre><code>&lt;div&gt;\n  &lt;p&gt;This is a &lt;strong&gt;bold&lt;/strong&gt; word and a &lt;a href=\"#\"&gt;link&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"html/05_Inline-and-Block/#output_2","title":"Output:","text":"<pre>\n<p>This is a bold word and a link.</p></pre>"},{"location":"html/05_Inline-and-Block/#4-converting-display-type-with-css","title":"4. Converting Display Type with CSS","text":"<p>You can convert block elements to inline or vice versa using CSS:</p> <pre><code>&lt;style&gt;\n  div {\n    display: inline;\n  }\n\n  span {\n    display: block;\n  }\n&lt;/style&gt;\n</code></pre>"},{"location":"html/06_Forms/","title":"Forms","text":""},{"location":"html/06_Forms/#1-basic-form-structure","title":"1. Basic Form Structure","text":"<pre><code>&lt;form action=\"/submit\" method=\"POST\"&gt;\n  &lt;label for=\"name\"&gt;Name:&lt;/label&gt;\n  &lt;input type=\"text\" id=\"name\" name=\"username\"&gt;\n  &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"html/06_Forms/#output","title":"Output:","text":"<pre>\nName:\n\nSubmit\n</pre>"},{"location":"html/06_Forms/#2-common-input-types","title":"2. Common Input Types","text":"<pre><code>&lt;input type=\"text\"&gt;\n&lt;input type=\"password\"&gt;\n&lt;input type=\"email\"&gt;\n&lt;input type=\"number\"&gt;\n&lt;input type=\"date\"&gt;\n&lt;input type=\"file\"&gt;\n&lt;input type=\"checkbox\"&gt;\n&lt;input type=\"radio\"&gt;\n&lt;input type=\"submit\"&gt;\n&lt;input type=\"reset\"&gt;\n</code></pre>"},{"location":"html/06_Forms/#output_1","title":"Output:","text":""},{"location":"html/06_Forms/#3-label-label","title":"3. Label: <code>&lt;label&gt;</code>","text":"<ul> <li>Associates text with a specific input</li> <li>Clicking the label focuses the input field</li> </ul> <pre><code>&lt;label for=\"email\"&gt;Email:&lt;/label&gt;\n&lt;input type=\"email\" id=\"email\" name=\"email\"&gt;\n</code></pre>"},{"location":"html/06_Forms/#output_2","title":"Output:","text":"<pre>\nEmail:\n\n</pre>"},{"location":"html/06_Forms/#4-select-dropdown-select","title":"4. Select Dropdown: <code>&lt;select&gt;</code>","text":"<pre><code>&lt;label for=\"language\"&gt;Choose a language:&lt;/label&gt;\n&lt;select id=\"language\" name=\"language\"&gt;\n  &lt;option value=\"html\"&gt;HTML&lt;/option&gt;\n  &lt;option value=\"css\"&gt;CSS&lt;/option&gt;\n  &lt;option value=\"js\"&gt;JavaScript&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>"},{"location":"html/06_Forms/#output_3","title":"Output:","text":"<pre>\nChoose a language:\n\n  HTML\n  CSS\n  JavaScript\n\n</pre>"},{"location":"html/06_Forms/#5-text-area-textarea","title":"5. Text Area: <code>&lt;textarea&gt;</code>","text":"<p>Used for multi-line input (e.g., comments or messages)</p> <pre><code>&lt;label for=\"msg\"&gt;Message:&lt;/label&gt;\n&lt;textarea id=\"msg\" name=\"message\" rows=\"4\" cols=\"30\"&gt;&lt;/textarea&gt;\n</code></pre>"},{"location":"html/06_Forms/#output_4","title":"Output:","text":"<pre>\nMessage:\n</pre>"},{"location":"html/06_Forms/#6-radio-buttons-and-checkboxes","title":"6. Radio Buttons and Checkboxes","text":"<pre><code>&lt;label&gt;\n  &lt;input type=\"radio\" name=\"gender\" value=\"male\"&gt; Male\n&lt;/label&gt;\n&lt;label&gt;\n  &lt;input type=\"radio\" name=\"gender\" value=\"female\"&gt; Female\n&lt;/label&gt;\n\n&lt;label&gt;\n  &lt;input type=\"checkbox\" name=\"subscribe\" checked&gt; Subscribe to newsletter\n&lt;/label&gt;\n</code></pre>"},{"location":"html/06_Forms/#output_5","title":"Output:","text":"<pre>\n Male\n Female\n\n Subscribe to newsletter\n</pre>"},{"location":"html/06_Forms/#7-fieldset-and-legend","title":"7. Fieldset and Legend","text":"<ul> <li>Group related form elements together</li> </ul> <pre><code>&lt;fieldset&gt;\n  &lt;legend&gt;Login Info&lt;/legend&gt;\n  &lt;label&gt;Username: &lt;input type=\"text\" name=\"user\"&gt;&lt;/label&gt;&lt;br&gt;\n  &lt;label&gt;Password: &lt;input type=\"password\" name=\"pass\"&gt;&lt;/label&gt;\n&lt;/fieldset&gt;\n</code></pre>"},{"location":"html/06_Forms/#output_6","title":"Output:","text":"<pre>\n\n  Login Info\n  Username: \n  Password: \n\n</pre>"},{"location":"html/06_Forms/#8-button-button","title":"8. Button: <code>&lt;button&gt;</code>","text":"<pre><code>&lt;button type=\"submit\"&gt;Submit Form&lt;/button&gt;\n&lt;button type=\"reset\"&gt;Reset Form&lt;/button&gt;\n&lt;button type=\"button\" onclick=\"alert('Clicked!')\"&gt;Click Me&lt;/button&gt;\n</code></pre>"},{"location":"html/06_Forms/#output_7","title":"Output:","text":"<pre>\nSubmit Form\nReset Form\nClick Me\n</pre>"},{"location":"html/06_Forms/#9-form-attributes","title":"9. Form Attributes","text":"Attribute Description <code>action</code> URL where the form data will be sent <code>method</code> HTTP method to use (<code>GET</code> or <code>POST</code>) <code>autocomplete</code> Enables or disables autocomplete <code>novalidate</code> Disables default browser validation"},{"location":"html/06_Forms/#10-input-attributes","title":"10. Input Attributes","text":"Attribute Description <code>type</code> Specifies the input type <code>name</code> Name for form submission <code>value</code> Pre-filled value <code>placeholder</code> Hint text inside input <code>required</code> Makes input mandatory <code>readonly</code> Makes input non-editable <code>disabled</code> Disables the input <code>min</code>, <code>max</code> Minimum/maximum values (for number/date) <code>pattern</code> Regex pattern for validation"},{"location":"html/07_Media/","title":"Media Elements","text":""},{"location":"html/07_Media/#1-image-img","title":"1. Image: <code>&lt;img&gt;</code>","text":"<ul> <li>Embeds images into the webpage</li> <li>Inline element</li> <li>Requires <code>src</code> and <code>alt</code> attributes</li> </ul> <pre><code>&lt;img src=\"https://images.pexels.com/photos/1563356/pexels-photo-1563356.jpeg\" alt=\"Image\" width=\"200\" height=\"100\"&gt;\n</code></pre>"},{"location":"html/07_Media/#output","title":"Output:","text":""},{"location":"html/07_Media/#2-audio-audio","title":"2. Audio: <code>&lt;audio&gt;</code>","text":"<ul> <li>Embeds audio files like <code>.mp3</code>, <code>.ogg</code>, etc.</li> <li>Requires <code>&lt;source&gt;</code> inside</li> <li>Needs <code>controls</code> for play/pause UI</li> </ul> <pre><code>&lt;audio controls&gt;\n  &lt;source src=\"music.mp3\" type=\"audio/mpeg\"&gt;\n  Your browser does not support the audio element.\n&lt;/audio&gt;\n</code></pre>"},{"location":"html/07_Media/#output_1","title":"Output:","text":"<pre>\n\n  \n  Your browser does not support the audio element.\n\n</pre>"},{"location":"html/07_Media/#3-video-video","title":"3. Video: <code>&lt;video&gt;</code>","text":"<ul> <li>Embeds video content like <code>.mp4</code>, <code>.webm</code></li> <li>Use <code>controls</code>, <code>autoplay</code>, <code>loop</code>, <code>muted</code>, and <code>poster</code> attributes as needed</li> </ul> <pre><code>&lt;video width=\"320\" height=\"240\" controls&gt;\n  &lt;source src=\"video.mp4\" type=\"video/mp4\"&gt;\n  Your browser does not support the video tag.\n&lt;/video&gt;\n</code></pre>"},{"location":"html/07_Media/#output_2","title":"Output:","text":"<pre>\n\n  \n  Your browser does not support the video tag.\n\n</pre>"},{"location":"html/07_Media/#4-multiple-sources-source","title":"4. Multiple Sources: <code>&lt;source&gt;</code>","text":"<ul> <li>Inside <code>&lt;audio&gt;</code> or <code>&lt;video&gt;</code></li> <li>Used to provide format fallback for cross-browser compatibility</li> </ul> <pre><code>&lt;video controls&gt;\n  &lt;source src=\"video.mp4\" type=\"video/mp4\"&gt;\n  &lt;source src=\"video.webm\" type=\"video/webm\"&gt;\n  Your browser does not support the video tag.\n&lt;/video&gt;\n</code></pre>"},{"location":"html/07_Media/#output_3","title":"Output:","text":"<pre>\n\n  \n  \n  Your browser does not support the video tag.\n\n</pre>"},{"location":"html/07_Media/#5-subtitles-and-captions-track","title":"5. Subtitles and Captions: <code>&lt;track&gt;</code>","text":"<ul> <li>Adds subtitles, captions, descriptions, or metadata to video</li> <li>Placed inside <code>&lt;video&gt;</code></li> </ul> <pre><code>&lt;video controls&gt;\n  &lt;source src=\"video.mp4\" type=\"video/mp4\"&gt;\n  &lt;track src=\"subtitles.vtt\" kind=\"subtitles\" srclang=\"en\" label=\"English\" default&gt;\n&lt;/video&gt;\n</code></pre>"},{"location":"html/07_Media/#output_4","title":"Output:","text":""},{"location":"html/07_Media/#6-canvas-canvas","title":"6. Canvas: <code>&lt;canvas&gt;</code>","text":"<ul> <li>Used to draw graphics via JavaScript</li> <li>Requires a JS script to render anything</li> </ul> <pre><code>&lt;canvas id=\"myCanvas\" width=\"200\" height=\"100\"&gt;&lt;/canvas&gt;\n\n&lt;script&gt;\n  const canvas = document.getElementById('myCanvas');\n  const ctx = canvas.getContext('2d');\n  ctx.fillStyle = \"red\";\n  ctx.fillRect(20, 20, 150, 50);\n&lt;/script&gt;\n</code></pre>"},{"location":"html/07_Media/#output_5","title":"Output:","text":""},{"location":"html/07_Media/#7-iframe-iframe","title":"7. Iframe: <code>&lt;iframe&gt;</code>","text":"<ul> <li>Embeds other web content like maps, videos, or sites</li> <li>Use <code>loading=\"lazy\"</code> for performance</li> </ul> <pre><code>&lt;iframe src=\"https://example.com\" width=\"600\" height=\"300\" loading=\"lazy\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"html/07_Media/#output_6","title":"Output:","text":""},{"location":"html/07_Media/#9-lazy-loading-media","title":"9. Lazy Loading Media","text":"<ul> <li>Helps improve performance by deferring image or iframe loading</li> <li>Supported in modern browsers</li> </ul> <pre><code>&lt;img src=\"https://images.pexels.com/photos/1563356/pexels-photo-1563356.jpeg\" loading=\"lazy\" alt=\"Lazy Image\"&gt;\n&lt;iframe src=\"https://example.com\" loading=\"lazy\"&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"html/07_Media/#output_7","title":"Output:","text":""},{"location":"html/08_Semantic/","title":"Semantic Tags","text":"<p>Semantic tags clearly describe the meaning of the content inside them \u2014 making HTML more readable, accessible, and SEO-friendly.</p> <p>They help both developers and browsers understand the structure and purpose of the content.</p>"},{"location":"html/08_Semantic/#1-header","title":"1. <code>&lt;header&gt;</code>","text":"<ul> <li>Represents the header of a section or page</li> <li>Typically contains logo, navigation, or page titles</li> </ul> <pre><code>&lt;header&gt;\n  &lt;h1&gt;My Portfolio&lt;/h1&gt;\n  &lt;nav&gt;\n    &lt;a href=\"#projects\"&gt;Projects&lt;/a&gt;\n    &lt;a href=\"#contact\"&gt;Contact&lt;/a&gt;\n  &lt;/nav&gt;\n&lt;/header&gt;\n</code></pre>"},{"location":"html/08_Semantic/#output","title":"Output:","text":"<pre>\nMy PortfolioProjects\nContact</pre>"},{"location":"html/08_Semantic/#2-nav","title":"2. <code>&lt;nav&gt;</code>","text":"<ul> <li>Defines navigation links</li> <li>Typically used inside a <code>&lt;header&gt;</code>, <code>&lt;aside&gt;</code>, or separately</li> </ul> <pre><code>&lt;nav&gt;\n  &lt;a href=\"/\"&gt;Home&lt;/a&gt;\n  &lt;a href=\"/about\"&gt;About&lt;/a&gt;\n  &lt;a href=\"/services\"&gt;Services&lt;/a&gt;\n&lt;/nav&gt;\n</code></pre>"},{"location":"html/08_Semantic/#output_1","title":"Output:","text":"<pre>\nHome\nAbout\nServices</pre>"},{"location":"html/08_Semantic/#3-main","title":"3. <code>&lt;main&gt;</code>","text":"<ul> <li>Represents the main content of the page</li> <li>Should only be used once per page</li> </ul> <pre><code>&lt;main&gt;\n  &lt;h2&gt;Welcome to My Website&lt;/h2&gt;\n  &lt;p&gt;This is where the main content goes.&lt;/p&gt;\n&lt;/main&gt;\n</code></pre>"},{"location":"html/08_Semantic/#output_2","title":"Output:","text":"<pre>\nWelcome to My Website<p>This is where the main content goes.</p></pre>"},{"location":"html/08_Semantic/#4-section","title":"4. <code>&lt;section&gt;</code>","text":"<ul> <li>Represents a standalone section of content</li> <li>Useful for grouping related content blocks</li> </ul> <pre><code>&lt;section&gt;\n  &lt;h2&gt;Projects&lt;/h2&gt;\n  &lt;p&gt;Here are some of my recent works.&lt;/p&gt;\n&lt;/section&gt;\n</code></pre>"},{"location":"html/08_Semantic/#output_3","title":"Output:","text":"<pre>\nProjects<p>Here are some of my recent works.</p></pre>"},{"location":"html/08_Semantic/#5-article","title":"5. <code>&lt;article&gt;</code>","text":"<ul> <li>Represents independent, reusable content \u2014 like blog posts, news articles, or comments</li> </ul> <pre><code>&lt;article&gt;\n  &lt;h2&gt;Blog Post Title&lt;/h2&gt;\n  &lt;p&gt;This is the content of the blog post.&lt;/p&gt;\n&lt;/article&gt;\n</code></pre>"},{"location":"html/08_Semantic/#output_4","title":"Output:","text":"<pre>\nBlog Post Title<p>This is the content of the blog post.</p></pre>"},{"location":"html/08_Semantic/#6-aside","title":"6. <code>&lt;aside&gt;</code>","text":"<ul> <li>Represents side content \u2014 like sidebars, ads, or related links</li> <li>Should be related to the main content</li> </ul> <pre><code>&lt;aside&gt;\n  &lt;h3&gt;Related Posts&lt;/h3&gt;\n  &lt;ul&gt;\n    &lt;li&gt;&lt;a href=\"#\"&gt;Post 1&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#\"&gt;Post 2&lt;/a&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/aside&gt;\n</code></pre>"},{"location":"html/08_Semantic/#output_5","title":"Output:Related Posts","text":"<pre>\n<ul><li>Post 1</li><li>Post 2</li></ul></pre>"},{"location":"html/08_Semantic/#7-footer","title":"7. <code>&lt;footer&gt;</code>","text":"<ul> <li>Represents the footer of a section or page</li> <li>Commonly includes copyright, contact info, or navigation</li> </ul> <pre><code>&lt;footer&gt;\n  &lt;p&gt;&amp;copy; 2025 Aman Verma. All rights reserved.&lt;/p&gt;\n&lt;/footer&gt;\n</code></pre>"},{"location":"html/08_Semantic/#output_6","title":"Output:","text":"<pre>\n<p>\u00a9 2025 Aman Verma. All rights reserved.</p></pre>"},{"location":"html/08_Semantic/#8-figure-and-figcaption","title":"8. <code>&lt;figure&gt;</code> and <code>&lt;figcaption&gt;</code>","text":"<ul> <li>Used to wrap media (image, chart, video) and its caption</li> </ul> <pre><code>&lt;figure&gt;\n  &lt;img src=\"https://as1.ftcdn.net/v2/jpg/05/40/08/54/1000_F_540085480_WN26Tz5VOFRwdPsLmK73JXNuSYsi2luw.jpg\" alt=\"Project Screenshot\"&gt;\n  &lt;figcaption&gt;Screenshot of my latest project&lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre>"},{"location":"html/08_Semantic/#output_7","title":"Output:","text":"<pre>\nScreenshot of my latest project</pre>"},{"location":"html/08_Semantic/#9-mark-highlight-text","title":"9. <code>&lt;mark&gt;</code> (Highlight Text)","text":"<ul> <li>Highlights or emphasizes text</li> </ul> <pre><code>&lt;p&gt;I want to &lt;mark&gt;highlight&lt;/mark&gt; this word.&lt;/p&gt;\n</code></pre>"},{"location":"html/08_Semantic/#output_8","title":"Output:","text":"<pre><p>I want to highlight this word.</p></pre>"},{"location":"html/09_Entities/","title":"Entities and Code Tags","text":""},{"location":"html/09_Entities/#1-html-entities","title":"1. HTML Entities","text":"<p>HTML Entities are used to display reserved characters that would otherwise be interpreted as HTML.</p>"},{"location":"html/09_Entities/#common-entities","title":"Common Entities:","text":"Character Entity Code Description <code>&lt;</code> <code>&amp;lt;</code> Less than <code>&gt;</code> <code>&amp;gt;</code> Greater than <code>&amp;</code> <code>&amp;amp;</code> Ampersand <code>\"</code> <code>&amp;quot;</code> Double quote <code>'</code> <code>&amp;apos;</code> Single quote <code></code> <code>&amp;nbsp;</code> Non-breaking space"},{"location":"html/09_Entities/#example","title":"Example:","text":"<pre><code>&lt;p&gt;5 &amp;lt; 10 &amp;amp;&amp;amp; 10 &amp;gt; 5&lt;/p&gt;\n</code></pre>"},{"location":"html/09_Entities/#output","title":"Output:","text":"<pre>\n<p>5 &lt; 10 &amp;&amp; 10 &gt; 5</p></pre>"},{"location":"html/09_Entities/#2-code-inline-code","title":"2. <code>&lt;code&gt;</code> \u2014 Inline Code","text":"<ul> <li>Displays a short snippet of code</li> <li>Renders using a monospaced font</li> <li>Usually used inside paragraphs</li> </ul> <pre><code>&lt;p&gt;Use the &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; tag for grouping content.&lt;/p&gt;\n</code></pre>"},{"location":"html/09_Entities/#output_1","title":"Output:","text":"<pre>\n<p>Use the <code>&lt;section&gt;</code> tag for grouping content.</p></pre>"},{"location":"html/09_Entities/#3-pre-preformatted-text","title":"3. <code>&lt;pre&gt;</code> \u2014 Preformatted Text","text":"<ul> <li>Preserves whitespace, tabs, and line breaks</li> <li>Often used to display blocks of code</li> </ul> <pre><code>&lt;pre&gt;\nfunction greet(name) {\n  console.log(\"Hello, \" + name);\n}\n&lt;/pre&gt;\n</code></pre>"},{"location":"html/09_Entities/#output_2","title":"Output:","text":"<pre>\nfunction greet(name) {\n  console.log(\"Hello, \" + name);\n}\n</pre>"},{"location":"html/09_Entities/#4-kbd-keyboard-input","title":"4. <code>&lt;kbd&gt;</code> \u2014 Keyboard Input","text":"<ul> <li>Used to show what the user should type</li> <li>Usually renders in a monospace font</li> </ul> <pre><code>&lt;p&gt;Press &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;C&lt;/kbd&gt; to copy.&lt;/p&gt;\n</code></pre>"},{"location":"html/09_Entities/#output_3","title":"Output:","text":"<pre>\n<p>Press Ctrl + C to copy.</p></pre>"},{"location":"html/09_Entities/#5-samp-sample-output","title":"5. <code>&lt;samp&gt;</code> \u2014 Sample Output","text":"<ul> <li>Represents sample output from a program</li> </ul> <pre><code>&lt;p&gt;Output: &lt;samp&gt;Hello, World!&lt;/samp&gt;&lt;/p&gt;\n</code></pre>"},{"location":"html/09_Entities/#output_4","title":"Output:","text":"<pre>\n<p>Output: Hello, World!</p></pre>"},{"location":"html/09_Entities/#6-var-variable-name","title":"6. <code>&lt;var&gt;</code> \u2014 Variable Name","text":"<ul> <li>Used to represent a variable in programming or math</li> </ul> <pre><code>&lt;p&gt;The value of &lt;var&gt;x&lt;/var&gt; is 10.&lt;/p&gt;\n</code></pre>"},{"location":"html/09_Entities/#output_5","title":"Output:","text":"<pre>\n<p>The value of x is 10.</p></pre>"},{"location":"js/01_Basics/","title":"Introduction","text":"<p>JavaScript (JS) is a high-level, interpreted programming language used to make web pages interactive \u2014 handling user events, updating content dynamically, validating forms, and much more.</p>"},{"location":"js/01_Basics/#1-embedding-javascript","title":"1. Embedding JavaScript","text":""},{"location":"js/01_Basics/#a-inline","title":"a) Inline","text":"<pre><code>&lt;button onclick=\"alert('Clicked!')\"&gt;Click Me&lt;/button&gt;\n</code></pre>"},{"location":"js/01_Basics/#b-internal-inside-script-tag","title":"b) Internal (inside <code>&lt;script&gt;</code> tag)","text":"<pre><code>&lt;script&gt;\n  console.log(\"Hello, world!\");\n&lt;/script&gt;\n</code></pre>"},{"location":"js/01_Basics/#c-external-best-practice","title":"c) External (best practice)","text":"<pre><code>&lt;script src=\"script.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"js/01_Basics/#2-output-methods","title":"2. Output Methods","text":"Method Description <code>console.log()</code> Logs to browser console <code>alert()</code> Shows popup alert <code>document.write()</code> Writes directly to the document (not recommended) <code>innerText</code> / <code>innerHTML</code> Updates page content <pre><code>console.log(\"Debug message\");\nalert(\"Welcome!\");\n</code></pre>"},{"location":"js/01_Basics/#3-variables","title":"3. Variables","text":"<pre><code>let name = \"Aman\";\nconst PI = 3.14;\nvar age = 15;\n</code></pre> <ul> <li><code>let</code> \u2013 block-scoped (preferred)</li> <li><code>const</code> \u2013 cannot be reassigned</li> <li><code>var</code> \u2013 function-scoped (avoid using)</li> </ul>"},{"location":"js/01_Basics/#4-data-types","title":"4. Data Types","text":"<ul> <li>String \u2014 <code>\"Hello\"</code></li> <li>Number \u2014 <code>42</code>, <code>3.14</code></li> <li>Boolean \u2014 <code>true</code>, <code>false</code></li> <li>Null \u2014 <code>null</code></li> <li>Undefined \u2014 <code>undefined</code></li> <li>Object \u2014 <code>{ key: \"value\" }</code></li> <li>Array \u2014 <code>[1, 2, 3]</code></li> </ul> <pre><code>let x = \"Hi\";           // string\nlet y = 123;            // number\nlet isActive = true;    // boolean\nlet user = { name: \"Aman\", age: 16 }; // object\n</code></pre>"},{"location":"js/01_Basics/#5-comments","title":"5. Comments","text":"<pre><code>// Single-line comment\n\n/*\n  Multi-line\n  comment\n*/\n</code></pre>"},{"location":"js/01_Basics/#6-basic-operators","title":"6. Basic Operators","text":"<pre><code>let a = 5 + 3;     // 8\nlet b = 10 - 4;    // 6\nlet c = 2 * 3;     // 6\nlet d = 8 / 2;     // 4\nlet e = 9 % 4;     // 1\nlet f = 2 ** 3;    // 8 (exponent)\n</code></pre>"},{"location":"js/01_Basics/#7-basic-dom-manipulation","title":"7. Basic DOM Manipulation","text":"<pre><code>&lt;p id=\"demo\"&gt;Text&lt;/p&gt;\n&lt;script&gt;\n  document.getElementById(\"demo\").innerText = \"Changed!\";\n&lt;/script&gt;\n</code></pre> <p>JavaScript can select, modify, and respond to HTML elements.</p>"},{"location":"js/01_Basics/#8-why-javascript","title":"8. Why JavaScript?","text":"<ul> <li>Runs in the browser (no install needed)</li> <li>Works with HTML &amp; CSS for full interactivity</li> <li>Essential for modern web apps (forms, animation, logic, APIs)</li> </ul>"},{"location":"js/02_Variables/","title":"Variables","text":"<p>Variables are used to store data that can be referenced and manipulated later.</p>"},{"location":"js/02_Variables/#1-declaration-keywords","title":"1. Declaration Keywords","text":""},{"location":"js/02_Variables/#a-var","title":"a) <code>var</code>","text":"<ul> <li>Function-scoped</li> <li>Hoisted (can be used before declaration, but unsafe)</li> <li>Avoid using in modern code</li> </ul> <pre><code>var x = 10;\n</code></pre>"},{"location":"js/02_Variables/#b-let","title":"b) <code>let</code>","text":"<ul> <li>Block-scoped</li> <li>Can be reassigned</li> <li>Preferred for values that change</li> </ul> <pre><code>let count = 5;\ncount = 6;\n</code></pre>"},{"location":"js/02_Variables/#c-const","title":"c) <code>const</code>","text":"<ul> <li>Block-scoped</li> <li>Cannot be reassigned</li> <li>Must be initialized when declared</li> <li>Use for constants or fixed references</li> </ul> <pre><code>const PI = 3.14;\n// PI = 3.1415 \u274c Error\n</code></pre>"},{"location":"js/02_Variables/#2-naming-rules","title":"2. Naming Rules","text":"<ul> <li>Case-sensitive</li> <li>Must start with letter, <code>_</code>, or <code>$</code></li> <li>Can\u2019t start with a number</li> <li>Use camelCase for naming (<code>userName</code>, <code>totalPrice</code>)</li> </ul> <pre><code>let userName = \"Emma\";\nconst MAX_SCORE = 100;\n</code></pre>"},{"location":"js/02_Variables/#3-hoisting-behavior","title":"3. Hoisting Behavior","text":"<ul> <li><code>var</code> is hoisted (declared at top of scope), but value is <code>undefined</code></li> <li><code>let</code> and <code>const</code> are hoisted but not initialized (Temporal Dead Zone)</li> </ul> <pre><code>console.log(x); // undefined\nvar x = 10;\n\nconsole.log(y); // ReferenceError\nlet y = 20;\n</code></pre>"},{"location":"js/02_Variables/#4-reassignment","title":"4. Reassignment","text":"Keyword Reassignable Scope <code>var</code> \u2705 Function <code>let</code> \u2705 Block <code>const</code> \u274c Block"},{"location":"js/02_Variables/#5-constants-with-objects-and-arrays","title":"5. Constants with Objects and Arrays","text":"<p><code>const</code> prevents reassignment of the variable, not mutation of its contents.</p> <pre><code>const user = { name: \"Rahul\" };\nuser.name = \"Dev\"; // \u2705 Allowed\n\nconst arr = [1, 2, 3];\narr.push(4); // \u2705 Allowed\n</code></pre>"},{"location":"js/03_Data-Types/","title":"Data Types","text":"<p>JavaScript has 8 basic data types, divided into primitive and reference (non-primitive) types.</p>"},{"location":"js/03_Data-Types/#1-primitive-types-immutable","title":"1. Primitive Types (Immutable)","text":"<p>Stored directly in the variable.</p>"},{"location":"js/03_Data-Types/#a-string","title":"a) <code>String</code>","text":"<p>Text data.</p> <pre><code>let name = \"Henry\";\n</code></pre>"},{"location":"js/03_Data-Types/#b-number","title":"b) <code>Number</code>","text":"<p>Both integers and floats.</p> <pre><code>let age = 15;\nlet pi = 3.14;\n</code></pre>"},{"location":"js/03_Data-Types/#c-boolean","title":"c) <code>Boolean</code>","text":"<p>Logical values.</p> <pre><code>let isOnline = true;\n</code></pre>"},{"location":"js/03_Data-Types/#d-undefined","title":"d) <code>undefined</code>","text":"<p>A variable declared but not assigned.</p> <pre><code>let x;\nconsole.log(x); // undefined\n</code></pre>"},{"location":"js/03_Data-Types/#e-null","title":"e) <code>null</code>","text":"<p>Intentional absence of value.</p> <pre><code>let data = null;\n</code></pre>"},{"location":"js/03_Data-Types/#f-symbol-es6","title":"f) <code>Symbol</code> (ES6)","text":"<p>Unique and immutable identifier.</p> <pre><code>let sym = Symbol(\"id\");\n</code></pre>"},{"location":"js/03_Data-Types/#g-bigint-es2020","title":"g) <code>BigInt</code> (ES2020)","text":"<p>Handles large integers beyond <code>Number.MAX_SAFE_INTEGER</code>.</p> <pre><code>let big = 1234567890123456789012345678901234567890n;\n</code></pre>"},{"location":"js/03_Data-Types/#2-reference-types-objects","title":"2. Reference Types (Objects)","text":"<p>Stored as references in memory.</p>"},{"location":"js/03_Data-Types/#a-object","title":"a) <code>Object</code>","text":"<p>Collection of key-value pairs.</p> <pre><code>let user = {\n  name: \"Aman\",\n  age: 15\n};\n</code></pre>"},{"location":"js/03_Data-Types/#b-array","title":"b) <code>Array</code>","text":"<p>Indexed list of values.</p> <pre><code>let scores = [90, 85, 100];\n</code></pre>"},{"location":"js/03_Data-Types/#c-function","title":"c) <code>Function</code>","text":"<p>Functions are objects with callable behavior.</p> <pre><code>function greet() {\n  console.log(\"Hi\");\n}\n</code></pre>"},{"location":"js/03_Data-Types/#3-type-checking","title":"3. Type Checking","text":"<p>Use <code>typeof</code> to check types:</p> <pre><code>typeof \"hello\";     // \"string\"\ntypeof 42;          // \"number\"\ntypeof null;        // \"object\" (bug in JS)\ntypeof [];          // \"object\"\ntypeof undefined;   // \"undefined\"\n</code></pre> <p>To check arrays:</p> <pre><code>Array.isArray([1, 2, 3]); // true\n</code></pre>"},{"location":"js/03_Data-Types/#4-dynamic-typing","title":"4. Dynamic Typing","text":"<p>JavaScript is dynamically typed, so variables can change type at runtime.</p> <pre><code>let x = \"hello\";\nx = 123; // valid\n</code></pre>"},{"location":"js/04_Objects/","title":"Objects","text":"<p>Objects are key-value pairs used to store structured data. Each key is a property, and its value can be any data type.</p>"},{"location":"js/04_Objects/#1-object-creation","title":"1. Object Creation","text":""},{"location":"js/04_Objects/#a-object-literal","title":"a) Object Literal","text":"<pre><code>const user = {\n  name: \"John\",\n  age: 30,\n  isAdmin: true\n};\n</code></pre>"},{"location":"js/04_Objects/#b-using-new-object","title":"b) Using <code>new Object()</code>","text":"<pre><code>const user = new Object();\nuser.name = \"John\";\nuser.age = 30;\n</code></pre>"},{"location":"js/04_Objects/#2-accessing-properties","title":"2. Accessing Properties","text":""},{"location":"js/04_Objects/#a-dot-notation","title":"a) Dot Notation","text":"<pre><code>console.log(user.name); // \"John\"\n</code></pre>"},{"location":"js/04_Objects/#b-bracket-notation","title":"b) Bracket Notation","text":"<pre><code>console.log(user[\"age\"]); // 30\n</code></pre> <p>Use brackets when:</p> <ul> <li>The key has spaces or special characters</li> <li>Accessing dynamically</li> </ul> <pre><code>let key = \"isAdmin\";\nconsole.log(user[key]); // true\n</code></pre>"},{"location":"js/04_Objects/#3-modifying-properties","title":"3. Modifying Properties","text":"<pre><code>user.name = \"Mike\";\nuser[\"age\"] = 25;\n</code></pre>"},{"location":"js/04_Objects/#4-adding-properties","title":"4. Adding Properties","text":"<pre><code>user.email = \"test@example.com\";\n</code></pre>"},{"location":"js/04_Objects/#5-deleting-properties","title":"5. Deleting Properties","text":"<pre><code>delete user.isAdmin;\n</code></pre>"},{"location":"js/04_Objects/#6-nested-objects","title":"6. Nested Objects","text":"<pre><code>const product = {\n  name: \"Phone\",\n  specs: {\n    ram: \"8GB\",\n    storage: \"128GB\"\n  }\n};\n\nconsole.log(product.specs.ram); // \"8GB\"\n</code></pre>"},{"location":"js/04_Objects/#7-methods-functions-inside-objects","title":"7. Methods (Functions inside objects)","text":"<pre><code>const person = {\n  firstName: \"Jane\",\n  greet() {\n    console.log(\"Hello!\");\n  }\n};\n\nperson.greet(); // \"Hello!\"\n</code></pre>"},{"location":"js/04_Objects/#8-looping-through-objects","title":"8. Looping through Objects","text":""},{"location":"js/04_Objects/#forin-loop","title":"<code>for...in</code> loop","text":"<pre><code>for (let key in user) {\n  console.log(key, user[key]);\n}\n</code></pre>"},{"location":"js/04_Objects/#9-built-in-object-methods","title":"9. Built-in Object Methods","text":"<pre><code>Object.keys(user);    // [\"name\", \"age\"]\nObject.values(user);  // [\"John\", 30]\nObject.entries(user); // [[\"name\", \"John\"], [\"age\", 30]]\n</code></pre>"},{"location":"js/05_Conditionals/","title":"Conditionals","text":"<p>Conditionals control the flow of code by executing different blocks based on true/false evaluations.</p>"},{"location":"js/05_Conditionals/#1-if-statement","title":"1. <code>if</code> Statement","text":"<pre><code>let age = 18;\n\nif (age &gt;= 18) {\n  console.log(\"Adult\");\n}\n</code></pre>"},{"location":"js/05_Conditionals/#2-ifelse","title":"2. <code>if...else</code>","text":"<pre><code>if (age &gt;= 18) {\n  console.log(\"Adult\");\n} else {\n  console.log(\"Minor\");\n}\n</code></pre>"},{"location":"js/05_Conditionals/#3-ifelse-ifelse","title":"3. <code>if...else if...else</code>","text":"<pre><code>if (age &lt; 13) {\n  console.log(\"Child\");\n} else if (age &lt; 18) {\n  console.log(\"Teen\");\n} else {\n  console.log(\"Adult\");\n}\n</code></pre>"},{"location":"js/05_Conditionals/#4-ternary-operator","title":"4. Ternary Operator","text":"<p>Shorthand for <code>if...else</code>.</p> <pre><code>let msg = (age &gt;= 18) ? \"Adult\" : \"Minor\";\nconsole.log(msg);\n</code></pre>"},{"location":"js/05_Conditionals/#5-logical-operators","title":"5. Logical Operators","text":"Operator Name Example Result <code>&amp;&amp;</code> AND <code>a &gt; 0 &amp;&amp; b &gt; 0</code> true if both ` ` OR `a &gt; 0 b &gt; 0` true if either <code>!</code> NOT <code>!isLoggedIn</code> inverse"},{"location":"js/05_Conditionals/#6-switch-statement","title":"6. <code>switch</code> Statement","text":"<p>Efficient alternative to multiple <code>if...else if</code>.</p> <pre><code>let color = \"blue\";\n\nswitch (color) {\n  case \"red\":\n    console.log(\"Red selected\");\n    break;\n  case \"blue\":\n    console.log(\"Blue selected\");\n    break;\n  default:\n    console.log(\"No match\");\n}\n</code></pre> <ul> <li><code>break</code> is required to prevent fall-through</li> <li><code>default</code> runs if no case matches</li> </ul>"},{"location":"js/05_Conditionals/#7-falsy-values","title":"7. Falsy Values","text":"<p>These values are considered <code>false</code> in conditionals:</p> <ul> <li><code>false</code></li> <li><code>0</code></li> <li><code>\"\"</code> (empty string)</li> <li><code>null</code></li> <li><code>undefined</code></li> <li><code>NaN</code></li> </ul> <pre><code>if (!value) {\n  console.log(\"Falsy value\");\n}\n</code></pre>"},{"location":"js/06_Loops/","title":"Loops","text":"<p>Loops let you repeat a block of code multiple times, either a fixed number of times or until a condition fails.</p>"},{"location":"js/06_Loops/#1-for-loop","title":"1. <code>for</code> Loop","text":"<p>Use when the number of iterations is known.</p> <pre><code>for (let i = 0; i &lt; 5; i++) {\n  console.log(i);\n}\n</code></pre> <ul> <li><code>i = 0</code> \u2192 start</li> <li><code>i &lt; 5</code> \u2192 condition</li> <li><code>i++</code> \u2192 increment</li> </ul>"},{"location":"js/06_Loops/#2-while-loop","title":"2. <code>while</code> Loop","text":"<p>Runs while the condition is true.</p> <pre><code>let i = 0;\nwhile (i &lt; 5) {\n  console.log(i);\n  i++;\n}\n</code></pre>"},{"location":"js/06_Loops/#3-dowhile-loop","title":"3. <code>do...while</code> Loop","text":"<p>Runs at least once, then checks the condition.</p> <pre><code>let i = 0;\ndo {\n  console.log(i);\n  i++;\n} while (i &lt; 5);\n</code></pre>"},{"location":"js/06_Loops/#4-forof-loop","title":"4. <code>for...of</code> Loop","text":"<p>Iterates over iterables like arrays, strings, etc.</p> <pre><code>let nums = [10, 20, 30];\n\nfor (let num of nums) {\n  console.log(num);\n}\n</code></pre>"},{"location":"js/06_Loops/#5-forin-loop","title":"5. <code>for...in</code> Loop","text":"<p>Iterates over keys in an object.</p> <pre><code>const user = { name: \"John\", age: 30 };\n\nfor (let key in user) {\n  console.log(key, user[key]);\n}\n</code></pre>"},{"location":"js/06_Loops/#6-break-and-continue","title":"6. <code>break</code> and <code>continue</code>","text":""},{"location":"js/06_Loops/#break-exits-the-loop-early","title":"<code>break</code>: exits the loop early.","text":"<pre><code>for (let i = 0; i &lt; 10; i++) {\n  if (i === 5) break;\n  console.log(i); // 0 to 4\n}\n</code></pre>"},{"location":"js/06_Loops/#continue-skips-current-iteration","title":"<code>continue</code>: skips current iteration.","text":"<pre><code>for (let i = 0; i &lt; 5; i++) {\n  if (i === 2) continue;\n  console.log(i); // 0, 1, 3, 4\n}\n</code></pre>"},{"location":"js/06_Loops/#7-looping-arrays-with-foreach","title":"7. Looping Arrays with <code>.forEach()</code>","text":"<pre><code>let arr = [1, 2, 3];\n\narr.forEach(function (val) {\n  console.log(val);\n});\n</code></pre>"},{"location":"js/07_Functions/","title":"Functions","text":"<p>Functions are reusable blocks of code that perform specific tasks. You define them once and call them anywhere.</p>"},{"location":"js/07_Functions/#1-function-declaration","title":"1. Function Declaration","text":"<pre><code>function greet() {\n  console.log(\"Hello\");\n}\n\ngreet(); // Call the function\n</code></pre>"},{"location":"js/07_Functions/#2-parameters-arguments","title":"2. Parameters &amp; Arguments","text":"<pre><code>function add(a, b) {\n  return a + b;\n}\n\nlet result = add(5, 3); // 8\n</code></pre> <ul> <li><code>a</code>, <code>b</code> \u2192 parameters (placeholders)</li> <li><code>5</code>, <code>3</code> \u2192 arguments (actual values)</li> </ul>"},{"location":"js/07_Functions/#3-return-value","title":"3. Return Value","text":"<p>Use <code>return</code> to send a value back.</p> <pre><code>function multiply(x, y) {\n  return x * y;\n}\n</code></pre> <p>If no <code>return</code>, the function returns <code>undefined</code>.</p>"},{"location":"js/07_Functions/#4-function-expression","title":"4. Function Expression","text":"<p>Function stored in a variable.</p> <pre><code>const greet = function () {\n  console.log(\"Hi\");\n};\n\ngreet();\n</code></pre>"},{"location":"js/07_Functions/#5-arrow-functions-es6","title":"5. Arrow Functions (ES6)","text":"<p>Shorter syntax, often used for callbacks.</p> <pre><code>const add = (a, b) =&gt; a + b;\n</code></pre> <p>With multiple lines:</p> <pre><code>const greet = () =&gt; {\n  console.log(\"Hello\");\n};\n</code></pre>"},{"location":"js/07_Functions/#6-default-parameters","title":"6. Default Parameters","text":"<pre><code>function sayHello(name = \"Guest\") {\n  console.log(\"Hello, \" + name);\n}\n\nsayHello(); // \"Hello, Guest\"\n</code></pre>"},{"location":"js/07_Functions/#7-rest-parameters","title":"7. Rest Parameters","text":"<p>Combines multiple arguments into an array.</p> <pre><code>function sum(...nums) {\n  return nums.reduce((a, b) =&gt; a + b);\n}\n\nsum(1, 2, 3); // 6\n\n## 8. Anonymous Functions\n\nFunctions without a name, often used inline.\n\n```js\nsetTimeout(function () {\n  console.log(\"Delayed\");\n}, 1000);\n</code></pre>"},{"location":"js/07_Functions/#9-callback-functions","title":"9. Callback Functions","text":"<p>Function passed as an argument to another function.</p> <pre><code>function process(data, callback) {\n  callback(data);\n}\n\nprocess(5, function (num) {\n  console.log(num * 2);\n});\n</code></pre>"},{"location":"js/08_Strings/","title":"Strings","text":"<p>Strings represent text and are one of the most commonly used data types in JavaScript.</p>"},{"location":"js/08_Strings/#1-creating-strings","title":"1. Creating Strings","text":"<pre><code>let str1 = \"Hello\";\nlet str2 = 'World';\nlet str3 = `Hello, ${str2}`; // Template literal\n</code></pre>"},{"location":"js/08_Strings/#2-string-length","title":"2. String Length","text":"<pre><code>let name = \"John\";\nconsole.log(name.length); // 4\n</code></pre>"},{"location":"js/08_Strings/#3-accessing-characters","title":"3. Accessing Characters","text":"<pre><code>let str = \"JavaScript\";\nconsole.log(str[0]);      // \"J\"\nconsole.log(str.charAt(2)); // \"v\"\n</code></pre>"},{"location":"js/08_Strings/#4-string-methods","title":"4. String Methods","text":""},{"location":"js/08_Strings/#touppercase-tolowercase","title":"<code>toUpperCase()</code> / <code>toLowerCase()</code>","text":"<pre><code>\"abc\".toUpperCase(); // \"ABC\"\n\"XYZ\".toLowerCase(); // \"xyz\"\n</code></pre>"},{"location":"js/08_Strings/#indexof-lastindexof","title":"<code>indexOf()</code> / <code>lastIndexOf()</code>","text":"<pre><code>\"hello\".indexOf(\"l\");      // 2\n\"hello\".lastIndexOf(\"l\");  // 3\n</code></pre>"},{"location":"js/08_Strings/#includes","title":"<code>includes()</code>","text":"<pre><code>\"hello\".includes(\"he\"); // true\n</code></pre>"},{"location":"js/08_Strings/#startswith-endswith","title":"<code>startsWith()</code> / <code>endsWith()</code>","text":"<pre><code>\"hello\".startsWith(\"he\"); // true\n\"hello\".endsWith(\"lo\");   // true\n</code></pre>"},{"location":"js/08_Strings/#slicestart-end","title":"<code>slice(start, end)</code>","text":"<pre><code>\"JavaScript\".slice(0, 4); // \"Java\"\n</code></pre>"},{"location":"js/08_Strings/#substringstart-end","title":"<code>substring(start, end)</code>","text":"<pre><code>\"JavaScript\".substring(4, 10); // \"Script\"\n</code></pre>"},{"location":"js/08_Strings/#substrstart-length-deprecated","title":"<code>substr(start, length)</code> (deprecated)","text":"<pre><code>\"JavaScript\".substr(4, 3); // \"Scr\"\n</code></pre>"},{"location":"js/08_Strings/#replace-replaceall","title":"<code>replace()</code> / <code>replaceAll()</code>","text":"<pre><code>\"apple pie\".replace(\"pie\", \"juice\"); // \"apple juice\"\n\"aaa\".replaceAll(\"a\", \"b\"); // \"bbb\"\n</code></pre>"},{"location":"js/08_Strings/#trim-trimstart-trimend","title":"<code>trim()</code>, <code>trimStart()</code>, <code>trimEnd()</code>","text":"<pre><code>\"  hello  \".trim(); // \"hello\"\n</code></pre>"},{"location":"js/08_Strings/#split","title":"<code>split()</code>","text":"<pre><code>\"red,green,blue\".split(\",\"); // [\"red\", \"green\", \"blue\"]\n</code></pre>"},{"location":"js/08_Strings/#repeatn","title":"<code>repeat(n)</code>","text":"<pre><code>\"ha\".repeat(3); // \"hahaha\"\n</code></pre>"},{"location":"js/08_Strings/#5-template-literals","title":"5. Template Literals","text":"<p>Use backticks <code>`</code> for multiline and interpolation.</p> <pre><code>let name = \"Alice\";\nlet msg = `Hello, ${name}!`;\n</code></pre>"},{"location":"js/08_Strings/#6-escape-characters","title":"6. Escape Characters","text":"<pre><code>let str = \"He said: \\\"Hello\\\"\";\nlet path = \"C:\\\\Users\\\\User\";\n</code></pre>"},{"location":"js/08_Strings/#7-comparing-strings","title":"7. Comparing Strings","text":"<pre><code>\"abc\" === \"abc\"; // true\n\"abc\" &gt; \"abd\";   // false (lexical order)\n</code></pre>"},{"location":"js/09_Arrays/","title":"Arrays","text":"<p>Arrays are ordered lists used to store multiple values in a single variable. They can contain any data type \u2014 strings, numbers, objects, functions, etc.</p>"},{"location":"js/09_Arrays/#1-creating-arrays","title":"1. Creating Arrays","text":"<pre><code>let arr = [10, 20, 30];\nlet empty = new Array(); // []\n</code></pre>"},{"location":"js/09_Arrays/#2-accessing-items","title":"2. Accessing Items","text":"<pre><code>arr[0];     // 10\narr.length; // 3\narr[arr.length - 1]; // Last item\n</code></pre>"},{"location":"js/09_Arrays/#3-modifying-items","title":"3. Modifying Items","text":"<pre><code>arr[1] = 99;       // [10, 99, 30]\narr.push(40);      // [10, 99, 30, 40]\narr.pop();         // Removes last \u2192 [10, 99, 30]\narr.shift();       // Removes first \u2192 [99, 30]\narr.unshift(5);    // Adds to front \u2192 [5, 99, 30]\n</code></pre>"},{"location":"js/09_Arrays/#4-array-methods","title":"4. Array Methods","text":""},{"location":"js/09_Arrays/#push-pop","title":"<code>push()</code> / <code>pop()</code>","text":"<pre><code>arr.push(100); // add to end\narr.pop();     // remove from end\n</code></pre>"},{"location":"js/09_Arrays/#shift-unshift","title":"<code>shift()</code> / <code>unshift()</code>","text":"<pre><code>arr.shift();     // remove first\narr.unshift(0);  // add to start\n</code></pre>"},{"location":"js/09_Arrays/#slicestart-end","title":"<code>slice(start, end)</code>","text":"<p>Returns a shallow copy of a portion.</p> <pre><code>let sliced = arr.slice(1, 3); // [99, 30]\n</code></pre>"},{"location":"js/09_Arrays/#splicestart-deletecount-items","title":"<code>splice(start, deleteCount, ...items)</code>","text":"<p>Modifies the array (insert/remove/replace).</p> <pre><code>arr.splice(1, 1);         // Remove 1 item at index 1\narr.splice(1, 0, 88);     // Insert 88 at index 1\n</code></pre>"},{"location":"js/09_Arrays/#indexof-includes","title":"<code>indexOf()</code> / <code>includes()</code>","text":"<pre><code>arr.indexOf(30);   // 2\narr.includes(99);  // true\n</code></pre>"},{"location":"js/09_Arrays/#join","title":"<code>join()</code>","text":"<pre><code>arr.join(\", \"); // \"5, 99, 30\"\n</code></pre>"},{"location":"js/09_Arrays/#reverse","title":"<code>reverse()</code>","text":"<pre><code>arr.reverse(); // In-place reverse\n</code></pre>"},{"location":"js/09_Arrays/#sort","title":"<code>sort()</code>","text":"<pre><code>arr.sort(); // Lexicographic sort\narr.sort((a, b) =&gt; a - b); // Numeric sort\n</code></pre>"},{"location":"js/09_Arrays/#5-looping-arrays","title":"5. Looping Arrays","text":""},{"location":"js/09_Arrays/#for-loop","title":"<code>for</code> loop","text":"<pre><code>for (let i = 0; i &lt; arr.length; i++) {\n  console.log(arr[i]);\n}\n</code></pre>"},{"location":"js/09_Arrays/#forof","title":"<code>for...of</code>","text":"<pre><code>for (let val of arr) {\n  console.log(val);\n}\n</code></pre>"},{"location":"js/09_Arrays/#foreach","title":"<code>forEach()</code>","text":"<pre><code>arr.forEach((val, i) =&gt; {\n  console.log(i, val);\n});\n</code></pre>"},{"location":"js/09_Arrays/#6-higher-order-methods","title":"6. Higher-Order Methods","text":""},{"location":"js/09_Arrays/#map","title":"<code>map()</code>","text":"<pre><code>let doubled = arr.map(n =&gt; n * 2);\n</code></pre>"},{"location":"js/09_Arrays/#filter","title":"<code>filter()</code>","text":"<pre><code>let evens = arr.filter(n =&gt; n % 2 === 0);\n</code></pre>"},{"location":"js/09_Arrays/#reduce","title":"<code>reduce()</code>","text":"<pre><code>let sum = arr.reduce((acc, curr) =&gt; acc + curr, 0);\n</code></pre>"},{"location":"js/09_Arrays/#7-nested-arrays","title":"7. Nested Arrays","text":"<pre><code>let grid = [[1, 2], [3, 4]];\nconsole.log(grid[1][0]); // 3\n</code></pre>"},{"location":"js/10_DOM-Part-1/","title":"DOM Part 1: Basics &amp; Selecting Elements","text":""},{"location":"js/10_DOM-Part-1/#1-what-is-the-dom","title":"1. What Is the DOM?","text":"<p>DOM (Document Object Model) is a tree-like structure where:</p> <ul> <li>Each HTML element is a node</li> <li>JavaScript can access and manipulate these nodes</li> </ul> <p>The root is <code>document</code>.</p>"},{"location":"js/10_DOM-Part-1/#2-accessing-the-document","title":"2. Accessing the Document","text":"<pre><code>console.log(document);           // entire DOM\nconsole.log(document.title);     // page title\nconsole.log(document.body);      // &lt;body&gt; element\n</code></pre>"},{"location":"js/10_DOM-Part-1/#3-selecting-elements","title":"3. Selecting Elements","text":""},{"location":"js/10_DOM-Part-1/#a-getelementbyid","title":"a) <code>getElementById</code>","text":"<p>Selects a single element by ID.</p> <pre><code>let heading = document.getElementById(\"main-title\");\n</code></pre>"},{"location":"js/10_DOM-Part-1/#b-getelementsbyclassname","title":"b) <code>getElementsByClassName</code>","text":"<p>Returns a live HTMLCollection (not an array).</p> <pre><code>let items = document.getElementsByClassName(\"menu-item\");\n</code></pre> <p>Access with index: <code>items[0]</code></p>"},{"location":"js/10_DOM-Part-1/#c-getelementsbytagname","title":"c) <code>getElementsByTagName</code>","text":"<p>Returns all elements by tag name.</p> <pre><code>let allParas = document.getElementsByTagName(\"p\");\n</code></pre>"},{"location":"js/10_DOM-Part-1/#4-queryselector-queryselectorall","title":"4. <code>querySelector</code> &amp; <code>querySelectorAll</code>","text":""},{"location":"js/10_DOM-Part-1/#queryselector","title":"<code>querySelector</code>","text":"<p>Returns first match using CSS selector.</p> <pre><code>let btn = document.querySelector(\".btn\");       // first .btn\nlet header = document.querySelector(\"#header\"); // #header\nlet input = document.querySelector(\"input[type='text']\");\n</code></pre>"},{"location":"js/10_DOM-Part-1/#queryselectorall","title":"<code>querySelectorAll</code>","text":"<p>Returns NodeList of all matches.</p> <pre><code>let allButtons = document.querySelectorAll(\".btn\");\n</code></pre> <p>Loop with <code>forEach()</code>:</p> <pre><code>allButtons.forEach(btn =&gt; btn.classList.add(\"active\"));\n</code></pre>"},{"location":"js/10_DOM-Part-1/#5-nodelist-vs-htmlcollection","title":"5. NodeList vs HTMLCollection","text":"Feature NodeList HTMLCollection Returned by <code>querySelectorAll</code> <code>getElementsBy*</code> Can use <code>forEach()</code> \u2705 (modern browsers) \u274c (convert to array) Live updates \u274c static \u2705 live <p>To convert HTMLCollection:</p> <pre><code>Array.from(items).forEach(el =&gt; console.log(el));\n</code></pre>"},{"location":"js/11_DOM-Part-2/","title":"DOM Part 2: Modifying Elements","text":""},{"location":"js/11_DOM-Part-2/#1-innertext-textcontent-innerhtml","title":"1. <code>innerText</code>, <code>textContent</code>, <code>innerHTML</code>","text":""},{"location":"js/11_DOM-Part-2/#innertext","title":"<code>innerText</code>","text":"<p>Returns visible text.</p> <pre><code>element.innerText = \"Hello\";\n</code></pre>"},{"location":"js/11_DOM-Part-2/#textcontent","title":"<code>textContent</code>","text":"<p>Returns all text, including hidden.</p> <pre><code>element.textContent = \"Hi\";\n</code></pre>"},{"location":"js/11_DOM-Part-2/#innerhtml","title":"<code>innerHTML</code>","text":"<p>Reads or replaces the HTML inside an element.</p> <pre><code>element.innerHTML = \"&lt;strong&gt;Bold text&lt;/strong&gt;\";\n</code></pre>"},{"location":"js/11_DOM-Part-2/#2-changing-styles","title":"2. Changing Styles","text":"<p>Use <code>.style.propertyName</code> (camelCase for CSS).</p> <pre><code>element.style.color = \"red\";\nelement.style.backgroundColor = \"#f0f0f0\";\n</code></pre>"},{"location":"js/11_DOM-Part-2/#3-classlist-methods","title":"3. <code>classList</code> Methods","text":""},{"location":"js/11_DOM-Part-2/#add-add-a-class","title":"<code>add()</code> \u2013 Add a class","text":"<pre><code>element.classList.add(\"active\");\n</code></pre>"},{"location":"js/11_DOM-Part-2/#remove-remove-a-class","title":"<code>remove()</code> \u2013 Remove a class","text":"<pre><code>element.classList.remove(\"disabled\");\n</code></pre>"},{"location":"js/11_DOM-Part-2/#toggle-add-if-missing-remove-if-present","title":"<code>toggle()</code> \u2013 Add if missing, remove if present","text":"<pre><code>element.classList.toggle(\"open\");\n</code></pre>"},{"location":"js/11_DOM-Part-2/#contains-check-if-class-exists","title":"<code>contains()</code> \u2013 Check if class exists","text":"<pre><code>element.classList.contains(\"active\"); // true/false\n</code></pre>"},{"location":"js/11_DOM-Part-2/#4-working-with-attributes","title":"4. Working with Attributes","text":""},{"location":"js/11_DOM-Part-2/#getattribute","title":"<code>getAttribute()</code>","text":"<pre><code>let link = element.getAttribute(\"href\");\n</code></pre>"},{"location":"js/11_DOM-Part-2/#setattribute","title":"<code>setAttribute()</code>","text":"<pre><code>element.setAttribute(\"src\", \"img.png\");\n</code></pre>"},{"location":"js/11_DOM-Part-2/#removeattribute","title":"<code>removeAttribute()</code>","text":"<pre><code>element.removeAttribute(\"disabled\");\n</code></pre>"},{"location":"js/11_DOM-Part-2/#5-input-values","title":"5. Input Values","text":"<p>Use <code>.value</code> for form elements.</p> <pre><code>let input = document.querySelector(\"#username\");\nconsole.log(input.value);       // get\ninput.value = \"newUser123\";     // set\n</code></pre>"},{"location":"js/11_DOM-Part-2/#6-example-modify-button-text-style","title":"6. Example: Modify Button Text &amp; Style","text":"<pre><code>let btn = document.querySelector(\"#submit\");\n\nbtn.innerText = \"Sending...\";\nbtn.style.backgroundColor = \"gray\";\nbtn.classList.add(\"disabled\");\n</code></pre>"},{"location":"js/12_DOM-Part-3/","title":"DOM Part 3: Creating &amp; Removing Elements","text":""},{"location":"js/12_DOM-Part-3/#1-createelement","title":"1. <code>createElement()</code>","text":"<p>Creates a new DOM element (not in the document yet).</p> <pre><code>let newDiv = document.createElement(\"div\");\nnewDiv.innerText = \"Hello World\";\n</code></pre>"},{"location":"js/12_DOM-Part-3/#2-append-and-appendchild","title":"2. <code>append()</code> and <code>appendChild()</code>","text":"<p>Adds element to the end of a parent.</p> <pre><code>document.body.append(newDiv);       // accepts text, multiple elements\nparent.appendChild(newDiv);         // older, only one node\n</code></pre>"},{"location":"js/12_DOM-Part-3/#prepend","title":"<code>prepend()</code>","text":"<p>Adds to the start of a parent.</p> <pre><code>parent.prepend(newDiv);\n</code></pre>"},{"location":"js/12_DOM-Part-3/#3-insertbefore","title":"3. <code>insertBefore()</code>","text":"<p>Inserts a node before another inside the same parent.</p> <pre><code>parent.insertBefore(newNode, referenceNode);\n</code></pre>"},{"location":"js/12_DOM-Part-3/#4-remove-modern","title":"4. <code>remove()</code> (modern)","text":"<p>Removes an element directly.</p> <pre><code>element.remove();\n</code></pre>"},{"location":"js/12_DOM-Part-3/#5-removechild-older","title":"5. <code>removeChild()</code> (older)","text":"<p>Used on the parent, passing the child to remove.</p> <pre><code>parent.removeChild(child);\n</code></pre>"},{"location":"js/12_DOM-Part-3/#6-replacechild","title":"6. <code>replaceChild()</code>","text":"<p>Replaces one child with another.</p> <pre><code>parent.replaceChild(newNode, oldNode);\n</code></pre>"},{"location":"js/12_DOM-Part-3/#7-cloning-nodes","title":"7. Cloning Nodes","text":""},{"location":"js/12_DOM-Part-3/#clonenodedeep","title":"<code>cloneNode(deep)</code>","text":"<ul> <li><code>true</code> \u2192 clone entire element with children</li> <li><code>false</code> \u2192 only clone the node itself</li> </ul> <pre><code>let clone = original.cloneNode(true);\nparent.append(clone);\n</code></pre>"},{"location":"js/12_DOM-Part-3/#8-example-add-new-list-item","title":"8. Example: Add New List Item","text":"<pre><code>let li = document.createElement(\"li\");\nli.innerText = \"New Item\";\n\ndocument.querySelector(\"ul\").appendChild(li);\n</code></pre>"},{"location":"js/13_DOM-Part-4/","title":"DOM Part 4: Events","text":""},{"location":"js/13_DOM-Part-4/#1-what-are-events","title":"1. What Are Events?","text":"<p>Events are actions that happen in the browser (click, scroll, keypress, input, etc.). You can run functions in response.</p>"},{"location":"js/13_DOM-Part-4/#2-addeventlistener","title":"2. <code>addEventListener()</code>","text":"<p>Attach a function to run when an event occurs.</p> <pre><code>element.addEventListener(\"click\", function () {\n  console.log(\"Clicked\");\n});\n</code></pre>"},{"location":"js/13_DOM-Part-4/#common-events","title":"Common events:","text":"<ul> <li><code>click</code></li> <li><code>mouseover</code> / <code>mouseout</code></li> <li><code>keydown</code> / <code>keyup</code></li> <li><code>input</code></li> <li><code>submit</code></li> <li><code>change</code></li> </ul>"},{"location":"js/13_DOM-Part-4/#3-named-function-example","title":"3. Named Function Example","text":"<pre><code>function greet() {\n  console.log(\"Hello\");\n}\n\nbutton.addEventListener(\"click\", greet);\n</code></pre>"},{"location":"js/13_DOM-Part-4/#4-arrow-function-example","title":"4. Arrow Function Example","text":"<pre><code>button.addEventListener(\"click\", () =&gt; {\n  console.log(\"Clicked!\");\n});\n</code></pre>"},{"location":"js/13_DOM-Part-4/#5-accessing-the-event-object","title":"5. Accessing the Event Object","text":"<p>Every event listener gets an <code>event</code> object with info about the action.</p> <pre><code>element.addEventListener(\"click\", function (event) {\n  console.log(event.target); // the element that was clicked\n});\n</code></pre>"},{"location":"js/13_DOM-Part-4/#6-prevent-default-behavior","title":"6. Prevent Default Behavior","text":"<p>Use <code>event.preventDefault()</code> to stop default actions like form submit or link navigation.</p> <pre><code>form.addEventListener(\"submit\", function (e) {\n  e.preventDefault();\n  console.log(\"Form blocked\");\n});\n</code></pre>"},{"location":"js/13_DOM-Part-4/#7-event-delegation","title":"7. Event Delegation","text":"<p>Listen to a parent and handle clicks from child elements using <code>event.target</code>.</p> <pre><code>document.querySelector(\"ul\").addEventListener(\"click\", function (e) {\n  if (e.target.tagName === \"LI\") {\n    e.target.classList.toggle(\"selected\");\n  }\n});\n</code></pre>"},{"location":"js/13_DOM-Part-4/#8-removing-event-listeners","title":"8. Removing Event Listeners","text":"<pre><code>function handler() {\n  console.log(\"Removed after one use\");\n  btn.removeEventListener(\"click\", handler);\n}\n\nbtn.addEventListener(\"click\", handler);\n</code></pre>"},{"location":"js/13_DOM-Part-4/#9-once-option","title":"9. <code>once</code> Option","text":"<p>Automatically removes listener after first trigger.</p> <pre><code>btn.addEventListener(\"click\", () =&gt; {\n  console.log(\"Clicked once\");\n}, { once: true });\n</code></pre>"},{"location":"js/14_Callbacks/","title":"Callbacks","text":"<p>A callback is a function passed as an argument to another function, to be called later \u2014 either after an operation completes or at a specific time.</p>"},{"location":"js/14_Callbacks/#1-basic-callback-example","title":"1. Basic Callback Example","text":"<pre><code>function greet(name) {\n  console.log(\"Hello, \" + name);\n}\n\nfunction processUser(callback) {\n  let name = \"Alice\";\n  callback(name);\n}\n\nprocessUser(greet); // \"Hello, Alice\"\n</code></pre>"},{"location":"js/14_Callbacks/#2-anonymous-callback","title":"2. Anonymous Callback","text":"<pre><code>setTimeout(function () {\n  console.log(\"Executed after 1 second\");\n}, 1000);\n</code></pre>"},{"location":"js/14_Callbacks/#3-arrow-function-callback","title":"3. Arrow Function Callback","text":"<pre><code>setTimeout(() =&gt; {\n  console.log(\"Arrow callback\");\n}, 500);\n</code></pre>"},{"location":"js/14_Callbacks/#4-array-method-callbacks","title":"4. Array Method Callbacks","text":""},{"location":"js/14_Callbacks/#foreach","title":"<code>forEach</code>","text":"<pre><code>[1, 2, 3].forEach(num =&gt; {\n  console.log(num);\n});\n</code></pre>"},{"location":"js/14_Callbacks/#map","title":"<code>map</code>","text":"<pre><code>let doubled = [1, 2, 3].map(n =&gt; n * 2);\n</code></pre>"},{"location":"js/14_Callbacks/#filter","title":"<code>filter</code>","text":"<pre><code>let even = [1, 2, 3, 4].filter(n =&gt; n % 2 === 0);\n</code></pre>"},{"location":"js/14_Callbacks/#5-why-use-callbacks","title":"5. Why Use Callbacks?","text":"<ul> <li>Handle asynchronous tasks (API calls, timeouts)</li> <li>Reuse logic</li> <li>Custom behavior passed into functions</li> </ul>"},{"location":"js/14_Callbacks/#6-callback-hell-bad-practice","title":"6. Callback Hell (Bad Practice)","text":"<p>Nested callbacks make code hard to read:</p> <pre><code>doTask1(() =&gt; {\n  doTask2(() =&gt; {\n    doTask3(() =&gt; {\n      console.log(\"Done\");\n    });\n  });\n});\n</code></pre> <p>Use Promises or <code>async/await</code> to fix this.</p>"},{"location":"js/15_Promises/","title":"Promises","text":"<p>A Promise is an object representing the eventual result of an asynchronous operation \u2014 it may resolve (success) or reject (failure).</p>"},{"location":"js/15_Promises/#1-creating-a-promise","title":"1. Creating a Promise","text":"<pre><code>const promise = new Promise((resolve, reject) =&gt; {\n  let success = true;\n\n  if (success) {\n    resolve(\"Done\");\n  } else {\n    reject(\"Error\");\n  }\n});\n</code></pre>"},{"location":"js/15_Promises/#2-consuming-a-promise","title":"2. Consuming a Promise","text":"<pre><code>promise\n  .then(result =&gt; {\n    console.log(\"Resolved:\", result);\n  })\n  .catch(error =&gt; {\n    console.log(\"Rejected:\", error);\n  });\n</code></pre>"},{"location":"js/15_Promises/#3-example-simulated-async-task","title":"3. Example: Simulated Async Task","text":"<pre><code>function asyncTask() {\n  return new Promise((resolve) =&gt; {\n    setTimeout(() =&gt; {\n      resolve(\"Task complete\");\n    }, 1000);\n  });\n}\n\nasyncTask().then(res =&gt; console.log(res));\n</code></pre>"},{"location":"js/15_Promises/#4-chaining-promises","title":"4. Chaining Promises","text":"<pre><code>doStep1()\n  .then(result1 =&gt; doStep2(result1))\n  .then(result2 =&gt; doStep3(result2))\n  .then(final =&gt; console.log(\"Final:\", final))\n  .catch(err =&gt; console.error(err));\n</code></pre>"},{"location":"js/15_Promises/#5-promiseall","title":"5. <code>Promise.all([])</code>","text":"<p>Runs multiple promises in parallel, waits for all.</p> <pre><code>Promise.all([p1, p2, p3])\n  .then(values =&gt; console.log(values))\n  .catch(err =&gt; console.log(err));\n</code></pre>"},{"location":"js/15_Promises/#6-promiserace","title":"6. <code>Promise.race([])</code>","text":"<p>Returns the result of the first resolved/rejected promise.</p> <pre><code>Promise.race([p1, p2])\n  .then(result =&gt; console.log(\"First done:\", result));\n</code></pre>"},{"location":"js/15_Promises/#7-promise-states","title":"7. Promise States","text":"State Description <code>pending</code> Initial state, neither done nor failed <code>fulfilled</code> Operation completed successfully <code>rejected</code> Operation failed"},{"location":"js/15_Promises/#8-when-to-use-promises","title":"8. When to Use Promises","text":"<ul> <li>API calls (<code>fetch</code>)</li> <li>File reading</li> <li>Delayed actions</li> <li>Replacing deeply nested callbacks (callback hell)</li> </ul> <p>Use <code>async/await</code> for cleaner syntax (covered next).</p>"},{"location":"js/16_Async-Await/","title":"<code>async/await</code>","text":"<p><code>async</code> and <code>await</code> are syntactic sugar over Promises that make asynchronous code look and behave like synchronous code.</p>"},{"location":"js/16_Async-Await/#1-async-function","title":"1. <code>async</code> Function","text":"<p>Declaring a function <code>async</code> makes it return a Promise.</p> <pre><code>async function greet() {\n  return \"Hello\";\n}\n\ngreet().then(msg =&gt; console.log(msg)); // \"Hello\"\n</code></pre>"},{"location":"js/16_Async-Await/#2-await","title":"2. <code>await</code>","text":"<p><code>await</code> pauses the function until the Promise resolves.</p> <pre><code>async function loadData() {\n  let response = await fetch(\"https://api.example.com/data\");\n  let data = await response.json();\n  console.log(data);\n}\n</code></pre> <ul> <li>Can only use <code>await</code> inside an <code>async</code> function</li> <li>It waits for the Promise to resolve</li> </ul>"},{"location":"js/16_Async-Await/#3-trycatch-for-error-handling","title":"3. Try/Catch for Error Handling","text":"<p>Use <code>try/catch</code> to handle rejections.</p> <pre><code>async function getUser() {\n  try {\n    let res = await fetch(\"https://api.example.com/user\");\n    let user = await res.json();\n    console.log(user);\n  } catch (err) {\n    console.error(\"Failed:\", err);\n  }\n}\n</code></pre>"},{"location":"js/16_Async-Await/#4-parallel-await-with-promiseall","title":"4. Parallel <code>await</code> with <code>Promise.all</code>","text":"<pre><code>async function loadAll() {\n  const [res1, res2] = await Promise.all([\n    fetch(\"/api/one\"),\n    fetch(\"/api/two\")\n  ]);\n  const data1 = await res1.json();\n  const data2 = await res2.json();\n}\n</code></pre>"},{"location":"js/16_Async-Await/#5-invalid-usage-dont-do-this","title":"5. Invalid Usage (Don't Do This)","text":"<pre><code>await fetch(\"/url\"); // \u274c SyntaxError: await is only valid in async functions\n</code></pre>"},{"location":"js/16_Async-Await/#6-when-to-use","title":"6. When to Use","text":"<p>Use <code>async/await</code> for:</p> <ul> <li>Cleaner, readable async logic</li> <li>Avoiding <code>.then()</code> chains</li> <li>Fetching API data</li> <li>Sequencing dependent async operations</li> </ul>"},{"location":"js/17_Try-Catch-and-Error-Handling/","title":"<code>try...catch</code> &amp; Error Handling","text":"<p><code>try...catch</code> is used to safely handle errors in synchronous and asynchronous code, preventing crashes and allowing custom responses.</p>"},{"location":"js/17_Try-Catch-and-Error-Handling/#1-basic-syntax","title":"1. Basic Syntax","text":"<pre><code>try {\n  // Code that might throw an error\n} catch (err) {\n  // Runs if error occurs\n}\n</code></pre>"},{"location":"js/17_Try-Catch-and-Error-Handling/#example","title":"Example:","text":"<pre><code>try {\n  let x = y + 1; // y is not defined \u2192 error\n} catch (err) {\n  console.log(\"Error caught:\", err.message);\n}\n</code></pre>"},{"location":"js/17_Try-Catch-and-Error-Handling/#2-finally-block","title":"2. <code>finally</code> Block","text":"<p>Always runs, whether error occurs or not.</p> <pre><code>try {\n  // risky code\n} catch (err) {\n  console.log(\"Handled error\");\n} finally {\n  console.log(\"This always runs\");\n}\n</code></pre>"},{"location":"js/17_Try-Catch-and-Error-Handling/#3-error-object","title":"3. Error Object","text":"<p>In <code>catch(err)</code>, the <code>err</code> object contains:</p> <ul> <li><code>name</code>: error type (e.g. <code>ReferenceError</code>)</li> <li><code>message</code>: description</li> <li><code>stack</code>: call trace (for debugging)</li> </ul> <pre><code>try {\n  throw new Error(\"Something went wrong\");\n} catch (e) {\n  console.log(e.name);    // Error\n  console.log(e.message); // Something went wrong\n}\n</code></pre>"},{"location":"js/17_Try-Catch-and-Error-Handling/#4-handling-errors-in-functions","title":"4. Handling Errors in Functions","text":"<pre><code>function divide(a, b) {\n  if (b === 0) throw new Error(\"Cannot divide by zero\");\n  return a / b;\n}\n\ntry {\n  console.log(divide(10, 0));\n} catch (err) {\n  console.log(\"Math error:\", err.message);\n}\n</code></pre>"},{"location":"js/17_Try-Catch-and-Error-Handling/#5-async-trycatch","title":"5. Async + <code>try/catch</code>","text":"<p>Always wrap <code>await</code> calls in <code>try/catch</code>.</p> <pre><code>async function fetchData() {\n  try {\n    let res = await fetch(\"invalid-url\");\n    let data = await res.json();\n  } catch (err) {\n    console.log(\"Fetch failed:\", err.message);\n  }\n}\n</code></pre>"},{"location":"js/17_Try-Catch-and-Error-Handling/#6-best-practices","title":"6. Best Practices","text":"<ul> <li>Use <code>try/catch</code> around isolated risky logic</li> <li>Don\u2019t overuse \u2014 handle only expected errors</li> <li>Use <code>finally</code> for cleanup tasks (e.g. closing connections, hiding loaders)</li> <li>Throw custom errors to improve debugging and user messages</li> </ul>"},{"location":"js/18_Classes-and-Objects/","title":"Classes &amp; Objects","text":"<p>JavaScript supports object-oriented programming (OOP) using classes (ES6+) and constructor functions. Classes help organize related data and behavior into reusable blueprints.</p>"},{"location":"js/18_Classes-and-Objects/#1-creating-a-class","title":"1. Creating a Class","text":"<pre><code>class Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n\n  greet() {\n    console.log(`Hi, I'm ${this.name}`);\n  }\n}\n</code></pre>"},{"location":"js/18_Classes-and-Objects/#2-creating-objects-instances","title":"2. Creating Objects (Instances)","text":"<pre><code>const user1 = new Person(\"Alice\", 25);\nuser1.greet(); // Hi, I'm Alice\n</code></pre>"},{"location":"js/18_Classes-and-Objects/#3-constructor-method","title":"3. Constructor Method","text":"<ul> <li><code>constructor()</code> is called automatically when using <code>new</code></li> <li>Used to initialize object properties</li> </ul> <pre><code>class Car {\n  constructor(brand, year) {\n    this.brand = brand;\n    this.year = year;\n  }\n}\n</code></pre>"},{"location":"js/18_Classes-and-Objects/#4-adding-methods","title":"4. Adding Methods","text":"<p>Define methods directly inside the class:</p> <pre><code>class Circle {\n  constructor(radius) {\n    this.radius = radius;\n  }\n\n  area() {\n    return Math.PI * this.radius ** 2;\n  }\n}\n</code></pre>"},{"location":"js/18_Classes-and-Objects/#5-class-expression-anonymous-or-named","title":"5. Class Expression (Anonymous or Named)","text":"<pre><code>const Animal = class {\n  constructor(type) {\n    this.type = type;\n  }\n};\n</code></pre>"},{"location":"js/18_Classes-and-Objects/#6-inheritance-extends","title":"6. Inheritance (<code>extends</code>)","text":"<p>One class can inherit from another.</p> <pre><code>class Animal {\n  speak() {\n    console.log(\"Generic sound\");\n  }\n}\n\nclass Dog extends Animal {\n  speak() {\n    console.log(\"Bark\");\n  }\n}\n\nconst d = new Dog();\nd.speak(); // Bark\n</code></pre>"},{"location":"js/18_Classes-and-Objects/#7-super-keyword","title":"7. <code>super()</code> Keyword","text":"<p>Calls the constructor or method from the parent class.</p> <pre><code>class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nclass Cat extends Animal {\n  constructor(name, color) {\n    super(name);\n    this.color = color;\n  }\n}\n</code></pre>"},{"location":"js/18_Classes-and-Objects/#8-static-methods","title":"8. Static Methods","text":"<p>Static methods belong to the class, not instances.</p> <pre><code>class MathUtil {\n  static square(x) {\n    return x * x;\n  }\n}\n\nMathUtil.square(4); // 16\n</code></pre>"},{"location":"js/18_Classes-and-Objects/#9-object-vs-class","title":"9. Object vs Class","text":"<ul> <li>Object literal: used for single instances</li> <li>Class: used for creating multiple objects with shared structure</li> </ul> <pre><code>// Object literal\nconst user = {\n  name: \"Bob\",\n  greet() {\n    console.log(\"Hi\");\n  }\n};\n</code></pre> <p>Use object literals for simple structures, classes for reusable templates.</p>"},{"location":"js/19_Fetch-API/","title":"Fetch API","text":"<p>The Fetch API is used to make HTTP requests (GET, POST, etc.) from the browser. It returns a Promise.</p>"},{"location":"js/19_Fetch-API/#1-basic-get-request","title":"1. Basic GET Request","text":"<pre><code>fetch(\"https://api.example.com/data\")\n  .then(res =&gt; res.json())\n  .then(data =&gt; {\n    console.log(data);\n  })\n  .catch(err =&gt; {\n    console.error(\"Fetch error:\", err);\n  });\n</code></pre> <ul> <li><code>res.json()</code> parses JSON response</li> <li>Always use <code>.catch()</code> to handle network errors</li> </ul>"},{"location":"js/19_Fetch-API/#2-using-asyncawait","title":"2. Using <code>async/await</code>","text":"<pre><code>async function getData() {\n  try {\n    const res = await fetch(\"https://api.example.com/data\");\n    const data = await res.json();\n    console.log(data);\n  } catch (err) {\n    console.error(\"Error:\", err);\n  }\n}\n</code></pre>"},{"location":"js/19_Fetch-API/#3-post-request-sending-data","title":"3. POST Request (Sending Data)","text":"<pre><code>fetch(\"https://api.example.com/users\", {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    name: \"Alice\",\n    age: 25\n  })\n})\n  .then(res =&gt; res.json())\n  .then(data =&gt; console.log(data))\n  .catch(err =&gt; console.error(err));\n</code></pre>"},{"location":"js/19_Fetch-API/#4-common-options","title":"4. Common Options","text":"Option Description <code>method</code> HTTP method (<code>GET</code>, <code>POST</code>, etc.) <code>headers</code> HTTP headers (e.g. <code>Content-Type</code>) <code>body</code> Payload (for <code>POST</code>, <code>PUT</code>) <code>mode</code> CORS control (<code>cors</code>, <code>no-cors</code>) <code>credentials</code> <code>same-origin</code>, <code>include</code>"},{"location":"js/19_Fetch-API/#5-handling-errors-manually","title":"5. Handling Errors Manually","text":"<p>Even if the response is 404/500, <code>fetch()</code> doesn\u2019t throw \u2014 you must check <code>res.ok</code>.</p> <pre><code>async function getUser() {\n  const res = await fetch(\"/api/user\");\n\n  if (!res.ok) {\n    throw new Error(`HTTP error ${res.status}`);\n  }\n\n  const data = await res.json();\n  console.log(data);\n}\n</code></pre>"},{"location":"js/19_Fetch-API/#6-sending-form-data-non-json","title":"6. Sending Form Data (Non-JSON)","text":"<pre><code>const formData = new FormData();\nformData.append(\"username\", \"john\");\nformData.append(\"age\", 30);\n\nfetch(\"/submit\", {\n  method: \"POST\",\n  body: formData\n});\n</code></pre> <p>Use <code>FormData</code> when submitting forms without setting headers manually.</p>"},{"location":"js/19_Fetch-API/#7-abort-a-request","title":"7. Abort a Request","text":"<pre><code>const controller = new AbortController();\n\nfetch(\"/api/data\", { signal: controller.signal })\n  .catch(err =&gt; console.error(\"Aborted\"));\n\ncontroller.abort(); // cancel the request\n</code></pre>"},{"location":"mongodb/01_Introduction/","title":"Introduction","text":""},{"location":"mongodb/01_Introduction/#what-is-mongodb","title":"What is MongoDB?","text":"<p>MongoDB is a NoSQL (non-relational) database that stores data in a document-oriented format using JSON-like objects called BSON (Binary JSON). Unlike traditional relational databases that use tables and rows, MongoDB uses collections and documents.</p>"},{"location":"mongodb/01_Introduction/#key-features","title":"Key Features","text":"<ul> <li>Document-Oriented Storage \u2013 Data is stored in flexible, schema-less JSON-like documents.</li> <li>Scalability \u2013 Supports horizontal scaling using sharding.</li> <li>High Performance \u2013 Optimized for read and write operations.</li> <li>Indexing \u2013 Supports various types of indexes to improve query performance.</li> <li>Aggregation Framework \u2013 Used to process data and perform operations like filtering, grouping, and sorting.</li> <li>Replication \u2013 Provides high availability using replica sets.</li> </ul>"},{"location":"mongodb/01_Introduction/#basic-terminology","title":"Basic Terminology","text":"<ul> <li>Database \u2013 A container for collections.</li> <li>Collection \u2013 A group of related documents (similar to a table in SQL).</li> <li>Document \u2013 A single record in MongoDB stored as a BSON object.</li> <li>Field \u2013 A key-value pair inside a document (similar to a column).</li> <li>_id \u2013 A unique identifier automatically generated for each document.</li> </ul>"},{"location":"mongodb/01_Introduction/#example-document","title":"Example Document","text":"<pre><code>{\n  \"_id\": 1,\n  \"name\": \"Rajesh Singh\",\n  \"age\": 25,\n  \"skills\": [\"HTML\", \"CSS\", \"JavaScript\", \"Python\", \"Node.js\"]\n}\n</code></pre>"},{"location":"mongodb/01_Introduction/#comparison-with-sql-databases","title":"Comparison with SQL Databases","text":"SQL Database MongoDB Table Collection Row Document Column Field Primary Key _id Joins Embedded Documents / $lookup Schema Schema-less"},{"location":"mongodb/01_Introduction/#advantages","title":"Advantages","text":"<ul> <li>Flexible data structure (no need to define schema in advance)</li> <li>Easy to scale horizontally</li> <li>High speed for large-scale applications</li> <li>JSON-like syntax makes it developer-friendly</li> </ul>"},{"location":"mongodb/01_Introduction/#use-cases","title":"Use Cases","text":"<ul> <li>Real-time analytics</li> <li>Content management systems</li> <li>IoT and sensor data storage</li> <li>E-commerce platforms</li> <li>Social media applications</li> </ul>"},{"location":"mongodb/01_Introduction/#installation-basic-commands","title":"Installation &amp; Basic Commands","text":"<ul> <li>Start MongoDB Shell:</li> </ul> <pre><code>mongosh\n</code></pre> <ul> <li>Show databases:</li> </ul> <pre><code>show dbs\n</code></pre> <ul> <li>Use or create a database:</li> </ul> <pre><code>use myDatabase\n</code></pre> <ul> <li>Show collections:</li> </ul> <pre><code>show collections\n</code></pre> <ul> <li>Insert a document:</li> </ul> <pre><code>db.users.insertOne({ name: \"Harry\", age: 22 })\n</code></pre> <ul> <li>Find documents:</li> </ul> <pre><code>db.users.find()\n</code></pre>"},{"location":"mongodb/02_CRUD-Operations/","title":"CRUD Operations","text":""},{"location":"mongodb/02_CRUD-Operations/#introduction","title":"Introduction","text":"<p>CRUD stands for Create, Read, Update, Delete - the four basic operations you can perform on a database. MongoDB is a NoSQL database that stores data in JSON-like documents (BSON).</p>"},{"location":"mongodb/02_CRUD-Operations/#1-create-insert","title":"1. Create (Insert)","text":""},{"location":"mongodb/02_CRUD-Operations/#insert-one-document","title":"Insert One Document","text":"<pre><code>db.collectionName.insertOne({\n    name: \"Rahul\",\n    age: 16,\n    city: \"Delhi\"\n});\n</code></pre>"},{"location":"mongodb/02_CRUD-Operations/#insert-many-documents","title":"Insert Many Documents","text":"<pre><code>db.collectionName.insertMany([\n    { name: \"Ravi\", age: 17, city: \"Mumbai\" },\n    { name: \"Sara\", age: 15, city: \"Bangalore\" }\n]);\n</code></pre>"},{"location":"mongodb/02_CRUD-Operations/#2-read-query","title":"2. Read (Query)","text":""},{"location":"mongodb/02_CRUD-Operations/#find-all-documents","title":"Find All Documents","text":"<pre><code>db.collectionName.find();\n</code></pre>"},{"location":"mongodb/02_CRUD-Operations/#find-one-document","title":"Find One Document","text":"<pre><code>db.collectionName.findOne({ name: \"Lily\" });\n</code></pre>"},{"location":"mongodb/02_CRUD-Operations/#find-with-conditions","title":"Find with Conditions","text":"<pre><code>db.collectionName.find({ age: { $gt: 15 } }); // age greater than 15\n</code></pre>"},{"location":"mongodb/02_CRUD-Operations/#projection-select-fields","title":"Projection (Select Fields)","text":"<pre><code>db.collectionName.find({ age: { $gt: 15 } }, { name: 1, city: 1, _id: 0 });\n</code></pre>"},{"location":"mongodb/02_CRUD-Operations/#3-update","title":"3. Update","text":""},{"location":"mongodb/02_CRUD-Operations/#update-one-document","title":"Update One Document","text":"<pre><code>db.collectionName.updateOne(\n    { name: \"Piyush\" },\n    { $set: { city: \"Noida\" } }\n);\n</code></pre>"},{"location":"mongodb/02_CRUD-Operations/#update-many-documents","title":"Update Many Documents","text":"<pre><code>db.collectionName.updateMany(\n    { age: { $lt: 17 } },\n    { $set: { status: \"minor\" } }\n);\n</code></pre>"},{"location":"mongodb/02_CRUD-Operations/#replace-a-document","title":"Replace a Document","text":"<pre><code>db.collectionName.replaceOne(\n    { name: \"Sara\" },\n    { name: \"Sara\", age: 16, city: \"Pune\" }\n);\n</code></pre>"},{"location":"mongodb/02_CRUD-Operations/#4-delete","title":"4. Delete","text":""},{"location":"mongodb/02_CRUD-Operations/#delete-one-document","title":"Delete One Document","text":"<pre><code>db.collectionName.deleteOne({ name: \"Ravi\" });\n</code></pre>"},{"location":"mongodb/02_CRUD-Operations/#delete-many-documents","title":"Delete Many Documents","text":"<pre><code>db.collectionName.deleteMany({ age: { $lt: 16 } });\n</code></pre>"},{"location":"mongodb/02_CRUD-Operations/#5-common-operators","title":"5. Common Operators","text":"<ul> <li><code>$gt</code> \u2192 Greater than</li> <li><code>$lt</code> \u2192 Less than</li> <li><code>$gte</code> \u2192 Greater than or equal</li> <li><code>$lte</code> \u2192 Less than or equal</li> <li><code>$ne</code> \u2192 Not equal</li> <li><code>$in</code> \u2192 Matches any value in an array</li> <li><code>$nin</code> \u2192 Matches none in an array</li> <li><code>$set</code> \u2192 Updates specified fields</li> <li><code>$unset</code> \u2192 Removes specified fields</li> </ul>"},{"location":"mongodb/02_CRUD-Operations/#example-flow","title":"Example Flow","text":"<pre><code>// 1. Create\ndb.students.insertOne({ name: \"Chris\", age: 16, grade: \"10th\" });\n\n// 2. Read\ndb.students.find({ age: { $gte: 16 } });\n\n// 3. Update\ndb.students.updateOne({ name: \"Chris\" }, { $set: { grade: \"11th\" } });\n\n// 4. Delete\ndb.students.deleteOne({ name: \"Chris\" });\n</code></pre>"},{"location":"mongodb/03_Mongoose/","title":"Mongoose","text":"<p>Mongoose is an Object Data Modeling (ODM) library for MongoDB and Node.js. It helps developers interact with MongoDB using JavaScript objects instead of writing raw database queries.</p>"},{"location":"mongodb/03_Mongoose/#why-use-mongoose","title":"Why Use Mongoose?","text":"<ul> <li>Provides Schema-based data modeling.</li> <li>Offers validation, middleware, and query helpers.</li> <li>Handles relationships and data population.</li> <li>Simplifies CRUD operations with a clean API.</li> <li>Automatically converts JavaScript objects into MongoDB documents.</li> </ul>"},{"location":"mongodb/03_Mongoose/#installation","title":"Installation","text":"<pre><code>npm install mongoose\n</code></pre>"},{"location":"mongodb/03_Mongoose/#connecting-to-mongodb","title":"Connecting to MongoDB","text":"<pre><code>import mongoose from \"mongoose\";\n\nasync function connectDB() {\n  try {\n    await mongoose.connect(\"mongodb://localhost:27017/myDatabase\");\n    console.log(\"MongoDB connected!\");\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nconnectDB();\n</code></pre>"},{"location":"mongodb/03_Mongoose/#defining-a-schema","title":"Defining a Schema","text":"<p>A schema defines the structure of documents within a collection.</p> <pre><code>const userSchema = new mongoose.Schema({\n  name: String,\n  age: Number,\n  email: { type: String, required: true, unique: true }\n});\n</code></pre>"},{"location":"mongodb/03_Mongoose/#creating-a-model","title":"Creating a Model","text":"<p>A model is a wrapper around a MongoDB collection that provides CRUD methods.</p> <pre><code>const User = mongoose.model(\"User\", userSchema);\n</code></pre>"},{"location":"mongodb/03_Mongoose/#crud-operations","title":"CRUD Operations","text":""},{"location":"mongodb/03_Mongoose/#1-create","title":"1. Create","text":"<pre><code>const newUser = new User({ name: \"Luke\", age: 16, email: \"Luke@example.com\" });\nawait newUser.save();\n</code></pre>"},{"location":"mongodb/03_Mongoose/#2-read","title":"2. Read","text":"<pre><code>const users = await User.find(); // Get all users\nconst user = await User.findOne({ name: \"Luke\" }); // Find one\nconst userById = await User.findById(\"id_here\"); // Find by ID\n</code></pre>"},{"location":"mongodb/03_Mongoose/#3-update","title":"3. Update","text":"<pre><code>await User.updateOne({ name: \"Luke\" }, { age: 17 });\nawait User.findByIdAndUpdate(\"id_here\", { age: 18 }, { new: true });\n</code></pre>"},{"location":"mongodb/03_Mongoose/#4-delete","title":"4. Delete","text":"<pre><code>await User.deleteOne({ name: \"Luke\" });\nawait User.findByIdAndDelete(\"id_here\");\n</code></pre>"},{"location":"mongodb/03_Mongoose/#schema-types","title":"Schema Types","text":"<p>Common field types:</p> <pre><code>String, Number, Boolean, Date, Array, ObjectId, Buffer\n</code></pre> <p>Example:</p> <pre><code>const postSchema = new mongoose.Schema({\n  title: String,\n  content: String,\n  tags: [String],\n  author: { type: mongoose.Schema.Types.ObjectId, ref: \"User\" },\n  date: { type: Date, default: Date.now }\n});\n</code></pre>"},{"location":"mongodb/03_Mongoose/#schema-validation","title":"Schema Validation","text":"<pre><code>const productSchema = new mongoose.Schema({\n  name: { type: String, required: true },\n  price: { type: Number, min: 0 },\n  inStock: { type: Boolean, default: true }\n});\n</code></pre>"},{"location":"mongodb/03_Mongoose/#middleware-hooks","title":"Middleware (Hooks)","text":"<p>Run logic before or after actions like saving or deleting.</p> <pre><code>userSchema.pre(\"save\", function (next) {\n  console.log(\"Saving user:\", this.name);\n  next();\n});\n</code></pre>"},{"location":"mongodb/03_Mongoose/#virtuals","title":"Virtuals","text":"<p>Computed fields that are not stored in the database.</p> <pre><code>userSchema.virtual(\"info\").get(function () {\n  return `${this.name} (${this.age} years old)`;\n});\n</code></pre>"},{"location":"mongodb/03_Mongoose/#populate-relations","title":"Populate (Relations)","text":"<p>Used to fetch related documents from another collection.</p> <pre><code>const post = await Post.find().populate(\"author\");\n</code></pre>"},{"location":"mongodb/03_Mongoose/#example-project-structure","title":"Example Project Structure","text":"<pre><code>project/\n\u251c\u2500\u2500 models/\n\u2502   \u2514\u2500\u2500 userModel.js\n\u251c\u2500\u2500 index.js\n\u2514\u2500\u2500 package.json\n</code></pre> <ul> <li>userModel.js</li> </ul> <pre><code>import mongoose from \"mongoose\";\n\nconst userSchema = new mongoose.Schema({\n  name: String,\n  email: String,\n  age: Number\n});\n\nexport default mongoose.model(\"User\", userSchema);\n</code></pre> <ul> <li>index.js</li> </ul> <pre><code>import mongoose from \"mongoose\";\nimport User from \"./models/userModel.js\";\n\nawait mongoose.connect(\"mongodb://localhost:27017/testDB\");\nconst user = await User.create({ name: \"Luke\", email: \"Luke@gmail.com\", age: 16 });\nconsole.log(user);\n</code></pre>"},{"location":"node-js/01_Basics/","title":"Intro and Setup","text":""},{"location":"node-js/01_Basics/#what-is-nodejs","title":"What is Node.js?","text":"<p>Node.js is a runtime environment that allows JavaScript to run outside the browser using Chrome's V8 engine. It's designed for building fast, scalable, and efficient network applications \u2014 especially servers and CLI tools.</p>"},{"location":"node-js/01_Basics/#key-features","title":"Key Features:","text":"<ul> <li>Asynchronous and non-blocking</li> <li>Built on event-driven architecture</li> <li>JavaScript on the backend</li> <li>Fast execution (compiled to machine code)</li> <li>Access to built-in modules (fs, http, path, etc.)</li> </ul>"},{"location":"node-js/01_Basics/#how-nodejs-works","title":"How Node.js Works","text":"<p>Node.js uses an event loop and callback queue to handle I/O asynchronously:</p> <ol> <li>Single-threaded main loop</li> <li>Background threads for I/O via <code>libuv</code></li> <li>Uses callbacks, Promises, or async/await for async flow</li> </ol>"},{"location":"node-js/01_Basics/#use-cases","title":"Use Cases","text":"<ul> <li>REST APIs and backend servers</li> <li>Real-time apps (chat, games)</li> <li>File processing scripts</li> <li>Command-line tools</li> <li>Microservices architecture</li> </ul>"},{"location":"node-js/01_Basics/#setting-up-nodejs","title":"Setting Up Node.js","text":""},{"location":"node-js/01_Basics/#1-install-nodejs","title":"1. Install Node.js","text":"<p>Download and install from: https://nodejs.org Choose the LTS version unless you need the latest features.</p>"},{"location":"node-js/01_Basics/#2-verify-installation","title":"2. Verify Installation","text":"<pre><code>node -v    # Node.js version\nnpm -v     # npm (Node Package Manager) version\n</code></pre>"},{"location":"node-js/01_Basics/#running-javascript-with-node","title":"Running JavaScript with Node","text":"<p>Create a file:</p> <pre><code>// hello.js\nconsole.log(\"Hello from Node.js\");\n</code></pre> <p>Run it in the terminal:</p> <pre><code>node hello.js\n</code></pre>"},{"location":"node-js/01_Basics/#node-repl-read-eval-print-loop","title":"Node REPL (Read-Eval-Print Loop)","text":"<p>An interactive shell to execute JS line-by-line.</p> <p>Start it:</p> <pre><code>node\n</code></pre> <p>Try this:</p> <pre><code>&gt; 5 + 3\n8\n&gt; const name = \"Node\"\n&gt; name.toUpperCase()\n'NODE'\n</code></pre> <p>Exit:</p> <pre><code>Ctrl + C (twice)\n</code></pre>"},{"location":"node-js/02_Modules-and-Packages/","title":"Modules and Packages","text":""},{"location":"node-js/02_Modules-and-Packages/#what-are-modules","title":"What Are Modules?","text":"<p>Modules are independent blocks of reusable code. In Node.js, every file is treated as a separate module.</p> <p>There are three types of modules:</p> <ol> <li>Core (built-in)</li> <li>Custom (user-defined)</li> <li>Third-party (npm packages)</li> </ol>"},{"location":"node-js/02_Modules-and-Packages/#commonjs-requiremoduleexports","title":"CommonJS (require/module.exports)","text":""},{"location":"node-js/02_Modules-and-Packages/#exporting-in-one-file","title":"Exporting in one file","text":"<pre><code>// math.js\nfunction add(a, b) {\n  return a + b;\n}\nmodule.exports = add;\n</code></pre>"},{"location":"node-js/02_Modules-and-Packages/#importing-in-another","title":"Importing in another","text":"<pre><code>// app.js\nconst add = require(\"./math\");\nconsole.log(add(2, 3)); // 5\n</code></pre> <p>You can export multiple values:</p> <pre><code>module.exports = {\n  add,\n  subtract\n};\n</code></pre>"},{"location":"node-js/02_Modules-and-Packages/#es-modules-importexport","title":"ES Modules (import/export)","text":"<p>Supported with <code>.mjs</code> extension or <code>\"type\": \"module\"</code> in <code>package.json</code>.</p> <pre><code>// math.mjs\nexport function add(a, b) {\n  return a + b;\n}\n</code></pre> <pre><code>// app.mjs\nimport { add } from './math.mjs';\nconsole.log(add(5, 6));\n</code></pre>"},{"location":"node-js/02_Modules-and-Packages/#built-in-modules","title":"Built-in Modules","text":"<p>Node provides many core modules out of the box. Common ones:</p> <ul> <li><code>fs</code> \u2013 file system</li> <li><code>path</code> \u2013 file paths</li> <li><code>http</code> \u2013 create web servers</li> <li><code>os</code> \u2013 system info</li> <li><code>events</code> \u2013 event emitter</li> </ul> <p>Example:</p> <pre><code>const path = require(\"path\");\n\nconsole.log(__filename);                  // full file path\nconsole.log(path.basename(__filename));  // file name\n</code></pre>"},{"location":"node-js/02_Modules-and-Packages/#creating-custom-modules","title":"Creating Custom Modules","text":"<p>Every file is its own module. Use <code>module.exports</code> to export, and <code>require()</code> to import.</p> <pre><code>// logger.js\nfunction log(msg) {\n  console.log(`[LOG]: ${msg}`);\n}\nmodule.exports = log;\n</code></pre> <pre><code>// main.js\nconst log = require(\"./logger\");\nlog(\"App started\");\n</code></pre>"},{"location":"node-js/02_Modules-and-Packages/#intro-to-npm-node-package-manager","title":"Intro to npm (Node Package Manager)","text":"<p>npm lets you install and manage third-party packages.</p> <p>Check version:</p> <pre><code>npm -v\n</code></pre> <p>Initialize a project:</p> <pre><code>npm init -y\n</code></pre> <p>This creates a <code>package.json</code> file that stores metadata and dependencies.</p>"},{"location":"node-js/02_Modules-and-Packages/#installing-packages","title":"Installing Packages","text":"<p>Install locally:</p> <pre><code>npm install chalk\n</code></pre> <p>Use:</p> <pre><code>const chalk = require(\"chalk\");\nconsole.log(chalk.green(\"Success!\"));\n</code></pre> <p>Install globally:</p> <pre><code>npm install -g nodemon\n</code></pre>"},{"location":"node-js/02_Modules-and-Packages/#dev-dependencies","title":"Dev Dependencies","text":"<p>Install a package for development only:</p> <pre><code>npm install nodemon --save-dev\n</code></pre>"},{"location":"node-js/02_Modules-and-Packages/#packagejson-basics","title":"package.json Basics","text":"<pre><code>{\n  \"name\": \"project-name\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"node index.js\",\n    \"dev\": \"nodemon index.js\"\n  },\n  \"dependencies\": {\n    \"chalk\": \"^5.0.0\"\n  },\n  \"devDependencies\": {\n    \"nodemon\": \"^2.0.0\"\n  }\n}\n</code></pre>"},{"location":"node-js/02_Modules-and-Packages/#package-lockjson","title":"package-lock.json","text":"<p>Tracks exact versions of all installed packages to ensure consistency across environments.</p>"},{"location":"node-js/02_Modules-and-Packages/#node_modules","title":"node_modules","text":"<p>Stores all installed packages. Do not push this folder to GitHub \u2014 use <code>.gitignore</code>.</p>"},{"location":"node-js/03_FileSystem-and-Path/","title":"File System and Path","text":""},{"location":"node-js/03_FileSystem-and-Path/#file-system-fs-module","title":"File System (fs module)","text":"<p>The <code>fs</code> module allows you to interact with the file system (read, write, update, delete files/directories).</p> <pre><code>const fs = require(\"fs\");\n</code></pre>"},{"location":"node-js/03_FileSystem-and-Path/#read-a-file-async","title":"Read a File (async)","text":"<pre><code>fs.readFile(\"file.txt\", \"utf8\", (err, data) =&gt; {\n  if (err) throw err;\n  console.log(data);\n});\n</code></pre>"},{"location":"node-js/03_FileSystem-and-Path/#read-a-file-sync","title":"Read a File (sync)","text":"<pre><code>const data = fs.readFileSync(\"file.txt\", \"utf8\");\nconsole.log(data);\n</code></pre>"},{"location":"node-js/03_FileSystem-and-Path/#write-a-file-overwrite","title":"Write a File (overwrite)","text":"<pre><code>fs.writeFile(\"output.txt\", \"Hello world\", (err) =&gt; {\n  if (err) throw err;\n  console.log(\"Written successfully\");\n});\n</code></pre>"},{"location":"node-js/03_FileSystem-and-Path/#append-to-a-file","title":"Append to a File","text":"<pre><code>fs.appendFile(\"output.txt\", \"\\nNew line\", (err) =&gt; {\n  if (err) throw err;\n});\n</code></pre>"},{"location":"node-js/03_FileSystem-and-Path/#delete-a-file","title":"Delete a File","text":"<pre><code>fs.unlink(\"output.txt\", (err) =&gt; {\n  if (err) throw err;\n});\n</code></pre>"},{"location":"node-js/03_FileSystem-and-Path/#create-a-directory","title":"Create a Directory","text":"<pre><code>fs.mkdir(\"myFolder\", (err) =&gt; {\n  if (err) throw err;\n});\n</code></pre>"},{"location":"node-js/03_FileSystem-and-Path/#read-directory-contents","title":"Read Directory Contents","text":"<pre><code>fs.readdir(\".\", (err, files) =&gt; {\n  if (err) throw err;\n  console.log(files);\n});\n</code></pre>"},{"location":"node-js/03_FileSystem-and-Path/#remove-a-directory","title":"Remove a Directory","text":"<pre><code>fs.rmdir(\"myFolder\", (err) =&gt; {\n  if (err) throw err;\n});\n</code></pre>"},{"location":"node-js/03_FileSystem-and-Path/#fspromises-modern-promise-based-api","title":"fs.promises (modern promise-based API)","text":"<pre><code>const fsPromises = require(\"fs\").promises;\n\nasync function readFile() {\n  const data = await fsPromises.readFile(\"file.txt\", \"utf8\");\n  console.log(data);\n}\n</code></pre>"},{"location":"node-js/03_FileSystem-and-Path/#path-module","title":"Path Module","text":"<p>The <code>path</code> module is used to work with file and directory paths in a platform-independent way.</p> <pre><code>const path = require(\"path\");\n</code></pre>"},{"location":"node-js/03_FileSystem-and-Path/#common-methods","title":"Common Methods","text":"<pre><code>__dirname                // current directory\n__filename               // current file path\n\npath.basename(__filename)    // just file name\npath.dirname(__filename)     // directory name\npath.extname(__filename)     // file extension\npath.join(\"folder\", \"file.txt\")  // cross-platform path\npath.resolve(\"folder\", \"file.txt\") // absolute path\n</code></pre>"},{"location":"node-js/03_FileSystem-and-Path/#example","title":"Example","text":"<pre><code>const filePath = path.join(__dirname, \"data\", \"info.txt\");\nconsole.log(filePath);\n</code></pre>"},{"location":"node-js/04_HTTP-and-Routing/","title":"HTTP and Routing","text":""},{"location":"node-js/04_HTTP-and-Routing/#http-module","title":"HTTP Module","text":"<p>The <code>http</code> module lets you create a basic web server without using any external frameworks.</p> <pre><code>const http = require(\"http\");\n</code></pre>"},{"location":"node-js/04_HTTP-and-Routing/#create-a-basic-server","title":"Create a Basic Server","text":"<pre><code>const server = http.createServer((req, res) =&gt; {\n  res.write(\"Hello from Node.js server\");\n  res.end();\n});\n\nserver.listen(3000, () =&gt; {\n  console.log(\"Server running on http://localhost:3000\");\n});\n</code></pre>"},{"location":"node-js/04_HTTP-and-Routing/#handling-routes","title":"Handling Routes","text":"<p>Use <code>req.url</code> to detect the requested path and <code>req.method</code> to detect the HTTP method.</p> <pre><code>const server = http.createServer((req, res) =&gt; {\n  if (req.url === \"/\") {\n    res.write(\"Home Page\");\n  } else if (req.url === \"/about\") {\n    res.write(\"About Page\");\n  } else {\n    res.writeHead(404);\n    res.write(\"Page Not Found\");\n  }\n  res.end();\n});\n</code></pre>"},{"location":"node-js/04_HTTP-and-Routing/#sending-json","title":"Sending JSON","text":"<pre><code>if (req.url === \"/api\") {\n  res.writeHead(200, { \"Content-Type\": \"application/json\" });\n  res.end(JSON.stringify({ name: \"Node\", version: \"1.0\" }));\n}\n</code></pre>"},{"location":"node-js/04_HTTP-and-Routing/#serving-html-files","title":"Serving HTML Files","text":"<pre><code>const fs = require(\"fs\");\n\nif (req.url === \"/home\") {\n  fs.readFile(\"index.html\", (err, data) =&gt; {\n    if (err) {\n      res.writeHead(500);\n      res.end(\"Server Error\");\n      return;\n    }\n    res.writeHead(200, { \"Content-Type\": \"text/html\" });\n    res.end(data);\n  });\n}\n</code></pre>"},{"location":"node-js/04_HTTP-and-Routing/#handling-query-parameters","title":"Handling Query Parameters","text":"<pre><code>const url = require(\"url\");\n\nconst server = http.createServer((req, res) =&gt; {\n  const parsedUrl = url.parse(req.url, true); // true to parse query\n  const name = parsedUrl.query.name;\n  res.end(`Hello ${name}`);\n});\n</code></pre> <p>Example: Request to <code>/greet?name=John</code> \u2192 Response: <code>Hello John</code></p>"},{"location":"node-js/04_HTTP-and-Routing/#setting-headers","title":"Setting Headers","text":"<pre><code>res.writeHead(200, {\n  \"Content-Type\": \"text/plain\",\n  \"Custom-Header\": \"value\"\n});\n</code></pre>"},{"location":"node-js/04_HTTP-and-Routing/#http-status-codes","title":"HTTP Status Codes","text":"Code Meaning 200 OK 404 Not Found 500 Internal Server Error"},{"location":"node-js/05_Events-and-Streams/","title":"Events and Streams","text":""},{"location":"node-js/05_Events-and-Streams/#eventemitter-events-module","title":"EventEmitter (events module)","text":"<p>Node.js uses the EventEmitter pattern to handle asynchronous events. It's part of the built-in <code>events</code> module.</p> <pre><code>const EventEmitter = require(\"events\");\nconst emitter = new EventEmitter();\n</code></pre>"},{"location":"node-js/05_Events-and-Streams/#emitting-and-listening-to-events","title":"Emitting and Listening to Events","text":"<pre><code>emitter.on(\"greet\", (name) =&gt; {\n  console.log(`Hello, ${name}`);\n});\n\nemitter.emit(\"greet\", \"Alice\"); // Hello, Alice\n</code></pre>"},{"location":"node-js/05_Events-and-Streams/#multiple-listeners","title":"Multiple Listeners","text":"<p>You can register multiple listeners to the same event.</p> <pre><code>emitter.on(\"log\", () =&gt; console.log(\"Listener 1\"));\nemitter.on(\"log\", () =&gt; console.log(\"Listener 2\"));\nemitter.emit(\"log\");\n</code></pre>"},{"location":"node-js/05_Events-and-Streams/#once","title":"Once","text":"<p>Use <code>.once()</code> to listen only one time.</p> <pre><code>emitter.once(\"data\", () =&gt; console.log(\"Received once\"));\nemitter.emit(\"data\"); // Triggers\nemitter.emit(\"data\"); // Ignored\n</code></pre>"},{"location":"node-js/05_Events-and-Streams/#remove-listener","title":"Remove Listener","text":"<pre><code>function log() {\n  console.log(\"Log event\");\n}\n\nemitter.on(\"log\", log);\nemitter.removeListener(\"log\", log);\n</code></pre>"},{"location":"node-js/05_Events-and-Streams/#streams","title":"Streams","text":"<p>Streams handle data in chunks, great for large files or network traffic.</p> <p>Four types:</p> <ul> <li>Readable</li> <li>Writable</li> <li>Duplex (read + write)</li> <li>Transform (modify during read/write)</li> </ul>"},{"location":"node-js/05_Events-and-Streams/#readable-stream-example","title":"Readable Stream Example","text":"<pre><code>const fs = require(\"fs\");\nconst readStream = fs.createReadStream(\"bigfile.txt\", \"utf8\");\n\nreadStream.on(\"data\", (chunk) =&gt; {\n  console.log(\"Received chunk:\", chunk);\n});\n</code></pre>"},{"location":"node-js/05_Events-and-Streams/#writable-stream-example","title":"Writable Stream Example","text":"<pre><code>const writeStream = fs.createWriteStream(\"output.txt\");\n\nwriteStream.write(\"Line 1\\n\");\nwriteStream.write(\"Line 2\\n\");\nwriteStream.end();\n</code></pre>"},{"location":"node-js/05_Events-and-Streams/#pipe","title":"Pipe","text":"<p>Use <code>.pipe()</code> to connect readable to writable stream.</p> <pre><code>const fs = require(\"fs\");\n\nconst input = fs.createReadStream(\"source.txt\");\nconst output = fs.createWriteStream(\"copy.txt\");\n\ninput.pipe(output);\n</code></pre>"},{"location":"node-js/05_Events-and-Streams/#buffer","title":"Buffer","text":"<p>Buffers are raw binary data stored in memory outside the V8 heap.</p> <pre><code>const buf = Buffer.from(\"Hello\");\nconsole.log(buf);           // &lt;Buffer 48 65 6c 6c 6f&gt;\nconsole.log(buf.toString()); // Hello\n</code></pre> <p>Use Buffers when working with streams, sockets, or binary files.</p>"},{"location":"node-js/06_Process-and-Globals/","title":"Process and Globals","text":""},{"location":"node-js/06_Process-and-Globals/#the-process-object","title":"The <code>process</code> Object","text":"<p><code>process</code> is a global object in Node.js that provides information and control over the current Node.js process.</p>"},{"location":"node-js/06_Process-and-Globals/#access-command-line-arguments","title":"Access Command Line Arguments","text":"<pre><code>console.log(process.argv);\n</code></pre> <p>Run:</p> <pre><code>node app.js hello world\n</code></pre> <p>Result:</p> <pre><code>[\n  '/path/to/node',\n  '/path/to/app.js',\n  'hello',\n  'world'\n]\n</code></pre> <p>Use <code>process.argv.slice(2)</code> to ignore the first two entries.</p>"},{"location":"node-js/06_Process-and-Globals/#environment-variables","title":"Environment Variables","text":"<pre><code>console.log(process.env.NODE_ENV);\n</code></pre> <p>Set:</p> <pre><code>NODE_ENV=development node app.js\n</code></pre> <p>Use <code>.env</code> files in real apps (with dotenv package).</p>"},{"location":"node-js/06_Process-and-Globals/#exit-code","title":"Exit Code","text":"<pre><code>process.exit(0); // success\nprocess.exit(1); // failure\n</code></pre>"},{"location":"node-js/06_Process-and-Globals/#events","title":"Events","text":"<pre><code>process.on(\"exit\", (code) =&gt; {\n  console.log(\"Exiting with code:\", code);\n});\n</code></pre>"},{"location":"node-js/06_Process-and-Globals/#global-variables","title":"Global Variables","text":"<p>These are available in every Node.js file.</p>"},{"location":"node-js/06_Process-and-Globals/#__dirname","title":"<code>__dirname</code>","text":"<p>Absolute path of the current directory.</p> <pre><code>console.log(__dirname);\n</code></pre>"},{"location":"node-js/06_Process-and-Globals/#__filename","title":"<code>__filename</code>","text":"<p>Absolute path of the current file.</p> <pre><code>console.log(__filename);\n</code></pre>"},{"location":"node-js/06_Process-and-Globals/#require","title":"<code>require</code>","text":"<p>Used to import CommonJS modules.</p> <pre><code>const fs = require(\"fs\");\n</code></pre>"},{"location":"node-js/06_Process-and-Globals/#module-and-exports","title":"<code>module</code> and <code>exports</code>","text":"<p>Control what a module exposes.</p> <pre><code>module.exports = {}; // or exports.myFunc = ...\n</code></pre>"},{"location":"node-js/06_Process-and-Globals/#settimeout-and-setinterval","title":"setTimeout and setInterval","text":"<p>Work like in the browser but run in Node\u2019s event loop.</p> <pre><code>setTimeout(() =&gt; {\n  console.log(\"After 1 second\");\n}, 1000);\n\nconst intervalId = setInterval(() =&gt; {\n  console.log(\"Repeating\");\n}, 2000);\n\nsetTimeout(() =&gt; clearInterval(intervalId), 7000); // stop after 7s\n</code></pre>"},{"location":"node-js/06_Process-and-Globals/#reading-from-stdin","title":"Reading from stdin","text":"<pre><code>process.stdin.on(\"data\", (data) =&gt; {\n  console.log(`You typed: ${data.toString().trim()}`);\n});\n</code></pre> <p>To use:</p> <pre><code>node app.js\n# then type something and press Enter\n</code></pre>"},{"location":"node-js/07_Error-Handling-and-Debugging/","title":"Error Handling and Debugging","text":""},{"location":"node-js/07_Error-Handling-and-Debugging/#handling-errors-with-trycatch","title":"Handling Errors with try/catch","text":"<p>Use <code>try/catch</code> to handle synchronous errors.</p> <pre><code>try {\n  const result = riskyFunction();\n  console.log(result);\n} catch (err) {\n  console.error(\"Error:\", err.message);\n}\n</code></pre>"},{"location":"node-js/07_Error-Handling-and-Debugging/#example","title":"Example:","text":"<pre><code>try {\n  const x = y + 1; // y is not defined\n} catch (err) {\n  console.error(\"Caught error:\", err.message);\n}\n</code></pre>"},{"location":"node-js/07_Error-Handling-and-Debugging/#handling-async-errors-with-promises","title":"Handling Async Errors with Promises","text":"<pre><code>fetchData()\n  .then((res) =&gt; {\n    console.log(res);\n  })\n  .catch((err) =&gt; {\n    console.error(\"Error:\", err);\n  });\n</code></pre>"},{"location":"node-js/07_Error-Handling-and-Debugging/#asyncawait-with-trycatch","title":"Async/Await with try/catch","text":"<pre><code>async function loadData() {\n  try {\n    const res = await fetchSomething();\n    console.log(res);\n  } catch (err) {\n    console.error(\"Async Error:\", err.message);\n  }\n}\n</code></pre>"},{"location":"node-js/07_Error-Handling-and-Debugging/#emitting-and-handling-error-events","title":"Emitting and Handling Error Events","text":"<p>Some core modules like streams emit <code>error</code> events.</p> <pre><code>const fs = require(\"fs\");\nconst stream = fs.createReadStream(\"missing.txt\");\n\nstream.on(\"error\", (err) =&gt; {\n  console.error(\"Stream error:\", err.message);\n});\n</code></pre>"},{"location":"node-js/07_Error-Handling-and-Debugging/#throwing-custom-errors","title":"Throwing Custom Errors","text":"<pre><code>function divide(a, b) {\n  if (b === 0) throw new Error(\"Cannot divide by zero\");\n  return a / b;\n}\n</code></pre>"},{"location":"node-js/07_Error-Handling-and-Debugging/#global-error-handlers","title":"Global Error Handlers","text":"<p>Catch unhandled errors:</p> <pre><code>process.on(\"uncaughtException\", (err) =&gt; {\n  console.error(\"Uncaught Exception:\", err);\n});\n</code></pre> <p>For unhandled Promise rejections:</p> <pre><code>process.on(\"unhandledRejection\", (reason) =&gt; {\n  console.error(\"Unhandled Rejection:\", reason);\n});\n</code></pre>"},{"location":"node-js/07_Error-Handling-and-Debugging/#debugging","title":"Debugging","text":""},{"location":"node-js/07_Error-Handling-and-Debugging/#1-consolelog","title":"1. <code>console.log</code>","text":"<p>Simple and fast, use it to inspect values.</p> <pre><code>console.log(\"Debug here:\", variable);\n</code></pre>"},{"location":"node-js/07_Error-Handling-and-Debugging/#2-debugger-keyword","title":"2. <code>debugger</code> Keyword","text":"<p>Pauses execution like a breakpoint.</p> <pre><code>function test() {\n  const a = 5;\n  debugger;\n  const b = a + 10;\n  return b;\n}\n</code></pre> <p>Run with:</p> <pre><code>node inspect app.js\n</code></pre> <p>Then use <code>n</code>, <code>c</code>, <code>repl</code>, etc. to step through the code.</p>"},{"location":"node-js/07_Error-Handling-and-Debugging/#3-vs-code-debugger","title":"3. VS Code Debugger","text":"<ul> <li>Set breakpoints directly in the editor</li> <li>Use launch configuration (<code>.vscode/launch.json</code>)</li> <li>Run using the built-in debugger</li> </ul>"},{"location":"node-js/08_JSON-Timers-CLI/","title":"JSON, Timers and CLI Tools","text":""},{"location":"node-js/08_JSON-Timers-CLI/#working-with-json","title":"Working with JSON","text":"<p>JSON (JavaScript Object Notation) is commonly used for configuration, data files, and APIs.</p>"},{"location":"node-js/08_JSON-Timers-CLI/#read-json-from-a-file","title":"Read JSON from a File","text":"<pre><code>const fs = require(\"fs\");\n\nconst data = fs.readFileSync(\"data.json\", \"utf8\");\nconst parsed = JSON.parse(data);\n\nconsole.log(parsed.name);\n</code></pre>"},{"location":"node-js/08_JSON-Timers-CLI/#write-json-to-a-file","title":"Write JSON to a File","text":"<pre><code>const user = { name: \"Alice\", age: 25 };\nconst json = JSON.stringify(user, null, 2); // pretty print\n\nfs.writeFileSync(\"user.json\", json);\n</code></pre>"},{"location":"node-js/08_JSON-Timers-CLI/#parse-and-stringify","title":"Parse and Stringify","text":"<pre><code>const obj = JSON.parse('{\"name\": \"Bob\"}');\nconst str = JSON.stringify(obj);\n</code></pre>"},{"location":"node-js/08_JSON-Timers-CLI/#timers","title":"Timers","text":"<p>Node provides timer functions similar to the browser.</p>"},{"location":"node-js/08_JSON-Timers-CLI/#settimeout","title":"setTimeout","text":"<p>Run a function once after a delay (ms).</p> <pre><code>setTimeout(() =&gt; {\n  console.log(\"Delayed message\");\n}, 1000);\n</code></pre>"},{"location":"node-js/08_JSON-Timers-CLI/#setinterval","title":"setInterval","text":"<p>Run a function repeatedly at an interval (ms).</p> <pre><code>const intervalId = setInterval(() =&gt; {\n  console.log(\"Repeats every 2s\");\n}, 2000);\n\nsetTimeout(() =&gt; clearInterval(intervalId), 7000); // stop after 7s\n</code></pre>"},{"location":"node-js/08_JSON-Timers-CLI/#setimmediate","title":"setImmediate","text":"<p>Runs a callback after the current event loop phase.</p> <pre><code>setImmediate(() =&gt; {\n  console.log(\"Runs immediately after current task\");\n});\n</code></pre>"},{"location":"node-js/08_JSON-Timers-CLI/#cleartimeout-clearinterval","title":"clearTimeout / clearInterval","text":"<p>Stop scheduled timers.</p> <pre><code>const id = setTimeout(() =&gt; {}, 5000);\nclearTimeout(id);\n</code></pre>"},{"location":"node-js/08_JSON-Timers-CLI/#building-cli-tools","title":"Building CLI Tools","text":""},{"location":"node-js/08_JSON-Timers-CLI/#reading-command-line-arguments","title":"Reading Command-Line Arguments","text":"<pre><code>const args = process.argv.slice(2);\nconsole.log(args); // [\"hello\", \"world\"]\n</code></pre> <p>Run with:</p> <pre><code>node script.js hello world\n</code></pre>"},{"location":"node-js/08_JSON-Timers-CLI/#simple-flag-parser","title":"Simple Flag Parser","text":"<pre><code>const flags = {};\nprocess.argv.slice(2).forEach(arg =&gt; {\n  const [key, value] = arg.split(\"=\");\n  flags[key] = value;\n});\n\nconsole.log(flags);\n// node app.js name=alice age=30\n// Output: { name: 'alice', age: '30' }\n</code></pre>"},{"location":"node-js/08_JSON-Timers-CLI/#output-with-processstdout","title":"Output with process.stdout","text":"<pre><code>process.stdout.write(\"Type something: \");\n</code></pre>"},{"location":"node-js/08_JSON-Timers-CLI/#input-with-processstdin","title":"Input with process.stdin","text":"<pre><code>process.stdin.on(\"data\", (data) =&gt; {\n  console.log(`You typed: ${data.toString().trim()}`);\n});\n</code></pre>"},{"location":"react/01_Basics/","title":"Introduction","text":"<p>React is a JavaScript library for building user interfaces. It is maintained by Meta (formerly Facebook) and used in production by companies like Instagram, Netflix, and Airbnb.</p>"},{"location":"react/01_Basics/#what-is-react","title":"What is React?","text":"<ul> <li>A component-based, declarative library for building UI.</li> <li>Focuses only on the View in MVC (Model-View-Controller).</li> <li>Uses a virtual DOM for fast rendering.</li> <li>Enables reactive, state-driven UI development.</li> </ul>"},{"location":"react/01_Basics/#key-features","title":"Key Features","text":"Feature Description Component-Based Breaks UI into reusable pieces (components). Declarative Describe what UI should look like based on state. Virtual DOM Efficiently updates only what's changed. JSX JavaScript + XML syntax for describing UI. Unidirectional Data Flow Data flows from parent to child only."},{"location":"react/01_Basics/#why-use-react","title":"Why Use React?","text":"<ul> <li>Faster DOM updates via virtual DOM</li> <li>Organized and reusable component structure</li> <li>Strong ecosystem (React Router, Redux, Hooks, etc.)</li> <li>Large community and long-term support</li> <li>Works with any backend or other libraries</li> </ul>"},{"location":"react/01_Basics/#jsx-javascript-xml","title":"JSX: JavaScript + XML","text":"<p>JSX lets you write HTML-like code inside JavaScript.</p> <pre><code>const element = &lt;h1&gt;Hello, React!&lt;/h1&gt;;\n</code></pre> <p>This is converted to:</p> <pre><code>React.createElement(\"h1\", null, \"Hello, React!\");\n</code></pre>"},{"location":"react/01_Basics/#basic-component-example","title":"Basic Component Example","text":"<pre><code>function Welcome(props) {\n  return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;\n}\n\nexport default Welcome;\n</code></pre> <p>Usage:</p> <pre><code>&lt;Welcome name=\"Alice\" /&gt;\n</code></pre>"},{"location":"react/01_Basics/#state-and-props","title":"State and Props","text":"<ul> <li>Props: Read-only data passed to a component</li> <li>State: Mutable data local to a component</li> </ul> <pre><code>import { useState } from \"react\";\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increment&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"react/01_Basics/#react-project-structure-vite","title":"React Project Structure (Vite)","text":"<pre><code>npm create vite@latest my-app --template react\ncd my-app\nnpm install\nnpm run dev\n</code></pre> <p>Main files:</p> <pre><code>my-app/\n\u251c\u2500 src/\n\u2502  \u251c\u2500 App.jsx\n\u2502  \u251c\u2500 main.jsx\n\u251c\u2500 index.html\n\u251c\u2500 package.json\n</code></pre>"},{"location":"react/01_Basics/#common-react-tools-libraries","title":"Common React Tools &amp; Libraries","text":"<ul> <li>Vite / Create React App \u2013 setup tools</li> <li>React Router \u2013 routing</li> <li>Redux / Context API \u2013 state management</li> <li>React Query / SWR \u2013 data fetching and caching</li> <li>Tailwind / Styled Components \u2013 styling</li> </ul>"},{"location":"react/02_Components-and-Props/","title":"Components and Props","text":"<p>In React, components are the core building blocks of the UI. They allow you to split the interface into independent, reusable pieces.</p>"},{"location":"react/02_Components-and-Props/#1-what-is-a-component","title":"1. What is a Component?","text":"<p>A component is a JavaScript function (or class) that returns a React element (JSX).</p>"},{"location":"react/02_Components-and-Props/#functional-component-example","title":"Functional Component Example:","text":"<pre><code>function Greeting() {\n  return &lt;h1&gt;Hello, world!&lt;/h1&gt;;\n}\n</code></pre> <p>You use it like an HTML tag:</p> <pre><code>&lt;Greeting /&gt;\n</code></pre>"},{"location":"react/02_Components-and-Props/#2-types-of-components","title":"2. Types of Components","text":"Type Description Functional Basic functions that return JSX Class-based (legacy) Older style with <code>class extends React.Component</code> <p>Modern React uses functional components with Hooks.</p>"},{"location":"react/02_Components-and-Props/#3-component-naming-rules","title":"3. Component Naming Rules","text":"<ul> <li>Must start with an uppercase letter (<code>&lt;MyComponent /&gt;</code>)</li> <li>Must return one root element (wrap multiple with a <code>&lt;div&gt;</code> or fragment)</li> </ul>"},{"location":"react/02_Components-and-Props/#4-props-properties","title":"4. Props (Properties)","text":"<p>Props are inputs passed into components, similar to arguments in a function.</p>"},{"location":"react/02_Components-and-Props/#passing-props","title":"Passing Props:","text":"<pre><code>function Welcome(props) {\n  return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;\n}\n\n// Usage:\n&lt;Welcome name=\"Alice\" /&gt;\n</code></pre> <p>Using destructuring:</p> <pre><code>function Welcome({ name }) {\n  return &lt;h1&gt;Hello, {name}&lt;/h1&gt;;\n}\n</code></pre>"},{"location":"react/02_Components-and-Props/#5-multiple-props-example","title":"5. Multiple Props Example","text":"<pre><code>function Profile({ name, age }) {\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Name: {name}&lt;/p&gt;\n      &lt;p&gt;Age: {age}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\n// Usage:\n&lt;Profile name=\"Bob\" age={20} /&gt;\n</code></pre>"},{"location":"react/02_Components-and-Props/#6-default-props","title":"6. Default Props","text":"<p>You can define fallback values if a prop is not passed.</p> <pre><code>function Button({ label = \"Click Me\" }) {\n  return &lt;button&gt;{label}&lt;/button&gt;;\n}\n</code></pre> <p>Or explicitly:</p> <pre><code>Button.defaultProps = {\n  label: \"Click Me\"\n};\n</code></pre>"},{"location":"react/02_Components-and-Props/#7-props-are-read-only","title":"7. Props Are Read-Only","text":"<p>Props cannot be modified inside the component. They are passed from parent to child and are immutable.</p> <pre><code>function ChangeName({ name }) {\n  name = \"New Name\"; // \u274c Don't do this\n}\n</code></pre>"},{"location":"react/02_Components-and-Props/#8-children-prop","title":"8. Children Prop","text":"<p><code>props.children</code> allows you to pass elements between component tags.</p> <pre><code>function Card({ children }) {\n  return &lt;div className=\"card\"&gt;{children}&lt;/div&gt;;\n}\n\n&lt;Card&gt;\n  &lt;h2&gt;Title&lt;/h2&gt;\n  &lt;p&gt;Description inside the card.&lt;/p&gt;\n&lt;/Card&gt;\n</code></pre>"},{"location":"react/02_Components-and-Props/#9-conditional-rendering-with-props","title":"9. Conditional Rendering with Props","text":"<pre><code>function Status({ isOnline }) {\n  return &lt;p&gt;{isOnline ? \"Online\" : \"Offline\"}&lt;/p&gt;;\n}\n</code></pre>"},{"location":"react/03_Hooks-and-States/","title":"Hooks and State","text":"<p>Hooks are functions that let you use React features like state and lifecycle in functional components.</p>"},{"location":"react/03_Hooks-and-States/#1-what-is-state","title":"1. What is State?","text":"<p>State is data that changes over time and affects what gets rendered on the screen.</p>"},{"location":"react/03_Hooks-and-States/#example","title":"Example:","text":"<pre><code>function Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Count: {count}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;+&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <ul> <li><code>useState(0)</code> initializes <code>count</code> to 0</li> <li><code>setCount()</code> updates it and re-renders the component</li> </ul>"},{"location":"react/03_Hooks-and-States/#2-usestate-hook","title":"2. useState Hook","text":"<pre><code>const [state, setState] = useState(initialValue);\n</code></pre> <ul> <li>Can hold numbers, strings, objects, arrays, etc.</li> <li>Updating state causes a re-render</li> <li>Don't mutate state directly</li> </ul>"},{"location":"react/03_Hooks-and-States/#example-with-object","title":"Example with Object:","text":"<pre><code>const [user, setUser] = useState({ name: \"Rahul\", age: 15 });\n\nsetUser({ ...user, age: 16 }); // use spread to keep other properties\n</code></pre>"},{"location":"react/03_Hooks-and-States/#3-rules-of-hooks","title":"3. Rules of Hooks","text":"<ol> <li>Only call hooks at the top level (not inside loops, conditions, or nested functions)</li> <li>Only call hooks inside React components or custom hooks</li> </ol>"},{"location":"react/03_Hooks-and-States/#4-multiple-usestate-hooks","title":"4. Multiple useState Hooks","text":"<p>You can use multiple <code>useState</code> calls in one component:</p> <pre><code>const [name, setName] = useState(\"\");\nconst [email, setEmail] = useState(\"\");\n</code></pre>"},{"location":"react/03_Hooks-and-States/#5-useeffect-hook-intro","title":"5. useEffect Hook (Intro)","text":"<p><code>useEffect</code> runs code after render. Commonly used for:</p> <ul> <li>Fetching data</li> <li>Subscribing/unsubscribing</li> <li>DOM updates</li> </ul> <pre><code>useEffect(() =&gt; {\n  console.log(\"Component mounted or state changed\");\n}, [dependency]);\n</code></pre> <ul> <li>Runs on mount and whenever dependencies change</li> <li>Empty dependency array <code>[]</code> = run once on mount</li> </ul>"},{"location":"react/03_Hooks-and-States/#6-derived-state-from-props","title":"6. Derived State from Props","text":"<p>Avoid copying props into state unless necessary. Instead, compute directly in JSX:</p> <pre><code>function Greeting({ name }) {\n  return &lt;h1&gt;Hello, {name.toUpperCase()}&lt;/h1&gt;;\n}\n</code></pre>"},{"location":"react/03_Hooks-and-States/#7-updating-state-based-on-previous-value","title":"7. Updating State Based on Previous Value","text":"<p>Always use a function when new state depends on old state:</p> <pre><code>setCount(prev =&gt; prev + 1);\n</code></pre>"},{"location":"react/03_Hooks-and-States/#8-usestate-with-arrays","title":"8. useState with Arrays","text":"<pre><code>const [items, setItems] = useState([]);\n\nsetItems([...items, newItem]); // add item\nsetItems(items.filter(item =&gt; item.id !== id)); // remove item\n</code></pre>"},{"location":"react/03_Hooks-and-States/#9-controlled-components","title":"9. Controlled Components","text":"<p>Inputs should be controlled by React state:</p> <pre><code>const [text, setText] = useState(\"\");\n\n&lt;input value={text} onChange={(e) =&gt; setText(e.target.value)} /&gt;\n</code></pre>"},{"location":"react/04_useEffect-hook/","title":"useEffect Hook","text":"<p>The <code>useEffect</code> hook lets you perform side effects in functional components \u2014 like fetching data, setting up subscriptions, timers, or manually changing the DOM.</p>"},{"location":"react/04_useEffect-hook/#1-basic-syntax","title":"1. Basic Syntax","text":"<pre><code>useEffect(() =&gt; {\n  // code to run after render\n}, [dependencies]);\n</code></pre> <ul> <li>Runs after every render by default</li> <li>The second argument (dependency array) controls when it runs</li> </ul>"},{"location":"react/04_useEffect-hook/#2-no-dependency-array","title":"2. No Dependency Array","text":"<pre><code>useEffect(() =&gt; {\n  console.log(\"Runs after every render\");\n});\n</code></pre> <ul> <li>Executes after every re-render</li> </ul>"},{"location":"react/04_useEffect-hook/#3-empty-dependency-array","title":"3. Empty Dependency Array <code>[]</code>","text":"<pre><code>useEffect(() =&gt; {\n  console.log(\"Runs once on mount\");\n}, []);\n</code></pre> <ul> <li>Runs only once when the component is mounted (like <code>componentDidMount</code>)</li> </ul>"},{"location":"react/04_useEffect-hook/#4-with-dependencies","title":"4. With Dependencies","text":"<pre><code>useEffect(() =&gt; {\n  console.log(\"Runs when count changes\");\n}, [count]);\n</code></pre> <ul> <li>Runs when <code>count</code> changes</li> <li>Add all external state/props used in the effect to the array</li> </ul>"},{"location":"react/04_useEffect-hook/#5-cleanup-function","title":"5. Cleanup Function","text":"<p>Return a function inside <code>useEffect</code> to handle cleanup (e.g., remove event listeners, clear intervals):</p> <pre><code>useEffect(() =&gt; {\n  const id = setInterval(() =&gt; {\n    console.log(\"tick\");\n  }, 1000);\n\n  return () =&gt; {\n    clearInterval(id); // cleanup on unmount or re-run\n  };\n}, []);\n</code></pre>"},{"location":"react/04_useEffect-hook/#6-fetching-data-example","title":"6. Fetching Data Example","text":"<pre><code>import { useState, useEffect } from \"react\";\n\nfunction Users() {\n  const [users, setUsers] = useState([]);\n\n  useEffect(() =&gt; {\n    fetch(\"https://api.example.com/users\")\n      .then(res =&gt; res.json())\n      .then(data =&gt; setUsers(data));\n  }, []);\n\n  return (\n    &lt;ul&gt;\n      {users.map(user =&gt; &lt;li key={user.id}&gt;{user.name}&lt;/li&gt;)}\n    &lt;/ul&gt;\n  );\n}\n</code></pre>"},{"location":"react/04_useEffect-hook/#7-multiple-effects","title":"7. Multiple Effects","text":"<p>You can use <code>useEffect</code> multiple times per component for separation of concerns.</p> <pre><code>useEffect(() =&gt; {\n  // first effect\n}, [a]);\n\nuseEffect(() =&gt; {\n  // second effect\n}, [b]);\n</code></pre>"},{"location":"react/04_useEffect-hook/#8-infinite-loop-warning","title":"8. Infinite Loop Warning","text":"<p>Don\u2019t update state directly inside <code>useEffect</code> without a condition or it will cause an infinite render loop.</p> <pre><code>useEffect(() =&gt; {\n  setCount(count + 1); // BAD: triggers render \u2192 runs again\n});\n</code></pre>"},{"location":"react/05_useRef-hook/","title":"useRef Hook","text":"<p>The <code>useRef</code> hook gives you a mutable reference to a DOM element or any value that persists across renders without causing re-renders.</p>"},{"location":"react/05_useRef-hook/#1-syntax","title":"1. Syntax","text":"<pre><code>const ref = useRef(initialValue);\n</code></pre> <ul> <li><code>ref.current</code> holds the value</li> <li>Unlike state, updating <code>ref.current</code> doesn\u2019t re-render the component</li> </ul>"},{"location":"react/05_useRef-hook/#2-accessing-dom-elements","title":"2. Accessing DOM Elements","text":"<pre><code>import { useRef, useEffect } from \"react\";\n\nfunction InputFocus() {\n  const inputRef = useRef(null);\n\n  useEffect(() =&gt; {\n    inputRef.current.focus(); // focus input on mount\n  }, []);\n\n  return &lt;input ref={inputRef} type=\"text\" /&gt;;\n}\n</code></pre> <ul> <li>The <code>ref</code> is attached to the JSX element</li> <li>After mounting, <code>ref.current</code> points to the DOM node</li> </ul>"},{"location":"react/05_useRef-hook/#3-persisting-values-without-re-renders","title":"3. Persisting Values Without Re-Renders","text":"<pre><code>function Timer() {\n  const count = useRef(0);\n\n  useEffect(() =&gt; {\n    const interval = setInterval(() =&gt; {\n      count.current += 1;\n      console.log(count.current);\n    }, 1000);\n    return () =&gt; clearInterval(interval);\n  }, []);\n}\n</code></pre> <ul> <li><code>count</code> is preserved between renders</li> <li>Changes to <code>count.current</code> do not trigger a re-render</li> </ul>"},{"location":"react/05_useRef-hook/#4-useref-vs-usestate","title":"4. useRef vs useState","text":"Feature <code>useRef</code> <code>useState</code> Causes re-render \u274c No \u2705 Yes Stores value \u2705 Yes \u2705 Yes DOM access \u2705 Yes (<code>ref.current</code>) \u274c No Use case DOM refs, timers, persistent vars UI state / reactive data"},{"location":"react/05_useRef-hook/#5-useref-in-event-handlers","title":"5. useRef in Event Handlers","text":"<p>Good for holding previous values or timers:</p> <pre><code>const intervalRef = useRef(null);\n\nfunction stopTimer() {\n  clearInterval(intervalRef.current);\n}\n</code></pre>"},{"location":"react/05_useRef-hook/#6-forwarding-refs-advanced","title":"6. Forwarding Refs (Advanced)","text":"<p>To pass a ref to a child component:</p> <pre><code>const Input = React.forwardRef((props, ref) =&gt; {\n  return &lt;input ref={ref} {...props} /&gt;;\n});\n</code></pre>"},{"location":"react/06_Conditional-Rendering-and-Rendering-Lists/","title":"Conditional Rendering and Rendering Lists","text":"<p>React lets you render components or elements dynamically based on conditions or data arrays. This is done using JavaScript logic inside JSX.</p>"},{"location":"react/06_Conditional-Rendering-and-Rendering-Lists/#1-conditional-rendering","title":"1. Conditional Rendering","text":"<p>You can conditionally show UI using <code>if</code>, <code>ternary</code>, <code>&amp;&amp;</code>, or conditional functions.</p>"},{"location":"react/06_Conditional-Rendering-and-Rendering-Lists/#a-using-if-else-outside-jsx","title":"a. Using if-else (outside JSX)","text":"<pre><code>function Message({ isLoggedIn }) {\n  if (isLoggedIn) {\n    return &lt;h1&gt;Welcome back!&lt;/h1&gt;;\n  } else {\n    return &lt;h1&gt;Please sign in.&lt;/h1&gt;;\n  }\n}\n</code></pre>"},{"location":"react/06_Conditional-Rendering-and-Rendering-Lists/#b-ternary-operator","title":"b. Ternary Operator","text":"<pre><code>&lt;p&gt;{isDarkMode ? \"Dark Mode\" : \"Light Mode\"}&lt;/p&gt;\n</code></pre>"},{"location":"react/06_Conditional-Rendering-and-Rendering-Lists/#c-logical-and","title":"c. Logical AND (<code>&amp;&amp;</code>)","text":"<pre><code>{isAdmin &amp;&amp; &lt;button&gt;Delete&lt;/button&gt;}\n</code></pre> <p>Only renders <code>&lt;button&gt;</code> if <code>isAdmin</code> is true.</p>"},{"location":"react/06_Conditional-Rendering-and-Rendering-Lists/#2-prevent-rendering","title":"2. Prevent Rendering","text":"<p>Return <code>null</code> to render nothing:</p> <pre><code>if (!user) return null;\n</code></pre>"},{"location":"react/06_Conditional-Rendering-and-Rendering-Lists/#3-rendering-lists","title":"3. Rendering Lists","text":"<p>Use <code>Array.map()</code> to render elements from data:</p> <pre><code>const users = [\"Alice\", \"Bob\", \"Charlie\"];\n\n&lt;ul&gt;\n  {users.map((name, index) =&gt; (\n    &lt;li key={index}&gt;{name}&lt;/li&gt;\n  ))}\n&lt;/ul&gt;\n</code></pre> <ul> <li>Wrap with a container (<code>&lt;ul&gt;</code> or <code>&lt;div&gt;</code>)</li> <li>Use a unique <code>key</code> prop for each item</li> </ul>"},{"location":"react/06_Conditional-Rendering-and-Rendering-Lists/#4-rendering-list-of-objects","title":"4. Rendering List of Objects","text":"<pre><code>const todos = [\n  { id: 1, task: \"Read\" },\n  { id: 2, task: \"Write\" }\n];\n\n&lt;ul&gt;\n  {todos.map(todo =&gt; (\n    &lt;li key={todo.id}&gt;{todo.task}&lt;/li&gt;\n  ))}\n&lt;/ul&gt;\n</code></pre>"},{"location":"react/06_Conditional-Rendering-and-Rendering-Lists/#5-conditional-rendering-inside-map","title":"5. Conditional Rendering Inside Map","text":"<pre><code>{todos.map(todo =&gt; (\n  &lt;li key={todo.id}&gt;\n    {todo.completed ? &lt;s&gt;{todo.task}&lt;/s&gt; : todo.task}\n  &lt;/li&gt;\n))}\n</code></pre>"},{"location":"react/06_Conditional-Rendering-and-Rendering-Lists/#6-key-prop-important","title":"6. Key Prop (Important)","text":"<ul> <li>Must be unique and stable</li> <li>Never use <code>index</code> as <code>key</code> if list can change</li> <li>Keys help React track what changed efficiently</li> </ul>"},{"location":"react/07_Handling-Events/","title":"Handling Events","text":"<p>React events are similar to DOM events but use camelCase and work consistently across browsers. Event handlers are written as functions and passed as props.</p>"},{"location":"react/07_Handling-Events/#1-adding-event-handlers","title":"1. Adding Event Handlers","text":"<pre><code>function Button() {\n  function handleClick() {\n    alert(\"Button clicked!\");\n  }\n\n  return &lt;button onClick={handleClick}&gt;Click Me&lt;/button&gt;;\n}\n</code></pre> <ul> <li>Use <code>onClick</code>, <code>onChange</code>, <code>onSubmit</code>, etc.</li> <li>Must be camelCase (<code>onClick</code> not <code>onclick</code>)</li> </ul>"},{"location":"react/07_Handling-Events/#2-inline-event-handler","title":"2. Inline Event Handler","text":"<pre><code>&lt;button onClick={() =&gt; alert(\"Clicked!\")}&gt;Click Me&lt;/button&gt;\n</code></pre> <p>Good for simple cases, but avoid complex logic inside JSX.</p>"},{"location":"react/07_Handling-Events/#3-passing-arguments-to-event-handlers","title":"3. Passing Arguments to Event Handlers","text":"<pre><code>function Greeting({ name }) {\n  function sayHello(user) {\n    alert(\"Hello, \" + user);\n  }\n\n  return &lt;button onClick={() =&gt; sayHello(name)}&gt;Greet&lt;/button&gt;;\n}\n</code></pre>"},{"location":"react/07_Handling-Events/#4-event-object","title":"4. Event Object","text":"<p>React passes a synthetic event object automatically.</p> <pre><code>function Input() {\n  function handleChange(event) {\n    console.log(event.target.value);\n  }\n\n  return &lt;input type=\"text\" onChange={handleChange} /&gt;;\n}\n</code></pre> <ul> <li><code>event.target.value</code> gives input value</li> <li>Works similar to native DOM <code>event</code></li> </ul>"},{"location":"react/07_Handling-Events/#5-common-events","title":"5. Common Events","text":"Event Usage Example <code>onClick</code> <code>&lt;button onClick={fn} /&gt;</code> <code>onChange</code> <code>&lt;input onChange={fn} /&gt;</code> <code>onSubmit</code> <code>&lt;form onSubmit={fn} /&gt;</code> <code>onMouseEnter</code> <code>&lt;div onMouseEnter={fn} /&gt;</code> <code>onKeyDown</code> <code>&lt;input onKeyDown={fn} /&gt;</code>"},{"location":"react/07_Handling-Events/#6-prevent-default-behavior","title":"6. Prevent Default Behavior","text":"<pre><code>function Form() {\n  function handleSubmit(e) {\n    e.preventDefault(); // stops page reload\n    console.log(\"Form submitted!\");\n  }\n\n  return (\n    &lt;form onSubmit={handleSubmit}&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre>"},{"location":"react/07_Handling-Events/#7-event-binding-in-loops","title":"7. Event Binding in Loops","text":"<pre><code>const items = [\"A\", \"B\", \"C\"];\n\n&lt;ul&gt;\n  {items.map((item, i) =&gt; (\n    &lt;li key={i} onClick={() =&gt; console.log(item)}&gt;{item}&lt;/li&gt;\n  ))}\n&lt;/ul&gt;\n</code></pre>"},{"location":"react/07_Handling-Events/#8-synthetic-events","title":"8. Synthetic Events","text":"<p>React uses SyntheticEvent, a wrapper for native events:</p> <ul> <li>Provides cross-browser compatibility</li> <li>Behaves like the native event object</li> </ul>"},{"location":"react/08_React-Router/","title":"React Router","text":"<p>React Router is a library used for handling navigation and routing in React applications. It allows you to create single-page applications (SPAs) with multiple views.</p>"},{"location":"react/08_React-Router/#1-installation","title":"1. Installation","text":"<pre><code>npm install react-router-dom\n</code></pre>"},{"location":"react/08_React-Router/#2-basic-setup","title":"2. Basic Setup","text":"<p>Wrap your app with <code>BrowserRouter</code> in the root file:</p> <pre><code>import { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\n\nroot.render(\n  &lt;BrowserRouter&gt;\n    &lt;App /&gt;\n  &lt;/BrowserRouter&gt;\n);\n</code></pre>"},{"location":"react/08_React-Router/#3-defining-routes","title":"3. Defining Routes","text":"<pre><code>import { Routes, Route } from \"react-router-dom\";\nimport Home from \"./Home\";\nimport About from \"./About\";\n\nfunction App() {\n  return (\n    &lt;Routes&gt;\n      &lt;Route path=\"/\" element={&lt;Home /&gt;} /&gt;\n      &lt;Route path=\"/about\" element={&lt;About /&gt;} /&gt;\n    &lt;/Routes&gt;\n  );\n}\n</code></pre> <ul> <li><code>path</code> = URL</li> <li><code>element</code> = Component to render</li> </ul>"},{"location":"react/08_React-Router/#4-link-component","title":"4. Link Component","text":"<p>Use <code>Link</code> instead of <code>&lt;a&gt;</code> for navigation (prevents page reload).</p> <pre><code>import { Link } from \"react-router-dom\";\n\n&lt;Link to=\"/\"&gt;Home&lt;/Link&gt;\n&lt;Link to=\"/about\"&gt;About&lt;/Link&gt;\n</code></pre>"},{"location":"react/08_React-Router/#5-usenavigate-hook","title":"5. useNavigate Hook","text":"<p>Programmatic navigation:</p> <pre><code>import { useNavigate } from \"react-router-dom\";\n\nfunction Dashboard() {\n  const navigate = useNavigate();\n\n  return &lt;button onClick={() =&gt; navigate(\"/login\")}&gt;Go to Login&lt;/button&gt;;\n}\n</code></pre>"},{"location":"react/08_React-Router/#6-useparams-hook","title":"6. useParams Hook","text":"<p>Get URL parameters:</p> <pre><code>&lt;Route path=\"/user/:id\" element={&lt;User /&gt;} /&gt;;\n\nfunction User() {\n  const { id } = useParams();\n  return &lt;h1&gt;User ID: {id}&lt;/h1&gt;;\n}\n</code></pre> <p>Visiting <code>/user/42</code> renders \"User ID: 42\".</p>"},{"location":"react/08_React-Router/#7-usesearchparams-hook","title":"7. useSearchParams Hook","text":"<p>Get query string values:</p> <pre><code>import { useSearchParams } from \"react-router-dom\";\n\nfunction Products() {\n  const [searchParams] = useSearchParams();\n  const category = searchParams.get(\"category\");\n\n  return &lt;p&gt;Category: {category}&lt;/p&gt;;\n}\n</code></pre> <p>URL: <code>/products?category=books</code></p>"},{"location":"react/08_React-Router/#8-nested-routes","title":"8. Nested Routes","text":"<pre><code>&lt;Routes&gt;\n  &lt;Route path=\"/dashboard\" element={&lt;Dashboard /&gt;}&gt;\n    &lt;Route path=\"stats\" element={&lt;Stats /&gt;} /&gt;\n    &lt;Route path=\"settings\" element={&lt;Settings /&gt;} /&gt;\n  &lt;/Route&gt;\n&lt;/Routes&gt;\n</code></pre> <p>Render child route with <code>&lt;Outlet /&gt;</code> in <code>Dashboard</code>.</p> <pre><code>import { Outlet } from \"react-router-dom\";\n\nfunction Dashboard() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Dashboard&lt;/h1&gt;\n      &lt;Outlet /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"react/08_React-Router/#9-not-found-route","title":"9. Not Found Route","text":"<pre><code>&lt;Route path=\"*\" element={&lt;h1&gt;404 Not Found&lt;/h1&gt;} /&gt;\n</code></pre>"},{"location":"react/08_React-Router/#10-protected-routes","title":"10. Protected Routes","text":"<pre><code>function PrivateRoute({ children }) {\n  const isLoggedIn = false; // example\n  return isLoggedIn ? children : &lt;Navigate to=\"/login\" /&gt;;\n}\n\n&lt;Route\n  path=\"/profile\"\n  element={\n    &lt;PrivateRoute&gt;\n      &lt;Profile /&gt;\n    &lt;/PrivateRoute&gt;\n  }\n/&gt;;\n</code></pre>"},{"location":"react/09_useContext-hook/","title":"useContext Hook","text":"<p>The <code>useContext</code> hook provides a way to share state and values across the component tree without passing props manually at every level.</p>"},{"location":"react/09_useContext-hook/#1-creating-a-context","title":"1. Creating a Context","text":"<pre><code>import { createContext } from \"react\";\n\nconst ThemeContext = createContext(\"light\"); // default value\nexport default ThemeContext;\n</code></pre>"},{"location":"react/09_useContext-hook/#2-providing-context","title":"2. Providing Context","text":"<p>Wrap components with the <code>Provider</code> to pass data down.</p> <pre><code>import ThemeContext from \"./ThemeContext\";\n\nfunction App() {\n  return (\n    &lt;ThemeContext.Provider value=\"dark\"&gt;\n      &lt;Toolbar /&gt;\n    &lt;/ThemeContext.Provider&gt;\n  );\n}\n</code></pre>"},{"location":"react/09_useContext-hook/#3-consuming-context-with-usecontext","title":"3. Consuming Context with useContext","text":"<pre><code>import { useContext } from \"react\";\nimport ThemeContext from \"./ThemeContext\";\n\nfunction Button() {\n  const theme = useContext(ThemeContext);\n  return &lt;button className={theme}&gt;Click Me&lt;/button&gt;;\n}\n</code></pre> <ul> <li>No need for <code>props</code></li> <li>Any component inside the <code>Provider</code> can access the value</li> </ul>"},{"location":"react/09_useContext-hook/#4-nested-providers","title":"4. Nested Providers","text":"<p>You can use multiple contexts:</p> <pre><code>&lt;UserContext.Provider value={{ name: \"Alice\" }}&gt;\n  &lt;ThemeContext.Provider value=\"dark\"&gt;\n    &lt;Dashboard /&gt;\n  &lt;/ThemeContext.Provider&gt;\n&lt;/UserContext.Provider&gt;\n</code></pre> <p>Each component can consume one or both contexts.</p>"},{"location":"react/09_useContext-hook/#5-updating-context","title":"5. Updating Context","text":"<p>Pass state as a value:</p> <pre><code>function App() {\n  const [theme, setTheme] = useState(\"light\");\n\n  return (\n    &lt;ThemeContext.Provider value={{ theme, setTheme }}&gt;\n      &lt;Toolbar /&gt;\n    &lt;/ThemeContext.Provider&gt;\n  );\n}\n</code></pre> <p>Consume and update:</p> <pre><code>function ThemeToggle() {\n  const { theme, setTheme } = useContext(ThemeContext);\n\n  return (\n    &lt;button onClick={() =&gt; setTheme(theme === \"light\" ? \"dark\" : \"light\")}&gt;\n      Switch Theme\n    &lt;/button&gt;\n  );\n}\n</code></pre>"},{"location":"react/09_useContext-hook/#6-when-to-use-usecontext","title":"6. When to Use useContext","text":"<ul> <li>Global theme (dark/light)</li> <li>User authentication data</li> <li>Current language/locale</li> <li>Global settings or configurations</li> </ul> <p>Avoid overusing context for everything \u2014 prefer props for local state.</p>"},{"location":"react/10_useMemo-hook/","title":"useMemo Hook","text":"<p>The <code>useMemo</code> hook is used to memoize expensive calculations so they are not re-executed on every render unless their dependencies change.</p>"},{"location":"react/10_useMemo-hook/#1-syntax","title":"1. Syntax","text":"<pre><code>const memoizedValue = useMemo(() =&gt; computeValue(a, b), [a, b]);\n</code></pre> <ul> <li>First argument \u2192 function that returns a value</li> <li>Second argument \u2192 dependency array</li> <li>Recomputes only when dependencies change</li> </ul>"},{"location":"react/10_useMemo-hook/#2-example-expensive-calculation","title":"2. Example: Expensive Calculation","text":"<pre><code>import { useMemo, useState } from \"react\";\n\nfunction Factorial() {\n  const [num, setNum] = useState(5);\n  const [theme, setTheme] = useState(\"light\");\n\n  const factorial = useMemo(() =&gt; {\n    function calcFactorial(n) {\n      console.log(\"Calculating...\");\n      return n &lt;= 0 ? 1 : n * calcFactorial(n - 1);\n    }\n    return calcFactorial(num);\n  }, [num]);\n\n  return (\n    &lt;div className={theme}&gt;\n      &lt;p&gt;Factorial of {num} is {factorial}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setNum(num + 1)}&gt;Increase&lt;/button&gt;\n      &lt;button onClick={() =&gt; setTheme(theme === \"light\" ? \"dark\" : \"light\")}&gt;Toggle Theme&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <ul> <li>Changing <code>theme</code> won\u2019t trigger recalculation of factorial</li> <li>Calculation only runs when <code>num</code> changes</li> </ul>"},{"location":"react/10_useMemo-hook/#3-without-usememo-problem","title":"3. Without useMemo (Problem)","text":"<pre><code>const factorial = calcFactorial(num); // recalculated every render\n</code></pre> <p>Even if only unrelated state changes, the function runs again \u2192 performance issue.</p>"},{"location":"react/10_useMemo-hook/#4-memoizing-derived-data","title":"4. Memoizing Derived Data","text":"<pre><code>const sortedItems = useMemo(() =&gt; {\n  return items.sort((a, b) =&gt; a.localeCompare(b));\n}, [items]);\n</code></pre> <p>Prevents unnecessary sorting when <code>items</code> hasn\u2019t changed.</p>"},{"location":"react/10_useMemo-hook/#5-usememo-vs-usecallback","title":"5. useMemo vs useCallback","text":"<ul> <li>useMemo \u2192 memoizes a value</li> <li>useCallback \u2192 memoizes a function</li> </ul> <p>Example:</p> <pre><code>const value = useMemo(() =&gt; expensiveCalc(a), [a]);\nconst callback = useCallback(() =&gt; doSomething(a), [a]);\n</code></pre>"},{"location":"react/10_useMemo-hook/#6-when-to-use","title":"6. When to Use","text":"<ul> <li>Expensive calculations (sorting, filtering, large loops)</li> <li>Preventing unnecessary re-renders of child components</li> <li>Memoizing derived state</li> </ul> <p>Avoid using it everywhere \u2014 use only when performance issues appear.</p>"},{"location":"react/11_useCallback/","title":"useCallback Hook","text":"<p>The <code>useCallback</code> hook returns a memoized version of a callback function that only changes when its dependencies change. It is mainly used to prevent unnecessary re-renders of child components that receive functions as props.</p>"},{"location":"react/11_useCallback/#1-syntax","title":"1. Syntax","text":"<pre><code>const memoizedCallback = useCallback(() =&gt; {\n  // function body\n}, [dependencies]);\n</code></pre> <ul> <li>First argument \u2192 function to memoize</li> <li>Second argument \u2192 dependency array</li> <li>Returns the same function reference unless dependencies change</li> </ul>"},{"location":"react/11_useCallback/#2-example-without-usecallback-problem","title":"2. Example Without useCallback (Problem)","text":"<pre><code>function Parent() {\n  const [count, setCount] = useState(0);\n\n  const increment = () =&gt; setCount(c =&gt; c + 1);\n\n  return &lt;Child onIncrement={increment} /&gt;;\n}\n\nfunction Child({ onIncrement }) {\n  console.log(\"Child rendered\");\n  return &lt;button onClick={onIncrement}&gt;+&lt;/button&gt;;\n}\n</code></pre> <p>Even if unrelated state changes, <code>increment</code> is recreated, causing <code>Child</code> to re-render.</p>"},{"location":"react/11_useCallback/#3-fix-with-usecallback","title":"3. Fix with useCallback","text":"<pre><code>function Parent() {\n  const [count, setCount] = useState(0);\n\n  const increment = useCallback(() =&gt; {\n    setCount(c =&gt; c + 1);\n  }, []);\n\n  return &lt;Child onIncrement={increment} /&gt;;\n}\n</code></pre> <p>Now, <code>increment</code> keeps the same reference across renders \u2192 <code>Child</code> won\u2019t re-render unnecessarily.</p>"},{"location":"react/11_useCallback/#4-usecallback-with-dependencies","title":"4. useCallback with Dependencies","text":"<pre><code>const handleSearch = useCallback(() =&gt; {\n  console.log(\"Searching:\", query);\n}, [query]);\n</code></pre> <ul> <li>The function changes only when <code>query</code> changes</li> <li>Prevents re-creating function on unrelated updates</li> </ul>"},{"location":"react/11_useCallback/#5-usecallback-with-reactmemo","title":"5. useCallback with React.memo","text":"<p>Often combined with <code>React.memo</code> for optimization:</p> <pre><code>const Child = React.memo(function Child({ onClick }) {\n  console.log(\"Child rendered\");\n  return &lt;button onClick={onClick}&gt;Click&lt;/button&gt;;\n});\n</code></pre> <ul> <li><code>React.memo</code> prevents re-render if props don\u2019t change</li> <li><code>useCallback</code> ensures the function prop doesn\u2019t change unnecessarily</li> </ul>"},{"location":"react/11_useCallback/#6-usecallback-vs-usememo","title":"6. useCallback vs useMemo","text":"Hook Purpose <code>useMemo</code> Memoizes a value <code>useCallback</code> Memoizes a function <p>Example:</p> <pre><code>const value = useMemo(() =&gt; expensiveCalc(a), [a]);\nconst fn = useCallback(() =&gt; doSomething(a), [a]);\n</code></pre>"},{"location":"react/11_useCallback/#7-when-to-use","title":"7. When to Use","text":"<ul> <li>When passing functions as props to memoized child components</li> <li>Preventing re-renders caused by changing function references</li> <li>Optimizing lists with callbacks (e.g., <code>onClick</code>, <code>onChange</code>)</li> </ul> <p>Avoid overusing \u2014 only apply when child components re-render unnecessarily.</p>"},{"location":"react/12_React-Hook-Form/","title":"Hook Form","text":"<p>React Hook Form is a library that makes handling forms in React simpler and more efficient. It minimizes re-renders, provides built-in validation, and works with both controlled and uncontrolled inputs.</p>"},{"location":"react/12_React-Hook-Form/#1-installation","title":"1. Installation","text":"<pre><code>npm install react-hook-form\n</code></pre>"},{"location":"react/12_React-Hook-Form/#2-basic-usage","title":"2. Basic Usage","text":"<pre><code>import { useForm } from \"react-hook-form\";\n\nfunction App() {\n  const { register, handleSubmit } = useForm();\n\n  const onSubmit = (data) =&gt; {\n    console.log(data);\n  };\n\n  return (\n    &lt;form onSubmit={handleSubmit(onSubmit)}&gt;\n      &lt;input {...register(\"username\")} /&gt;\n      &lt;input type=\"password\" {...register(\"password\")} /&gt;\n      &lt;button type=\"submit\"&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  );\n}\n</code></pre> <ul> <li><code>register(\"fieldName\")</code> connects input to the form</li> <li><code>handleSubmit(onSubmit)</code> handles form submission</li> <li><code>data</code> contains form values</li> </ul>"},{"location":"react/12_React-Hook-Form/#3-validation","title":"3. Validation","text":"<p>Add validation rules directly in <code>register</code>.</p> <pre><code>&lt;input\n  {...register(\"email\", { required: true, pattern: /^\\S+@\\S+$/i })}\n/&gt;\n</code></pre> <p>Show error messages:</p> <pre><code>const { register, handleSubmit, formState: { errors } } = useForm();\n\n{errors.email &amp;&amp; &lt;p&gt;Email is required and must be valid&lt;/p&gt;}\n</code></pre>"},{"location":"react/12_React-Hook-Form/#4-default-values","title":"4. Default Values","text":"<pre><code>const { register } = useForm({\n  defaultValues: {\n    username: \"guest\",\n    age: 18\n  }\n});\n</code></pre>"},{"location":"react/12_React-Hook-Form/#5-handling-different-inputs","title":"5. Handling Different Inputs","text":"<pre><code>&lt;select {...register(\"gender\")}&gt;\n  &lt;option value=\"male\"&gt;Male&lt;/option&gt;\n  &lt;option value=\"female\"&gt;Female&lt;/option&gt;\n&lt;/select&gt;\n\n&lt;input type=\"checkbox\" {...register(\"subscribe\")} /&gt;\n</code></pre>"},{"location":"react/12_React-Hook-Form/#6-watching-values","title":"6. Watching Values","text":"<pre><code>const { register, watch } = useForm();\nconst username = watch(\"username\");\n\n&lt;p&gt;Username: {username}&lt;/p&gt;\n</code></pre>"},{"location":"react/12_React-Hook-Form/#7-reset-and-set-values","title":"7. Reset and Set Values","text":"<pre><code>const { register, handleSubmit, reset, setValue } = useForm();\n\nreset({ username: \"\", password: \"\" }); // reset form\n\nsetValue(\"username\", \"JohnDoe\"); // set field value manually\n</code></pre>"},{"location":"react/12_React-Hook-Form/#8-form-submission-with-async-code","title":"8. Form Submission with Async Code","text":"<pre><code>const onSubmit = async (data) =&gt; {\n  const res = await fetch(\"/api\", {\n    method: \"POST\",\n    body: JSON.stringify(data)\n  });\n  console.log(await res.json());\n};\n</code></pre>"},{"location":"react/12_React-Hook-Form/#9-benefits-of-react-hook-form","title":"9. Benefits of React Hook Form","text":"<ul> <li>Minimal re-renders (performance-friendly)</li> <li>Simple validation</li> <li>Easy integration with UI frameworks</li> <li>Works with both controlled &amp; uncontrolled components</li> <li>Built-in error handling and helpers</li> </ul>"},{"location":"react/13_Redux/","title":"Redux","text":""},{"location":"react/13_Redux/#what-is-redux","title":"What is Redux?","text":"<p>Redux is a state management library for JavaScript applications, often used with React but can also be used with Angular, Vue, or plain JS. It helps manage the state of an application in a predictable way using a single source of truth (the store).</p>"},{"location":"react/13_Redux/#why-use-redux","title":"Why Use Redux?","text":"<ul> <li>Centralized State Management: All application state is stored in one place (the store).</li> <li>Predictable State Changes: State can only be changed through specific functions (reducers) triggered by actions.</li> <li>Easier Debugging: Redux provides tools to track every state change (Redux DevTools).</li> <li>Consistency Across Components: Different components can easily access and update the same state.</li> <li>Improved Maintainability: Clear flow of data and separation of concerns.</li> </ul>"},{"location":"react/13_Redux/#redux-core-concepts","title":"Redux Core Concepts","text":""},{"location":"react/13_Redux/#1-store","title":"1. Store","text":"<ul> <li>The store is a JavaScript object that holds the entire state tree of your application.</li> <li>There is only one store in a Redux application.</li> </ul> <pre><code>import { createStore } from \"redux\";\nconst store = createStore(reducer);\n</code></pre>"},{"location":"react/13_Redux/#2-actions","title":"2. Actions","text":"<ul> <li>Actions are plain JavaScript objects that describe what happened.</li> <li>Each action has a type (a string constant) and optionally some payload (data).</li> </ul> <pre><code>const incrementAction = {\n  type: \"INCREMENT\",\n};\n\nconst addTodoAction = {\n  type: \"ADD_TODO\",\n  payload: \"Learn Redux\",\n};\n</code></pre>"},{"location":"react/13_Redux/#3-reducers","title":"3. Reducers","text":"<ul> <li>Reducers are pure functions that specify how the state changes in response to actions.</li> <li>They take the current state and an action as arguments and return a new state.</li> </ul> <pre><code>function counterReducer(state = { count: 0 }, action) {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return { count: state.count + 1 };\n    case \"DECREMENT\":\n      return { count: state.count - 1 };\n    default:\n      return state;\n  }\n}\n</code></pre>"},{"location":"react/13_Redux/#4-dispatch","title":"4. Dispatch","text":"<ul> <li>The <code>dispatch()</code> function sends an action to the Redux store.</li> <li>When an action is dispatched, the store runs the reducer to update the state.</li> </ul> <pre><code>store.dispatch({ type: \"INCREMENT\" });\n</code></pre>"},{"location":"react/13_Redux/#5-subscribe","title":"5. Subscribe","text":"<ul> <li>The <code>subscribe()</code> method allows you to listen for state changes in the store.</li> </ul> <pre><code>store.subscribe(() =&gt; {\n  console.log(store.getState());\n});\n</code></pre>"},{"location":"react/13_Redux/#redux-data-flow-unidirectional","title":"Redux Data Flow (Unidirectional)","text":"<ol> <li>Dispatch an Action \u2013 Trigger an event that describes what happened.</li> <li>Reducer \u2013 Receives the action and current state, returns a new state.</li> <li>Store \u2013 Updates the state based on the reducer\u2019s output.</li> <li>UI \u2013 Re-renders based on the updated state.</li> </ol> <p>Flow Diagram:</p> <pre><code>UI \u2192 Action \u2192 Reducer \u2192 Store \u2192 UI\n</code></pre>"},{"location":"react/13_Redux/#example-simple-counter","title":"Example: Simple Counter","text":"<pre><code>import { createStore } from \"redux\";\n\n// Reducer\nfunction counterReducer(state = { count: 0 }, action) {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return { count: state.count + 1 };\n    case \"DECREMENT\":\n      return { count: state.count - 1 };\n    default:\n      return state;\n  }\n}\n\n// Create store\nconst store = createStore(counterReducer);\n\n// Subscribe\nstore.subscribe(() =&gt; console.log(store.getState()));\n\n// Dispatch actions\nstore.dispatch({ type: \"INCREMENT\" }); // {count: 1}\nstore.dispatch({ type: \"INCREMENT\" }); // {count: 2}\nstore.dispatch({ type: \"DECREMENT\" }); // {count: 1}\n</code></pre>"},{"location":"react/13_Redux/#using-redux-with-react","title":"Using Redux with React","text":""},{"location":"react/13_Redux/#install","title":"Install:","text":"<pre><code>npm install redux react-redux\n</code></pre>"},{"location":"react/13_Redux/#provider-setup","title":"Provider Setup","text":"<p>Wrap your app with the Redux Provider to give components access to the store.</p> <pre><code>import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport App from \"./App\";\nimport counterReducer from \"./counterReducer\";\n\nconst store = createStore(counterReducer);\n\nReactDOM.render(\n  &lt;Provider store={store}&gt;\n    &lt;App /&gt;\n  &lt;/Provider&gt;,\n  document.getElementById(\"root\")\n);\n</code></pre>"},{"location":"react/13_Redux/#accessing-state-and-dispatch-in-components","title":"Accessing State and Dispatch in Components","text":""},{"location":"react/13_Redux/#useselector-to-get-state","title":"<code>useSelector</code> \u2013 to get state","text":""},{"location":"react/13_Redux/#usedispatch-to-send-actions","title":"<code>useDispatch</code> \u2013 to send actions","text":"<pre><code>import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nfunction Counter() {\n  const count = useSelector((state) =&gt; state.count);\n  const dispatch = useDispatch();\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;{count}&lt;/h1&gt;\n      &lt;button onClick={() =&gt; dispatch({ type: \"INCREMENT\" })}&gt;+&lt;/button&gt;\n      &lt;button onClick={() =&gt; dispatch({ type: \"DECREMENT\" })}&gt;-&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default Counter;\n</code></pre>"},{"location":"react/13_Redux/#redux-toolkit-rtk","title":"Redux Toolkit (RTK)","text":"<p>Redux Toolkit simplifies Redux with less boilerplate.</p>"},{"location":"react/13_Redux/#install_1","title":"Install:","text":"<pre><code>npm install @reduxjs/toolkit react-redux\n</code></pre>"},{"location":"react/13_Redux/#create-a-slice","title":"Create a Slice","text":"<pre><code>import { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\nconst counterSlice = createSlice({\n  name: \"counter\",\n  initialState: { count: 0 },\n  reducers: {\n    increment: (state) =&gt; {\n      state.count += 1;\n    },\n    decrement: (state) =&gt; {\n      state.count -= 1;\n    },\n  },\n});\n\nexport const { increment, decrement } = counterSlice.actions;\nconst store = configureStore({ reducer: counterSlice.reducer });\nexport default store;\n</code></pre>"},{"location":"react/13_Redux/#use-in-component","title":"Use in Component","text":"<pre><code>import { useSelector, useDispatch } from \"react-redux\";\nimport { increment, decrement } from \"./store\";\n\nfunction Counter() {\n  const count = useSelector((state) =&gt; state.count);\n  const dispatch = useDispatch();\n\n  return (\n    &lt;&gt;\n      &lt;h1&gt;{count}&lt;/h1&gt;\n      &lt;button onClick={() =&gt; dispatch(increment())}&gt;+&lt;/button&gt;\n      &lt;button onClick={() =&gt; dispatch(decrement())}&gt;-&lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>"},{"location":"react/13_Redux/#middleware-in-redux","title":"Middleware in Redux","text":"<p>Middleware allows handling of side effects (like async API calls).</p>"},{"location":"react/13_Redux/#common-middleware","title":"Common Middleware:","text":"<ul> <li>redux-thunk: For asynchronous actions.</li> <li>redux-saga: For complex side effects and background tasks.</li> </ul>"},{"location":"react/13_Redux/#example-redux-thunk","title":"Example (redux-thunk):","text":"<pre><code>npm install redux-thunk\n</code></pre> <pre><code>import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nconst fetchData = () =&gt; {\n  return async (dispatch) =&gt; {\n    const response = await fetch(\"https://api.example.com/data\");\n    const data = await response.json();\n    dispatch({ type: \"DATA_LOADED\", payload: data });\n  };\n};\n</code></pre>"},{"location":"react/13_Redux/#redux-devtools","title":"Redux DevTools","text":"<ul> <li>A browser extension that lets you inspect actions, state, and changes.</li> <li>Install it and enable it in your store setup:</li> </ul> <pre><code>const store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n</code></pre>"},{"location":"react/13_Redux/#advantages-of-redux","title":"Advantages of Redux","text":"<ul> <li>Predictable state changes</li> <li>Easy debugging and testing</li> <li>Works well with any UI layer (not limited to React)</li> <li>Centralized and consistent data handling</li> </ul>"},{"location":"react/13_Redux/#disadvantages-of-redux","title":"Disadvantages of Redux","text":"<ul> <li>Boilerplate code (reduced by Redux Toolkit)</li> <li>Complex setup for small projects</li> <li>Learning curve for beginners</li> </ul>"},{"location":"react/13_Redux/#when-to-use-redux","title":"When to Use Redux","text":"<p>Use Redux when:</p> <ul> <li>You have complex state logic shared across many components.</li> <li>Multiple components need access to the same data.</li> <li>You want predictable and trackable state changes.</li> </ul> <p>Avoid Redux when:</p> <ul> <li>The app is small and simple.</li> <li>State can be handled easily using React\u2019s <code>useState</code> or <code>useContext</code>.</li> </ul>"}]}